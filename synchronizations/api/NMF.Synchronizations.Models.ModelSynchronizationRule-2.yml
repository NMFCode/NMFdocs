### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.Models.ModelSynchronizationRule`2
  commentId: T:NMF.Synchronizations.Models.ModelSynchronizationRule`2
  id: ModelSynchronizationRule`2
  parent: NMF.Synchronizations.Models
  children:
  - NMF.Synchronizations.Models.ModelSynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  langs:
  - csharp
  - vb
  name: ModelSynchronizationRule<TLeft, TRight>
  nameWithType: ModelSynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.Models.ModelSynchronizationRule<TLeft, TRight>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations.Models/ModelSynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelSynchronizationRule
    path: src/Synchronizations/Synchronizations.Models/ModelSynchronizationRule.cs
    startLine: 9
  assemblies:
  - NMF.Synchronizations.Models
  namespace: NMF.Synchronizations.Models
  summary: "\nDenotes a synchronization rule of model elements\n"
  example: []
  syntax:
    content: 'public abstract class ModelSynchronizationRule<TLeft, TRight> : SynchronizationRule<TLeft, TRight> where TLeft : class, IModelElement where TRight : class, IModelElement'
    typeParameters:
    - id: TLeft
      description: The LHS model type
    - id: TRight
      description: The RHS model type
    content.vb: Public MustInherit Class ModelSynchronizationRule(Of TLeft As {Class, IModelElement}, TRight As {Class, IModelElement}) Inherits SynchronizationRule(Of TLeft, TRight)
  inheritance:
  - System.Object
  - NMF.Synchronizations.SynchronizationRuleBase
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  inheritedMembers:
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizationJobs
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.LeftToRight
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.RightToLeft
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.TransformationDelayLevel
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.OutputDelayLevel
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.ShouldCorrespond({TLeft},{TRight},NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.LeftType
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.RightType
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Action{{TLeft},{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Action{{TRight},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Action{{TLeft},{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Action{{TRight},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TDepRight}}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepRight}}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Collections.Generic.ICollection{{TDepRight}}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepRight}}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Collections.Generic.ICollection{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TDepRight}}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepRight}}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLate``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLate``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Action{{TRight},{TValue}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Action{{TRight},{TValue}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Action{{TRight},{TValue}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Action{{TLeft},{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeOpaque(System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeOpaque(System.Action{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.CreateRightOutput({TLeft},System.Collections.Generic.IEnumerable{{TRight}},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.CreateLeftOutput({TRight},System.Collections.Generic.IEnumerable{{TLeft}},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{{TRight}},System.Collections.Generic.ICollection{{TLeft}},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  - NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  - NMF.Synchronizations.SynchronizationRuleBase.LeftType
  - NMF.Synchronizations.SynchronizationRuleBase.RightType
  - NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  - NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  - NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  - NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ModelSynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.Models.ModelSynchronizationRule(Of TLeft, TRight)
  name.vb: ModelSynchronizationRule(Of TLeft, TRight)
- uid: NMF.Synchronizations.Models.ModelSynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Models.ModelSynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  id: ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.Models.ModelSynchronizationRule`2
  langs:
  - csharp
  - vb
  name: ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  nameWithType: ModelSynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.Models.ModelSynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations.Models/ModelSynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ShouldCorrespond
    path: src/Synchronizations/Synchronizations.Models/ModelSynchronizationRule.cs
    startLine: 14
  assemblies:
  - NMF.Synchronizations.Models
  namespace: NMF.Synchronizations.Models
  summary: "\nDetermines whether a correspondence shoulf be established between the given LHS and RHS elements\n"
  example: []
  syntax:
    content: public override bool ShouldCorrespond(TLeft left, TRight right, ISynchronizationContext context)
    parameters:
    - id: left
      type: '{TLeft}'
      description: The LHS element
    - id: right
      type: '{TRight}'
      description: The RHS element
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
      description: The context in which the synchronization is run
    return:
      type: System.Boolean
      description: True, if the elements should be regarded as corresponding to each other, otherwise false
    content.vb: Public Overrides Function ShouldCorrespond(left As TLeft, right As TRight, context As ISynchronizationContext) As Boolean
  overridden: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.ShouldCorrespond({TLeft},{TRight},NMF.Synchronizations.ISynchronizationContext)
  overload: NMF.Synchronizations.Models.ModelSynchronizationRule`2.ShouldCorrespond*
  nameWithType.vb: ModelSynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Models.ModelSynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
references:
- uid: NMF.Synchronizations.Models
  commentId: N:NMF.Synchronizations.Models
  name: NMF.Synchronizations.Models
  nameWithType: NMF.Synchronizations.Models
  fullName: NMF.Synchronizations.Models
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  - name: .
  - uid: NMF.Synchronizations.Models
    name: Models
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  - name: .
  - uid: NMF.Synchronizations.Models
    name: Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Synchronizations.SynchronizationRuleBase
  commentId: T:NMF.Synchronizations.SynchronizationRuleBase
  parent: NMF.Synchronizations
  name: SynchronizationRuleBase
  nameWithType: SynchronizationRuleBase
  fullName: NMF.Synchronizations.SynchronizationRuleBase
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.SynchronizationRule{``0,``1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizationJobs
  commentId: P:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizationJobs
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  name: SynchronizationJobs
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.LeftToRight
  commentId: P:NMF.Synchronizations.SynchronizationRule{`0,`1}.LeftToRight
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  name: LeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftToRight
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftToRight
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftToRight
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.RightToLeft
  commentId: P:NMF.Synchronizations.SynchronizationRule{`0,`1}.RightToLeft
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  name: RightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.RightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightToLeft
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightToLeft
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightToLeft
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.TransformationDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule{`0,`1}.TransformationDelayLevel
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  name: TransformationDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.OutputDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule{`0,`1}.OutputDelayLevel
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  name: OutputDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.ShouldCorrespond({TLeft},{TRight},NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  name: ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  nameWithType: SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
    name: ShouldCorrespond
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
    name: ShouldCorrespond
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.LeftType
  commentId: P:NMF.Synchronizations.SynchronizationRule{`0,`1}.LeftType
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.LeftType
  name: LeftType
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftType
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.RightType
  commentId: P:NMF.Synchronizations.SynchronizationRule{`0,`1}.RightType
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.RightType
  name: RightType
  nameWithType: SynchronizationRule<TLeft, TRight>.RightType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightType
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Action{{TLeft},{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Action{{TRight},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Action{{TLeft},{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Action{{TRight},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TDepRight}}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  name: SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.ICollectionExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepRight}}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  name: SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Collections.Generic.ICollection{{TDepRight}}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  name: SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Collections.Generic.ICollection<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Collections.Generic.ICollection(Of TDepRight))))
  name.vb: SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepRight}}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  name: SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepRight))))
  name.vb: SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Collections.Generic.ICollection{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TDepRight}}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  name: SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, System.Collections.Generic.ICollection<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.IEnumerableExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TDepRight))))
  name.vb: SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}},System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepLeft}}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepRight}}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  name: SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepRight))))
  name.vb: SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: Synchronize
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  name: SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)))
  name.vb: SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeMany
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeMany``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeMany
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLate``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  name: SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)))
  name.vb: SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeManyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeManyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLate``1(System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}},System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  name: SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeManyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeManyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnly``1(System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  name: SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  name: SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)))
  name.vb: SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnly``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  name: SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)))
  name.vb: SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}},System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Action{{TRight},{TValue}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Action{{TRight},{TValue}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Action{{TRight},{TValue}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  name: SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Action{{TLeft},{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  name: SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeLateRightToLeftOnly``1(System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  name: SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeRightToLeftOnly``1(System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}},System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeOpaque(System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  name: SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable), Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable), Boolean)
  name.vb: SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable), Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Func`5
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.IDisposable
    name: IDisposable
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Func`5
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.IDisposable
    name: IDisposable
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeOpaque(System.Action{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  name: SynchronizeOpaque(Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(System.Action<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext>, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext), Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(System.Action(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext), Boolean)
  name.vb: SynchronizeOpaque(Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext), Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Action`4
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Action`4
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.CreateRightOutput({TLeft},System.Collections.Generic.IEnumerable{{TRight}},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  name: CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable<TRight>, NMF.Synchronizations.ISynchronizationContext, out bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable(Of TRight), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateRightOutput
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateRightOutput
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.CreateLeftOutput({TRight},System.Collections.Generic.IEnumerable{{TLeft}},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  name: CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable<TLeft>, NMF.Synchronizations.ISynchronizationContext, out bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable(Of TLeft), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateLeftOutput
  - name: (
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateLeftOutput
  - name: (
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  name: SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsRightToLeft
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsRightToLeft
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{{TRight}},System.Collections.Generic.ICollection{{TLeft}},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  name: SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection<TRight>, System.Collections.Generic.ICollection<TLeft>, NMF.Synchronizations.ISynchronizationContext, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection(Of TRight), System.Collections.Generic.ICollection(Of TLeft), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsLeftToRight
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsLeftToRight
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}},System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule{`0,`1}.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  definition: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  name: MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, bool>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, bool>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule{`0,`1}.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRuleBase.LeftType
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.LeftType
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: LeftType
  nameWithType: SynchronizationRuleBase.LeftType
  fullName: NMF.Synchronizations.SynchronizationRuleBase.LeftType
- uid: NMF.Synchronizations.SynchronizationRuleBase.RightType
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.RightType
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: RightType
  nameWithType: SynchronizationRuleBase.RightType
  fullName: NMF.Synchronizations.SynchronizationRuleBase.RightType
- uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: DeclareSynchronization()
  nameWithType: SynchronizationRuleBase.DeclareSynchronization()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
    name: DeclareSynchronization
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
    name: DeclareSynchronization
  - name: (
  - name: )
- uid: NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: Synchronization
  nameWithType: SynchronizationRuleBase.Synchronization
  fullName: NMF.Synchronizations.SynchronizationRuleBase.Synchronization
- uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: SyncRule<TRule>()
  nameWithType: SynchronizationRuleBase.SyncRule<TRule>()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.SyncRule<TRule>()
  nameWithType.vb: SynchronizationRuleBase.SyncRule(Of TRule)()
  fullName.vb: NMF.Synchronizations.SynchronizationRuleBase.SyncRule(Of TRule)()
  name.vb: SyncRule(Of TRule)()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
    name: SyncRule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
    name: SyncRule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: Rule<TRule>()
  nameWithType: SynchronizationRuleBase.Rule<TRule>()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.Rule<TRule>()
  nameWithType.vb: SynchronizationRuleBase.Rule(Of TRule)()
  fullName.vb: NMF.Synchronizations.SynchronizationRuleBase.Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
- uid: NMF.Synchronizations.SynchronizationRule`2
  commentId: T:NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  name: SynchronizationJobs
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  name: LeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftToRight
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftToRight
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftToRight
- uid: NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  name: RightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.RightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightToLeft
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightToLeft
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightToLeft
- uid: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  name: TransformationDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  name: OutputDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  name: ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  nameWithType: SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
    name: ShouldCorrespond
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
    name: ShouldCorrespond
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftType
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.LeftType
  name: LeftType
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftType
- uid: NMF.Synchronizations.SynchronizationRule`2.RightType
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.RightType
  name: RightType
  nameWithType: SynchronizationRule<TLeft, TRight>.RightType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightType
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  isExternal: true
  name: SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.ICollectionExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  isExternal: true
  name: SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Collections.Generic.ICollection<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Collections.Generic.ICollection(Of TDepRight))))
  name.vb: SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepRight))))
  name.vb: SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  isExternal: true
  name: SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, System.Collections.Generic.ICollection<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.IEnumerableExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TDepRight))))
  name.vb: SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  isExternal: true
  name: SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepRight>>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepRight))))
  name.vb: SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight))))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: Synchronize
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: Synchronize
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  isExternal: true
  name: SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)))
  name.vb: SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeMany
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeMany
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeMany
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  isExternal: true
  name: SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)))
  name.vb: SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeManyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
    name: SynchronizeManyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  isExternal: true
  name: SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeManyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
    name: SynchronizeManyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeManyLeftToRightOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  isExternal: true
  name: SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)))
  name.vb: SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  isExternal: true
  name: SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)))
  name.vb: SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeManyRightToLeftOnlyLate
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  isExternal: true
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  isExternal: true
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
    name: SynchronizeLateLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SynchronizeLeftToRightOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  isExternal: true
  name: SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  isExternal: true
  name: SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  isExternal: true
  name: SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
    name: SynchronizeLateRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: <
  - name: TValue
  - name: '>'
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SynchronizeRightToLeftOnly
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  isExternal: true
  name: SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable), Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable), Boolean)
  name.vb: SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable), Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Func`5
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.IDisposable
    name: IDisposable
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Func`5
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.IDisposable
    name: IDisposable
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  isExternal: true
  name: SynchronizeOpaque(Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(System.Action<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext>, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext), Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(System.Action(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext), Boolean)
  name.vb: SynchronizeOpaque(Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext), Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Action`4
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
    name: SynchronizeOpaque
  - name: (
  - uid: System.Action`4
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  isExternal: true
  name: CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable<TRight>, NMF.Synchronizations.ISynchronizationContext, out bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable(Of TRight), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateRightOutput
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateRightOutput
  - name: (
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  isExternal: true
  name: CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable<TLeft>, NMF.Synchronizations.ISynchronizationContext, out bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable(Of TLeft), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateLeftOutput
  - name: (
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
    name: CreateLeftOutput
  - name: (
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  isExternal: true
  name: SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsRightToLeft
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsRightToLeft
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  isExternal: true
  name: SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection<TRight>, System.Collections.Generic.ICollection<TLeft>, NMF.Synchronizations.ISynchronizationContext, bool)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection(Of TRight), System.Collections.Generic.ICollection(Of TLeft), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsLeftToRight
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TRight
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TLeft
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
    name: SynchronizeCollectionsLeftToRight
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  isExternal: true
  name: MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, bool>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, bool>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.Models.ModelSynchronizationRule`2.ShouldCorrespond*
  commentId: Overload:NMF.Synchronizations.Models.ModelSynchronizationRule`2.ShouldCorrespond
  name: ShouldCorrespond
  nameWithType: ModelSynchronizationRule<TLeft, TRight>.ShouldCorrespond
  fullName: NMF.Synchronizations.Models.ModelSynchronizationRule<TLeft, TRight>.ShouldCorrespond
  nameWithType.vb: ModelSynchronizationRule(Of TLeft, TRight).ShouldCorrespond
  fullName.vb: NMF.Synchronizations.Models.ModelSynchronizationRule(Of TLeft, TRight).ShouldCorrespond
- uid: '{TLeft}'
  commentId: '!:TLeft'
  definition: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: '{TRight}'
  commentId: '!:TRight'
  definition: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
