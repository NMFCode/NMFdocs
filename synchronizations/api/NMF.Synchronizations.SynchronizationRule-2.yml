### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.SynchronizationRule`2
  commentId: T:NMF.Synchronizations.SynchronizationRule`2
  id: SynchronizationRule`2
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.SynchronizationRule`2.#ctor
  - NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  - NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  - NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  - NMF.Synchronizations.SynchronizationRule`2.LeftType
  - NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  - NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  - NMF.Synchronizations.SynchronizationRule`2.RightType
  - NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  langs:
  - csharp
  - vb
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  type: Class
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizationRule
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 21
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Denotes an abstract synchronization rule
  example: []
  syntax:
    content: 'public abstract class SynchronizationRule<TLeft, TRight> : SynchronizationRuleBase'
    typeParameters:
    - id: TLeft
      description: The LHS type of the synchronization rule
    - id: TRight
      description: The RHS type of the synchronization rule
    content.vb: Public MustInherit Class SynchronizationRule(Of TLeft, TRight) Inherits SynchronizationRuleBase
  inheritance:
  - System.Object
  - NMF.Synchronizations.SynchronizationRuleBase
  derivedClasses:
  - NMF.Synchronizations.Models.ModelCopyRule`1
  - NMF.Synchronizations.Models.ModelSynchronizationRule`2
  inheritedMembers:
  - NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  - NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  - NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  - NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  id: SynchronizationJobs
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizationJobs
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  type: Property
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizationJobs
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 26
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Gets the jobs performed by this synchronization rule
  example: []
  syntax:
    content: public ICollection<ISynchronizationJob<TLeft, TRight>> SynchronizationJobs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}}
    content.vb: Public Property SynchronizationJobs As ICollection(Of ISynchronizationJob(Of TLeft, TRight))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
- uid: NMF.Synchronizations.SynchronizationRule`2.#ctor
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.#ctor
  id: '#ctor'
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizationRule()
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationRule()
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationRule()
  type: Constructor
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 31
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Creates a new instance
  example: []
  syntax:
    content: protected SynchronizationRule()
    content.vb: Protected Sub New()
  overload: NMF.Synchronizations.SynchronizationRule`2.#ctor*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).New()
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).New()
  name.vb: New()
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  id: LeftToRight
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: LeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftToRight
  type: Property
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: LeftToRight
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 41
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Gets the transformation rule responsible of transforming elements from left to right
  example: []
  syntax:
    content: public TransformationRuleBase<TLeft, TRight> LeftToRight { get; }
    parameters: []
    return:
      type: NMF.Transformations.TransformationRuleBase{{TLeft},{TRight}}
    content.vb: Public ReadOnly Property LeftToRight As TransformationRuleBase(Of TLeft, TRight)
  overload: NMF.Synchronizations.SynchronizationRule`2.LeftToRight*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftToRight
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftToRight
- uid: NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  id: RightToLeft
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: RightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.RightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightToLeft
  type: Property
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: RightToLeft
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 46
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Gets the transformation rule responsible of transforming elements from right to left
  example: []
  syntax:
    content: public TransformationRuleBase<TRight, TLeft> RightToLeft { get; }
    parameters: []
    return:
      type: NMF.Transformations.TransformationRuleBase{{TRight},{TLeft}}
    content.vb: Public ReadOnly Property RightToLeft As TransformationRuleBase(Of TRight, TLeft)
  overload: NMF.Synchronizations.SynchronizationRule`2.RightToLeft*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightToLeft
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightToLeft
- uid: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  id: TransformationDelayLevel
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: TransformationDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  type: Property
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: TransformationDelayLevel
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 80
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Gets or sets the transformation delay level
  example: []
  syntax:
    content: public byte TransformationDelayLevel { get; set; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Property TransformationDelayLevel As Byte
  overload: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  id: OutputDelayLevel
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: OutputDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  type: Property
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: OutputDelayLevel
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 96
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Gets or sets the output delay level of the transformations
  example: []
  syntax:
    content: public byte OutputDelayLevel { get; set; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Property OutputDelayLevel As Byte
  overload: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  id: ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  nameWithType: SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ShouldCorrespond
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 143
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Determines whether a correspondence shoulf be established between the given LHS and RHS elements
  example: []
  syntax:
    content: public virtual bool ShouldCorrespond(TLeft left, TRight right, ISynchronizationContext context)
    parameters:
    - id: left
      type: '{TLeft}'
      description: The LHS element
    - id: right
      type: '{TRight}'
      description: The RHS element
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
      description: The context in which the synchronization is run
    return:
      type: System.Boolean
      description: True, if the elements should be regarded as corresponding to each other, otherwise false
    content.vb: Public Overridable Function ShouldCorrespond(left As TLeft, right As TRight, context As ISynchronizationContext) As Boolean
  overload: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftType
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.LeftType
  id: LeftType
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: LeftType
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftType
  type: Property
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: LeftType
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 151
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Gets the LHS type of this rule
  example: []
  syntax:
    content: public override sealed Type LeftType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public NotOverridable Overrides ReadOnly Property LeftType As Type
  overridden: NMF.Synchronizations.SynchronizationRuleBase.LeftType
  overload: NMF.Synchronizations.SynchronizationRule`2.LeftType*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftType
- uid: NMF.Synchronizations.SynchronizationRule`2.RightType
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.RightType
  id: RightType
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: RightType
  nameWithType: SynchronizationRule<TLeft, TRight>.RightType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightType
  type: Property
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: RightType
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 159
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Gets the RHS type of this rule
  example: []
  syntax:
    content: public override sealed Type RightType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public NotOverridable Overrides ReadOnly Property RightType As Type
  overridden: NMF.Synchronizations.SynchronizationRuleBase.RightType
  overload: NMF.Synchronizations.SynchronizationRule`2.RightType*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightType
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 173
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 189
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, TDepLeft>> leftSelector, Expression<Func<TRight, ITransformationContext, TDepRight>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 214
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Action<TLeft, TDepLeft> leftSetter, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
      description: The LHS in-model lens
    - id: leftSetter
      type: System.Action{{TLeft},{TDepLeft}}
      description: An alternative LHS lens put
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), leftSetter As Action(Of TLeft, TDepLeft), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 231
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, TDepLeft>> leftSelector, Action<TLeft, ITransformationContext, TDepLeft> leftSetter, Expression<Func<TRight, ITransformationContext, TDepRight>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}}
      description: The LHS in-model lens
    - id: leftSetter
      type: System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}
      description: An alternative LHS lens put
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), leftSetter As Action(Of TLeft, ITransformationContext, TDepLeft), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 255
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Action<TRight, TDepRight> rightSetter, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
      description: The RHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},{TDepRight}}
      description: An alternative RHS lens put
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), rightSetter As Action(Of TRight, TDepRight), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 272
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, TDepLeft>> leftSelector, Expression<Func<TRight, ITransformationContext, TDepRight>> rightSelector, Action<TRight, ITransformationContext, TDepRight> rightSetter, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}}
      description: The RHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}
      description: An alternative RHS lens put
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), rightSetter As Action(Of TRight, ITransformationContext, TDepRight), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 297
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Action<TLeft, TDepLeft> leftSetter, Expression<Func<TRight, TDepRight>> rightSelector, Action<TRight, TDepRight> rightSetter, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
      description: The LHS in-model lens
    - id: leftSetter
      type: System.Action{{TLeft},{TDepLeft}}
      description: An alternative LHS lens put
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
      description: The RHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},{TDepRight}}
      description: An alternative RHS lens put
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), leftSetter As Action(Of TLeft, TDepLeft), rightSelector As Expression(Of Func(Of TRight, TDepRight)), rightSetter As Action(Of TRight, TDepRight), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Action<TLeft, ITransformationContext, TDepLeft>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Action<TRight, ITransformationContext, TDepRight>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 315
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, TDepLeft>> leftSelector, Action<TLeft, ITransformationContext, TDepLeft> leftSetter, Expression<Func<TRight, ITransformationContext, TDepRight>> rightSelector, Action<TRight, ITransformationContext, TDepRight> rightSetter, Expression<Func<TLeft, TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}}
      description: The LHS in-model lens
    - id: leftSetter
      type: System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}
      description: An alternative LHS lens put
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}}
      description: The RHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}
      description: An alternative RHS lens put
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), leftSetter As Action(Of TLeft, ITransformationContext, TDepLeft), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), rightSetter As Action(Of TRight, ITransformationContext, TDepRight), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Action(Of TLeft, ITransformationContext, TDepLeft), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Action(Of TRight, ITransformationContext, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 339
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Left to Right
  example: []
  syntax:
    content: 'public void SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TLeft, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TLeft, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 355
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Left to Right
  example: []
  syntax:
    content: 'public void SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, TDepLeft>> leftSelector, Expression<Func<TRight, ITransformationContext, TDepRight>> rightSelector, Expression<Func<TLeft, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), guard As Expression(Of Func(Of TLeft, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 378
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Right to Left
  example: []
  syntax:
    content: 'public void SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, TDepLeft>>, Expression<Func<TRight, ITransformationContext, TDepRight>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 394
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Right to Left
  example: []
  syntax:
    content: 'public void SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, TDepLeft>> leftSelector, Expression<Func<TRight, ITransformationContext, TDepRight>> rightSelector, Expression<Func<TRight, bool>> guard = null) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), guard As Expression(Of Func(Of TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft)), Expression(Of Func(Of TRight, ITransformationContext, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  id: SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.ICollectionExpression<TDepRight>>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeMany
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 416
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>> leftSelector, Expression<Func<TRight, ICollectionExpression<TDepRight>>> rightSelector) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TDepLeft}}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TDepRight}}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeMany(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  id: SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepRight>>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeMany
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 431
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule
  example: []
  syntax:
    content: 'public void SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>> leftSelector, Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>> rightSelector) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepLeft}}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepRight}}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeMany(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  id: SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Collections.Generic.ICollection<TDepRight>>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 452
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Left to Right
  example: []
  syntax:
    content: 'public void SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>> leftSelector, Expression<Func<TRight, ICollection<TDepRight>>> rightSelector) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TDepLeft}}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Collections.Generic.ICollection{{TDepRight}}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeManyLeftToRightOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Collections.Generic.ICollection(Of TDepRight))))
  name.vb: SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  id: SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepRight>>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 467
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Left to Right
  example: []
  syntax:
    content: 'public void SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>> leftSelector, Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>> rightSelector) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepLeft}}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepRight}}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeManyLeftToRightOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepRight))))
  name.vb: SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  id: SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, System.Collections.Generic.ICollection<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.IEnumerableExpression<TDepRight>>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 487
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Right to Left
  example: []
  syntax:
    content: 'public void SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ICollection<TDepLeft>>> leftSelector, Expression<Func<TRight, IEnumerableExpression<TDepRight>>> rightSelector) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Collections.Generic.ICollection{{TDepLeft}}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TDepRight}}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeManyRightToLeftOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TDepRight))))
  name.vb: SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  id: SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>, Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepRight>>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 502
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent elements using the provided synchronization rule but only Right to Left
  example: []
  syntax:
    content: 'public void SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>> leftSelector, Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>> rightSelector) where TDepLeft : class where TDepRight : class'
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
      description: The rule that should be used as isomorphism
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepLeft}}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepRight}}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TDepLeft
      description: The dependent LHS type
    - id: TDepRight
      description: The dependent RHS type
    content.vb: Public Sub SynchronizeManyRightToLeftOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight))))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepRight))))
  name.vb: SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 520
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values late
  example: []
  syntax:
    content: public void SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLate(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 531
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values
  example: []
  syntax:
    content: public void Synchronize<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub Synchronize(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 543
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values
  example: []
  syntax:
    content: public void Synchronize<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub Synchronize(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  id: SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeMany
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 562
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values
  example: []
  syntax:
    content: public void SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>> leftSelector, Func<TRight, ICollectionExpression<TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeMany(Of TValue)(leftSelector As Func(Of TLeft, ICollectionExpression(Of TValue)), rightSelector As Func(Of TRight, ICollectionExpression(Of TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)))
  name.vb: SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: SynchronizeMany``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeMany
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 577
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values
  example: []
  syntax:
    content: public void SynchronizeMany<TValue>(Func<TLeft, ICollectionExpression<TValue>> leftSelector, Func<TRight, ICollectionExpression<TValue>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeMany(Of TValue)(leftSelector As Func(Of TLeft, ICollectionExpression(Of TValue)), rightSelector As Func(Of TRight, ICollectionExpression(Of TValue)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: SynchronizeMany(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  id: SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 599
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values
  example: []
  syntax:
    content: public void SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>> leftSelector, Func<TRight, ICollectionExpression<TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLate(Of TValue)(leftSelector As Func(Of TLeft, ICollectionExpression(Of TValue)), rightSelector As Func(Of TRight, ICollectionExpression(Of TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)))
  name.vb: SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: SynchronizeManyLate``1(System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Func{`1,NMF.Expressions.ICollectionExpression{``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>>, Func<TRight, ICollectionExpression<TValue>>, Expression<Func<TLeft, TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLate<TValue>(System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>, System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 614
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values
  example: []
  syntax:
    content: public void SynchronizeManyLate<TValue>(Func<TLeft, ICollectionExpression<TValue>> leftSelector, Func<TRight, ICollectionExpression<TValue>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLate(Of TValue)(leftSelector As Func(Of TLeft, ICollectionExpression(Of TValue)), rightSelector As Func(Of TRight, ICollectionExpression(Of TValue)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue)), System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean)))
  name.vb: SynchronizeManyLate(Of TValue)(Func(Of TLeft, ICollectionExpression(Of TValue)), Func(Of TRight, ICollectionExpression(Of TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  id: SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 636
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>> leftSelector, Func<TRight, ICollection<TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLeftToRightOnly(Of TValue)(leftSelector As Func(Of TLeft, IEnumerableExpression(Of TValue)), rightSelector As Func(Of TRight, ICollection(Of TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  id: SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 650
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>> leftSelector, Func<TRight, ITransformationContext, ICollection<TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLeftToRightOnly(Of TValue)(leftSelector As Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), rightSelector As Func(Of TRight, ITransformationContext, ICollection(Of TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 665
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, IEnumerableExpression<TValue>> leftSelector, Func<TRight, ICollection<TValue>> rightSelector, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLeftToRightOnly(Of TValue)(leftSelector As Func(Of TLeft, IEnumerableExpression(Of TValue)), rightSelector As Func(Of TRight, ICollection(Of TValue)), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeManyLeftToRightOnly``1(System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>, Func<TRight, ITransformationContext, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TValue>(System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 677
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyLeftToRightOnly<TValue>(Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>> leftSelector, Func<TRight, ITransformationContext, ICollection<TValue>> rightSelector, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLeftToRightOnly(Of TValue)(leftSelector As Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), rightSelector As Func(Of TRight, ITransformationContext, ICollection(Of TValue)), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TValue)(System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnly(Of TValue)(Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue)), Func(Of TRight, ITransformationContext, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  id: SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnlyLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 702
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>> leftSelector, Func<TRight, ICollection<TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLeftToRightOnlyLate(Of TValue)(leftSelector As Func(Of TLeft, IEnumerableExpression(Of TValue)), rightSelector As Func(Of TRight, ICollection(Of TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)))
  name.vb: SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeManyLeftToRightOnlyLate``1(System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}},System.Func{`1,System.Collections.Generic.ICollection{``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>>, Func<TRight, ICollection<TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate<TValue>(System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>, System.Func<TRight, System.Collections.Generic.ICollection<TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyLeftToRightOnlyLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 717
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyLeftToRightOnlyLate<TValue>(Func<TLeft, IEnumerableExpression<TValue>> leftSelector, Func<TRight, ICollection<TValue>> rightSelector, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyLeftToRightOnlyLate(Of TValue)(leftSelector As Func(Of TLeft, IEnumerableExpression(Of TValue)), rightSelector As Func(Of TRight, ICollection(Of TValue)), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate(Of TValue)(System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeManyLeftToRightOnlyLate(Of TValue)(Func(Of TLeft, IEnumerableExpression(Of TValue)), Func(Of TRight, ICollection(Of TValue)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  id: SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 742
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>> leftSelector, Func<TRight, IEnumerableExpression<TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyRightToLeftOnly(Of TValue)(leftSelector As Func(Of TLeft, ICollection(Of TValue)), rightSelector As Func(Of TRight, IEnumerableExpression(Of TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)))
  name.vb: SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeManyRightToLeftOnly``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 757
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyRightToLeftOnly<TValue>(Func<TLeft, ICollection<TValue>> leftSelector, Func<TRight, IEnumerableExpression<TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyRightToLeftOnly(Of TValue)(leftSelector As Func(Of TLeft, ICollection(Of TValue)), rightSelector As Func(Of TRight, IEnumerableExpression(Of TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeManyRightToLeftOnly(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  id: SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyRightToLeftOnlyLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 782
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>> leftSelector, Func<TRight, IEnumerableExpression<TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyRightToLeftOnlyLate(Of TValue)(leftSelector As Func(Of TLeft, ICollection(Of TValue)), rightSelector As Func(Of TRight, IEnumerableExpression(Of TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)))
  name.vb: SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeManyRightToLeftOnlyLate``1(System.Func{`0,System.Collections.Generic.ICollection{``0}},System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>>, Func<TRight, IEnumerableExpression<TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate<TValue>(System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>, System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeManyRightToLeftOnlyLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 797
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeManyRightToLeftOnlyLate<TValue>(Func<TLeft, ICollection<TValue>> leftSelector, Func<TRight, IEnumerableExpression<TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of values
    content.vb: Public Sub SynchronizeManyRightToLeftOnlyLate(Of TValue)(leftSelector As Func(Of TLeft, ICollection(Of TValue)), rightSelector As Func(Of TRight, IEnumerableExpression(Of TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate(Of TValue)(System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue)), System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeManyRightToLeftOnlyLate(Of TValue)(Func(Of TLeft, ICollection(Of TValue)), Func(Of TRight, IEnumerableExpression(Of TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 822
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 839
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>> leftSelector, Expression<Func<TRight, ITransformationContext, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TValue)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 856
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Action<TRight, TValue> rightSetter)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},{TValue}}
      description: A RHS setter
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSetter As Action(Of TRight, TValue))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 870
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>> leftSelector, Action<TRight, ITransformationContext, TValue> rightSetter)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The LHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}
      description: A RHS setter
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TValue)), rightSetter As Action(Of TRight, ITransformationContext, TValue))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLateLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 884
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLateLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  id: SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLateLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 901
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Action<TRight, TValue> rightSetter)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},{TValue}}
      description: A RHS setter
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLateLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSetter As Action(Of TRight, TValue))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  id: SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLateLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 915
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>> leftSelector, Action<TRight, ITransformationContext, TValue> rightSetter)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The LHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}
      description: A RHS setter
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLateLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TValue)), rightSetter As Action(Of TRight, ITransformationContext, TValue))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 930
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 948
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Action<TRight, TValue> rightSetter, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},{TValue}}
      description: A RHS setter
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSetter As Action(Of TRight, TValue), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Action<TRight, ITransformationContext, TValue>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 974
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>> leftSelector, Action<TRight, ITransformationContext, TValue> rightSetter, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The LHS in-model lens
    - id: rightSetter
      type: System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}
      description: A RHS setter
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TValue)), rightSetter As Action(Of TRight, ITransformationContext, TValue), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Action(Of TRight, ITransformationContext, TValue), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TLeft, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TLeft, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1000
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only left to right
  example: []
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>> leftSelector, Expression<Func<TRight, ITransformationContext, TValue>> rightSelector, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TValue)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TValue)), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1017
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1034
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue> leftSetter, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},{TValue}}
      description: A LHS setter
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, TValue), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  id: SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1048
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue> leftSetter, Expression<Func<TRight, ITransformationContext, TValue>> rightSelector)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}
      description: A LHS setter
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, ITransformationContext, TValue), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLateRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1062
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLateRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  id: SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLateRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1079
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>> leftSelector, Expression<Func<TRight, ITransformationContext, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLateRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TValue)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLateRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1096
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue> leftSetter, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},{TValue}}
      description: A LHS setter
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLateRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, TValue), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  id: SynchronizeLateRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeLateRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1110
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue> leftSetter, Expression<Func<TRight, ITransformationContext, TValue>> rightSelector)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}
      description: A LHS setter
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The RHS in-model lens
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeLateRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, ITransformationContext, TValue), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1125
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1143
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue> leftSetter, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},{TValue}}
      description: A LHS setter
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, TValue), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1169
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, ITransformationContext, TValue>> leftSelector, Expression<Func<TRight, ITransformationContext, TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The LHS in-model lens
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, ITransformationContext, TValue)), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, ITransformationContext, TValue)), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``1(System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0},System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue>, Expression<Func<TRight, ITransformationContext, TValue>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1187
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes the dependent values but only right to left
  example: []
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Action<TLeft, ITransformationContext, TValue> leftSetter, Expression<Func<TRight, ITransformationContext, TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}
      description: A LHS setter
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
      description: The RHS in-model lens
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A guard condition or null
    typeParameters:
    - id: TValue
      description: The type of the values
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, ITransformationContext, TValue), rightSelector As Expression(Of Func(Of TRight, ITransformationContext, TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, ITransformationContext, TValue), Expression(Of Func(Of TRight, ITransformationContext, TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  id: SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable},System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>, bool)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeOpaque
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1211
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Executes the given action when a correspondence between LHS and RHS elements is established
  example: []
  syntax:
    content: public void SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable> action, bool isEarly = false)
    parameters:
    - id: action
      type: System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
      description: The action to perform
    - id: isEarly
      type: System.Boolean
      description: True, if the synchronization job should be performed before dependencies, otherwise False
    content.vb: Public Sub SynchronizeOpaque(action As Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable), isEarly As Boolean = False)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable), Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable), Boolean)
  name.vb: SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable), Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  id: SynchronizeOpaque(System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext},System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeOpaque(Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(System.Action<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext>, bool)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeOpaque
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1221
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Executes the given action when a correspondence between LHS and RHS elements is established
  example: []
  syntax:
    content: public void SynchronizeOpaque(Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext> action, bool isEarly = false)
    parameters:
    - id: action
      type: System.Action{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext}
      description: The action to perform
    - id: isEarly
      type: System.Boolean
      description: True, if the synchronization job should be performed before dependencies, otherwise False
    content.vb: Public Sub SynchronizeOpaque(action As Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext), isEarly As Boolean = False)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext), Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(System.Action(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext), Boolean)
  name.vb: SynchronizeOpaque(Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext), Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  id: CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable<TRight>, NMF.Synchronizations.ISynchronizationContext, out bool)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CreateRightOutput
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1258
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Creates the RHS output
  example: []
  syntax:
    content: protected virtual TRight CreateRightOutput(TLeft input, IEnumerable<TRight> candidates, ISynchronizationContext context, out bool existing)
    parameters:
    - id: input
      type: '{TLeft}'
      description: The corresponding LHS element
    - id: candidates
      type: System.Collections.Generic.IEnumerable{{TRight}}
      description: Candidates for the RHS element or null
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
      description: The synchronization context
    - id: existing
      type: System.Boolean
      description: True, if an existing element is returned, otherwise False
    return:
      type: '{TRight}'
      description: The RHS element
    content.vb: Protected Overridable Function CreateRightOutput(input As TLeft, candidates As IEnumerable(Of TRight), context As ISynchronizationContext, existing As Boolean) As TRight
  overload: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable(Of TRight), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  id: CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable<TLeft>, NMF.Synchronizations.ISynchronizationContext, out bool)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CreateLeftOutput
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1300
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Creates the LHS output
  example: []
  syntax:
    content: protected virtual TLeft CreateLeftOutput(TRight input, IEnumerable<TLeft> candidates, ISynchronizationContext context, out bool existing)
    parameters:
    - id: input
      type: '{TRight}'
      description: The corresponding RHS element
    - id: candidates
      type: System.Collections.Generic.IEnumerable{{TLeft}}
      description: Candidates for the LHS element or null
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
      description: The synchronization context
    - id: existing
      type: System.Boolean
      description: True, if an existing element is returned, otherwise False
    return:
      type: '{TLeft}'
      description: The LHS element
    content.vb: Protected Overridable Function CreateLeftOutput(input As TRight, candidates As IEnumerable(Of TLeft), context As ISynchronizationContext, existing As Boolean) As TLeft
  overload: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable(Of TLeft), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  id: SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext, bool)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeCollectionsRightToLeft
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1326
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes collections of LHS and RHS elements in the direction rights to lefts
  example: []
  syntax:
    content: protected virtual void SynchronizeCollectionsRightToLeft(ICollection<TLeft> lefts, ICollection<TRight> rights, ISynchronizationContext context, bool ignoreCandidates)
    parameters:
    - id: lefts
      type: System.Collections.Generic.ICollection{{TLeft}}
      description: The left elements
    - id: rights
      type: System.Collections.Generic.ICollection{{TRight}}
      description: The right elements
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
      description: The synchronization context
    - id: ignoreCandidates
      type: System.Boolean
      description: True, if candidates can be ignored, otherwise false
    content.vb: Protected Overridable Sub SynchronizeCollectionsRightToLeft(lefts As ICollection(Of TLeft), rights As ICollection(Of TRight), context As ISynchronizationContext, ignoreCandidates As Boolean)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  id: SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, bool)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, bool)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection<TRight>, System.Collections.Generic.ICollection<TLeft>, NMF.Synchronizations.ISynchronizationContext, bool)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SynchronizeCollectionsLeftToRight
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1389
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Synchronizes collections of LHS and RHS elements in the direction lefts to rights
  example: []
  syntax:
    content: protected virtual void SynchronizeCollectionsLeftToRight(ICollection<TRight> rights, ICollection<TLeft> lefts, ISynchronizationContext context, bool ignoreCandidates)
    parameters:
    - id: rights
      type: System.Collections.Generic.ICollection{{TRight}}
      description: The right elements
    - id: lefts
      type: System.Collections.Generic.ICollection{{TLeft}}
      description: The left elements
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
      description: The synchronization context
    - id: ignoreCandidates
      type: System.Boolean
      description: True, if candidates can be ignored, otherwise false
    content.vb: Protected Overridable Sub SynchronizeCollectionsLeftToRight(rights As ICollection(Of TRight), lefts As ICollection(Of TLeft), context As ISynchronizationContext, ignoreCandidates As Boolean)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection(Of TRight), System.Collections.Generic.ICollection(Of TLeft), NMF.Synchronizations.ISynchronizationContext, Boolean)
  name.vb: SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, bool>>, Expression<Func<TRight, bool>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, bool>>, Expression<Func<TRight, bool>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression<System.Func<TLeft, bool>>, System.Linq.Expressions.Expression<System.Func<TRight, bool>>)
  type: Method
  source:
    remote:
      path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: MarkInstantiatingFor
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 1497
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: Marks this synchronization rule instantiating for the given other synchronization rule
  example: []
  syntax:
    content: public void MarkInstantiatingFor(SynchronizationRuleBase synchronizationRule, Expression<Func<TLeft, bool>> leftPredicate = null, Expression<Func<TRight, bool>> rightPredicate = null)
    parameters:
    - id: synchronizationRule
      type: NMF.Synchronizations.SynchronizationRuleBase
      description: The other synchronization rule with more abstract LHS and RHS types
    - id: leftPredicate
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
      description: A filter function on the LHS when this instantiation applies or null
    - id: rightPredicate
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
      description: A filter function on the RHS when this instantiation applies or null
    content.vb: Public Sub MarkInstantiatingFor(synchronizationRule As SynchronizationRuleBase, leftPredicate As Expression(Of Func(Of TLeft, Boolean)) = Nothing, rightPredicate As Expression(Of Func(Of TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean)))
  name.vb: MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  href: NMF.html
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
    href: NMF.Synchronizations.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
    href: NMF.Synchronizations.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Synchronizations.SynchronizationRuleBase
  commentId: T:NMF.Synchronizations.SynchronizationRuleBase
  parent: NMF.Synchronizations
  href: NMF.Synchronizations.SynchronizationRuleBase.html
  name: SynchronizationRuleBase
  nameWithType: SynchronizationRuleBase
  fullName: NMF.Synchronizations.SynchronizationRuleBase
- uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  parent: NMF.Synchronizations.SynchronizationRuleBase
  href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_DeclareSynchronization
  name: DeclareSynchronization()
  nameWithType: SynchronizationRuleBase.DeclareSynchronization()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
    name: DeclareSynchronization
    href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_DeclareSynchronization
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
    name: DeclareSynchronization
    href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_DeclareSynchronization
  - name: (
  - name: )
- uid: NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  parent: NMF.Synchronizations.SynchronizationRuleBase
  href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_Synchronization
  name: Synchronization
  nameWithType: SynchronizationRuleBase.Synchronization
  fullName: NMF.Synchronizations.SynchronizationRuleBase.Synchronization
- uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  parent: NMF.Synchronizations.SynchronizationRuleBase
  href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_SyncRule__1
  name: SyncRule<TRule>()
  nameWithType: SynchronizationRuleBase.SyncRule<TRule>()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.SyncRule<TRule>()
  nameWithType.vb: SynchronizationRuleBase.SyncRule(Of TRule)()
  fullName.vb: NMF.Synchronizations.SynchronizationRuleBase.SyncRule(Of TRule)()
  name.vb: SyncRule(Of TRule)()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
    name: SyncRule
    href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_SyncRule__1
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
    name: SyncRule
    href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_SyncRule__1
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  parent: NMF.Synchronizations.SynchronizationRuleBase
  href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_Rule__1
  name: Rule<TRule>()
  nameWithType: SynchronizationRuleBase.Rule<TRule>()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.Rule<TRule>()
  nameWithType.vb: SynchronizationRuleBase.Rule(Of TRule)()
  fullName.vb: NMF.Synchronizations.SynchronizationRuleBase.Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
    name: Rule
    href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_Rule__1
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
    name: Rule
    href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_Rule__1
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizationJobs
  name: SynchronizationJobs
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
- uid: System.Collections.Generic.ICollection{NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}}
  commentId: T:System.Collections.Generic.ICollection{NMF.Synchronizations.ISynchronizationJob{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<ISynchronizationJob<TLeft, TRight>>
  nameWithType: ICollection<ISynchronizationJob<TLeft, TRight>>
  fullName: System.Collections.Generic.ICollection<NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>>
  nameWithType.vb: ICollection(Of ISynchronizationJob(Of TLeft, TRight))
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight))
  name.vb: ICollection(Of ISynchronizationJob(Of TLeft, TRight))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    href: NMF.Synchronizations.ISynchronizationJob-2.html
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    href: NMF.Synchronizations.ISynchronizationJob-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NMF.Synchronizations.SynchronizationRule`2.#ctor*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.#ctor
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2__ctor
  name: SynchronizationRule
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationRule
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationRule
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).New
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).New
  name.vb: New
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftToRight*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_LeftToRight
  name: LeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftToRight
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftToRight
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftToRight
- uid: NMF.Transformations.TransformationRuleBase{{TLeft},{TRight}}
  commentId: T:NMF.Transformations.TransformationRuleBase{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TLeft, TRight>
  nameWithType: TransformationRuleBase<TLeft, TRight>
  fullName: NMF.Transformations.TransformationRuleBase<TLeft, TRight>
  nameWithType.vb: TransformationRuleBase(Of TLeft, TRight)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TLeft, TRight)
  name.vb: TransformationRuleBase(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: NMF.Synchronizations.SynchronizationRule`2.RightToLeft*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_RightToLeft
  name: RightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.RightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightToLeft
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightToLeft
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightToLeft
- uid: NMF.Transformations.TransformationRuleBase{{TRight},{TLeft}}
  commentId: T:NMF.Transformations.TransformationRuleBase{`1,`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TRight, TLeft>
  nameWithType: TransformationRuleBase<TRight, TLeft>
  fullName: NMF.Transformations.TransformationRuleBase<TRight, TLeft>
  nameWithType.vb: TransformationRuleBase(Of TRight, TLeft)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TRight, TLeft)
  name.vb: TransformationRuleBase(Of TRight, TLeft)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TLeft
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TLeft
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_TransformationDelayLevel
  name: TransformationDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_OutputDelayLevel
  name: OutputDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_ShouldCorrespond__0__1_NMF_Synchronizations_ISynchronizationContext_
  name: ShouldCorrespond
  nameWithType: SynchronizationRule<TLeft, TRight>.ShouldCorrespond
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.ShouldCorrespond
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).ShouldCorrespond
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).ShouldCorrespond
- uid: '{TLeft}'
  commentId: '!:TLeft'
  definition: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: '{TRight}'
  commentId: '!:TRight'
  definition: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  href: NMF.Synchronizations.ISynchronizationContext.html
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.SynchronizationRuleBase.LeftType
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.LeftType
  parent: NMF.Synchronizations.SynchronizationRuleBase
  href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_LeftType
  name: LeftType
  nameWithType: SynchronizationRuleBase.LeftType
  fullName: NMF.Synchronizations.SynchronizationRuleBase.LeftType
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftType*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.LeftType
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_LeftType
  name: LeftType
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Synchronizations.SynchronizationRuleBase.RightType
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.RightType
  parent: NMF.Synchronizations.SynchronizationRuleBase
  href: NMF.Synchronizations.SynchronizationRuleBase.html#NMF_Synchronizations_SynchronizationRuleBase_RightType
  name: RightType
  nameWithType: SynchronizationRuleBase.RightType
  fullName: NMF.Synchronizations.SynchronizationRuleBase.RightType
- uid: NMF.Synchronizations.SynchronizationRule`2.RightType*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.RightType
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_RightType
  name: RightType
  nameWithType: SynchronizationRule<TLeft, TRight>.RightType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightType
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.Synchronize
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_Synchronize__2_NMF_Synchronizations_SynchronizationRule___0___1__System_Linq_Expressions_Expression_System_Func__0___0___System_Linq_Expressions_Expression_System_Func__1___1___System_Linq_Expressions_Expression_System_Func__0__1_System_Boolean___
  name: Synchronize
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize
- uid: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
  commentId: T:NMF.Synchronizations.SynchronizationRule{``0,``1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationRule`2
  href: NMF.Synchronizations.SynchronizationRule-2.html
  name: SynchronizationRule<TDepLeft, TDepRight>
  nameWithType: SynchronizationRule<TDepLeft, TDepRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>
  nameWithType.vb: SynchronizationRule(Of TDepLeft, TDepRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight)
  name.vb: SynchronizationRule(Of TDepLeft, TDepRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    href: NMF.Synchronizations.SynchronizationRule-2.html
  - name: <
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    href: NMF.Synchronizations.SynchronizationRule-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, TDepLeft>>
  nameWithType: Expression<Func<TLeft, TDepLeft>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>
  nameWithType.vb: Expression(Of Func(Of TLeft, TDepLeft))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft))
  name.vb: Expression(Of Func(Of TLeft, TDepLeft))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, TDepRight>>
  nameWithType: Expression<Func<TRight, TDepRight>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>
  nameWithType.vb: Expression(Of Func(Of TRight, TDepRight))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight))
  name.vb: Expression(Of Func(Of TRight, TDepRight))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, TRight, bool>>
  nameWithType: Expression<Func<TLeft, TRight, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, TRight, bool>>
  nameWithType.vb: Expression(Of Func(Of TLeft, TRight, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, Boolean))
  name.vb: Expression(Of Func(Of TLeft, TRight, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2
  commentId: T:NMF.Synchronizations.SynchronizationRule`2
  href: NMF.Synchronizations.SynchronizationRule-2.html
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    href: NMF.Synchronizations.SynchronizationRule-2.html
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    href: NMF.Synchronizations.SynchronizationRule-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, ITransformationContext, TDepLeft>>
  nameWithType: Expression<Func<TLeft, ITransformationContext, TDepLeft>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft))
  name.vb: Expression(Of Func(Of TLeft, ITransformationContext, TDepLeft))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, ITransformationContext, TDepRight>>
  nameWithType: Expression<Func<TRight, ITransformationContext, TDepRight>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>>
  nameWithType.vb: Expression(Of Func(Of TRight, ITransformationContext, TDepRight))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight))
  name.vb: Expression(Of Func(Of TRight, ITransformationContext, TDepRight))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
- uid: System.Action{{TLeft},{TDepLeft}}
  commentId: T:System.Action{`0,``0}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<TLeft, TDepLeft>
  nameWithType: Action<TLeft, TDepLeft>
  fullName: System.Action<TLeft, TDepLeft>
  nameWithType.vb: Action(Of TLeft, TDepLeft)
  fullName.vb: System.Action(Of TLeft, TDepLeft)
  name.vb: Action(Of TLeft, TDepLeft)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TDepLeft}}
  commentId: T:System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0}
  parent: System
  definition: System.Action`3
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<TLeft, ITransformationContext, TDepLeft>
  nameWithType: Action<TLeft, ITransformationContext, TDepLeft>
  fullName: System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft>
  nameWithType.vb: Action(Of TLeft, ITransformationContext, TDepLeft)
  fullName.vb: System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TDepLeft)
  name.vb: Action(Of TLeft, ITransformationContext, TDepLeft)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
- uid: System.Action{{TRight},{TDepRight}}
  commentId: T:System.Action{`1,``1}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<TRight, TDepRight>
  nameWithType: Action<TRight, TDepRight>
  fullName: System.Action<TRight, TDepRight>
  nameWithType.vb: Action(Of TRight, TDepRight)
  fullName.vb: System.Action(Of TRight, TDepRight)
  name.vb: Action(Of TRight, TDepRight)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
- uid: System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TDepRight}}
  commentId: T:System.Action{`1,NMF.Transformations.Core.ITransformationContext,``1}
  parent: System
  definition: System.Action`3
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<TRight, ITransformationContext, TDepRight>
  nameWithType: Action<TRight, ITransformationContext, TDepRight>
  fullName: System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TDepRight>
  nameWithType.vb: Action(Of TRight, ITransformationContext, TDepRight)
  fullName.vb: System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TDepRight)
  name.vb: Action(Of TRight, ITransformationContext, TDepRight)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeLeftToRightOnly__2_NMF_Synchronizations_SynchronizationRule___0___1__System_Linq_Expressions_Expression_System_Func__0___0___System_Linq_Expressions_Expression_System_Func__1___1___System_Linq_Expressions_Expression_System_Func__0_System_Boolean___
  name: SynchronizeLeftToRightOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, bool>>
  nameWithType: Expression<Func<TLeft, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, bool>>
  nameWithType.vb: Expression(Of Func(Of TLeft, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, Boolean))
  name.vb: Expression(Of Func(Of TLeft, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeRightToLeftOnly__2_NMF_Synchronizations_SynchronizationRule___0___1__System_Linq_Expressions_Expression_System_Func__0___0___System_Linq_Expressions_Expression_System_Func__1___1___System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  name: SynchronizeRightToLeftOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, bool>>
  nameWithType: Expression<Func<TRight, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, bool>>
  nameWithType.vb: Expression(Of Func(Of TRight, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, Boolean))
  name.vb: Expression(Of Func(Of TRight, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeMany__2_NMF_Synchronizations_SynchronizationRule___0___1__System_Linq_Expressions_Expression_System_Func__0_NMF_Expressions_ICollectionExpression___0____System_Linq_Expressions_Expression_System_Func__1_NMF_Expressions_ICollectionExpression___1____
  name: SynchronizeMany
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.ICollectionExpression<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.ICollectionExpression{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, ICollectionExpression<TDepRight>>>
  nameWithType: Expression<Func<TRight, ICollectionExpression<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.ICollectionExpression<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ITransformationContext, ICollectionExpression<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ITransformationContext, ICollectionExpression(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.ICollectionExpression{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>
  nameWithType: Expression<Func<TRight, ITransformationContext, ICollectionExpression<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.ICollectionExpression(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ITransformationContext, ICollectionExpression(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeManyLeftToRightOnly__2_NMF_Synchronizations_SynchronizationRule___0___1__System_Linq_Expressions_Expression_System_Func__0_NMF_Expressions_IEnumerableExpression___0____System_Linq_Expressions_Expression_System_Func__1_System_Collections_Generic_ICollection___1____
  name: SynchronizeManyLeftToRightOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},System.Collections.Generic.ICollection{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, ICollection<TDepRight>>>
  nameWithType: Expression<Func<TRight, ICollection<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, System.Collections.Generic.ICollection<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ICollection(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Collections.Generic.ICollection(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ICollection(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ITransformationContext, IEnumerableExpression<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>
  nameWithType: Expression<Func<TRight, ITransformationContext, ICollection<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ITransformationContext, ICollection(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeManyRightToLeftOnly__2_NMF_Synchronizations_SynchronizationRule___0___1__System_Linq_Expressions_Expression_System_Func__0_System_Collections_Generic_ICollection___0____System_Linq_Expressions_Expression_System_Func__1_NMF_Expressions_IEnumerableExpression___1____
  name: SynchronizeManyRightToLeftOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Collections.Generic.ICollection{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, ICollection<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ICollection<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, System.Collections.Generic.ICollection<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ICollection(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ICollection(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,NMF.Expressions.IEnumerableExpression{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, IEnumerableExpression<TDepRight>>>
  nameWithType: Expression<Func<TRight, IEnumerableExpression<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, NMF.Expressions.IEnumerableExpression<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ITransformationContext, ICollection<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ITransformationContext, ICollection(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TDepLeft
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>
  nameWithType: Expression<Func<TRight, ITransformationContext, IEnumerableExpression<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ITransformationContext, IEnumerableExpression(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TDepRight
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeLate__1_System_Linq_Expressions_Expression_System_Func__0___0___System_Linq_Expressions_Expression_System_Func__1___0___
  name: SynchronizeLate
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLate
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLate
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLate
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLate
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, TValue>>
  nameWithType: Expression<Func<TLeft, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>
  nameWithType.vb: Expression(Of Func(Of TLeft, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue))
  name.vb: Expression(Of Func(Of TLeft, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, TValue>>
  nameWithType: Expression<Func<TRight, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, TValue>>
  nameWithType.vb: Expression(Of Func(Of TRight, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue))
  name.vb: Expression(Of Func(Of TRight, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func{{TLeft},NMF.Expressions.ICollectionExpression{{TValue}}}
  commentId: T:System.Func{`0,NMF.Expressions.ICollectionExpression{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TLeft, ICollectionExpression<TValue>>
  nameWithType: Func<TLeft, ICollectionExpression<TValue>>
  fullName: System.Func<TLeft, NMF.Expressions.ICollectionExpression<TValue>>
  nameWithType.vb: Func(Of TLeft, ICollectionExpression(Of TValue))
  fullName.vb: System.Func(Of TLeft, NMF.Expressions.ICollectionExpression(Of TValue))
  name.vb: Func(Of TLeft, ICollectionExpression(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func{{TRight},NMF.Expressions.ICollectionExpression{{TValue}}}
  commentId: T:System.Func{`1,NMF.Expressions.ICollectionExpression{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TRight, ICollectionExpression<TValue>>
  nameWithType: Func<TRight, ICollectionExpression<TValue>>
  fullName: System.Func<TRight, NMF.Expressions.ICollectionExpression<TValue>>
  nameWithType.vb: Func(Of TRight, ICollectionExpression(Of TValue))
  fullName.vb: System.Func(Of TRight, NMF.Expressions.ICollectionExpression(Of TValue))
  name.vb: Func(Of TRight, ICollectionExpression(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLate
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeManyLate__1_System_Func__0_NMF_Expressions_ICollectionExpression___0___System_Func__1_NMF_Expressions_ICollectionExpression___0___
  name: SynchronizeManyLate
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLate
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLate
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLate
- uid: System.Func{{TLeft},NMF.Expressions.IEnumerableExpression{{TValue}}}
  commentId: T:System.Func{`0,NMF.Expressions.IEnumerableExpression{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TLeft, IEnumerableExpression<TValue>>
  nameWithType: Func<TLeft, IEnumerableExpression<TValue>>
  fullName: System.Func<TLeft, NMF.Expressions.IEnumerableExpression<TValue>>
  nameWithType.vb: Func(Of TLeft, IEnumerableExpression(Of TValue))
  fullName.vb: System.Func(Of TLeft, NMF.Expressions.IEnumerableExpression(Of TValue))
  name.vb: Func(Of TLeft, IEnumerableExpression(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func{{TRight},System.Collections.Generic.ICollection{{TValue}}}
  commentId: T:System.Func{`1,System.Collections.Generic.ICollection{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TRight, ICollection<TValue>>
  nameWithType: Func<TRight, ICollection<TValue>>
  fullName: System.Func<TRight, System.Collections.Generic.ICollection<TValue>>
  nameWithType.vb: Func(Of TRight, ICollection(Of TValue))
  fullName.vb: System.Func(Of TRight, System.Collections.Generic.ICollection(Of TValue))
  name.vb: Func(Of TRight, ICollection(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{{TValue}}}
  commentId: T:System.Func{`0,NMF.Transformations.Core.ITransformationContext,NMF.Expressions.IEnumerableExpression{``0}}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>
  nameWithType: Func<TLeft, ITransformationContext, IEnumerableExpression<TValue>>
  fullName: System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression<TValue>>
  nameWithType.vb: Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue))
  fullName.vb: System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, NMF.Expressions.IEnumerableExpression(Of TValue))
  name.vb: Func(Of TLeft, ITransformationContext, IEnumerableExpression(Of TValue))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{{TValue}}}
  commentId: T:System.Func{`1,NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.ICollection{``0}}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TRight, ITransformationContext, ICollection<TValue>>
  nameWithType: Func<TRight, ITransformationContext, ICollection<TValue>>
  fullName: System.Func<TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection<TValue>>
  nameWithType.vb: Func(Of TRight, ITransformationContext, ICollection(Of TValue))
  fullName.vb: System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.ICollection(Of TValue))
  name.vb: Func(Of TRight, ITransformationContext, ICollection(Of TValue))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnlyLate
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeManyLeftToRightOnlyLate__1_System_Func__0_NMF_Expressions_IEnumerableExpression___0___System_Func__1_System_Collections_Generic_ICollection___0___
  name: SynchronizeManyLeftToRightOnlyLate
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnlyLate
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnlyLate
- uid: System.Func{{TLeft},System.Collections.Generic.ICollection{{TValue}}}
  commentId: T:System.Func{`0,System.Collections.Generic.ICollection{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TLeft, ICollection<TValue>>
  nameWithType: Func<TLeft, ICollection<TValue>>
  fullName: System.Func<TLeft, System.Collections.Generic.ICollection<TValue>>
  nameWithType.vb: Func(Of TLeft, ICollection(Of TValue))
  fullName.vb: System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TValue))
  name.vb: Func(Of TLeft, ICollection(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Func{{TRight},NMF.Expressions.IEnumerableExpression{{TValue}}}
  commentId: T:System.Func{`1,NMF.Expressions.IEnumerableExpression{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TRight, IEnumerableExpression<TValue>>
  nameWithType: Func<TRight, IEnumerableExpression<TValue>>
  fullName: System.Func<TRight, NMF.Expressions.IEnumerableExpression<TValue>>
  nameWithType.vb: Func(Of TRight, IEnumerableExpression(Of TValue))
  fullName.vb: System.Func(Of TRight, NMF.Expressions.IEnumerableExpression(Of TValue))
  name.vb: Func(Of TRight, IEnumerableExpression(Of TValue))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnlyLate
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeManyRightToLeftOnlyLate__1_System_Func__0_System_Collections_Generic_ICollection___0___System_Func__1_NMF_Expressions_IEnumerableExpression___0___
  name: SynchronizeManyRightToLeftOnlyLate
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnlyLate
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnlyLate
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,NMF.Transformations.Core.ITransformationContext,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TLeft, ITransformationContext, TValue>>
  nameWithType: Expression<Func<TLeft, ITransformationContext, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ITransformationContext, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: Expression(Of Func(Of TLeft, ITransformationContext, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,NMF.Transformations.Core.ITransformationContext,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<TRight, ITransformationContext, TValue>>
  nameWithType: Expression<Func<TRight, ITransformationContext, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, NMF.Transformations.Core.ITransformationContext, TValue>>
  nameWithType.vb: Expression(Of Func(Of TRight, ITransformationContext, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue))
  name.vb: Expression(Of Func(Of TRight, ITransformationContext, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Action{{TRight},{TValue}}
  commentId: T:System.Action{`1,`2}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<TRight, TValue>
  nameWithType: Action<TRight, TValue>
  fullName: System.Action<TRight, TValue>
  nameWithType.vb: Action(Of TRight, TValue)
  fullName.vb: System.Action(Of TRight, TValue)
  name.vb: Action(Of TRight, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Action{{TRight},NMF.Transformations.Core.ITransformationContext,{TValue}}
  commentId: T:System.Action{`1,NMF.Transformations.Core.ITransformationContext,``0}
  parent: System
  definition: System.Action`3
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<TRight, ITransformationContext, TValue>
  nameWithType: Action<TRight, ITransformationContext, TValue>
  fullName: System.Action<TRight, NMF.Transformations.Core.ITransformationContext, TValue>
  nameWithType.vb: Action(Of TRight, ITransformationContext, TValue)
  fullName.vb: System.Action(Of TRight, NMF.Transformations.Core.ITransformationContext, TValue)
  name.vb: Action(Of TRight, ITransformationContext, TValue)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeLateLeftToRightOnly__1_System_Linq_Expressions_Expression_System_Func__0___0___System_Linq_Expressions_Expression_System_Func__1___0___
  name: SynchronizeLateLeftToRightOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly
- uid: System.Action{{TLeft},{TValue}}
  commentId: T:System.Action{`0,`2}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<TLeft, TValue>
  nameWithType: Action<TLeft, TValue>
  fullName: System.Action<TLeft, TValue>
  nameWithType.vb: Action(Of TLeft, TValue)
  fullName.vb: System.Action(Of TLeft, TValue)
  name.vb: Action(Of TLeft, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Action{{TLeft},NMF.Transformations.Core.ITransformationContext,{TValue}}
  commentId: T:System.Action{`0,NMF.Transformations.Core.ITransformationContext,``0}
  parent: System
  definition: System.Action`3
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<TLeft, ITransformationContext, TValue>
  nameWithType: Action<TLeft, ITransformationContext, TValue>
  fullName: System.Action<TLeft, NMF.Transformations.Core.ITransformationContext, TValue>
  nameWithType.vb: Action(Of TLeft, ITransformationContext, TValue)
  fullName.vb: System.Action(Of TLeft, NMF.Transformations.Core.ITransformationContext, TValue)
  name.vb: Action(Of TLeft, ITransformationContext, TValue)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeLateRightToLeftOnly__1_System_Linq_Expressions_Expression_System_Func__0___0___System_Linq_Expressions_Expression_System_Func__1___0___
  name: SynchronizeLateRightToLeftOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeOpaque_System_Func__0__1_NMF_Synchronizations_SynchronizationDirection_NMF_Synchronizations_ISynchronizationContext_System_IDisposable__System_Boolean_
  name: SynchronizeOpaque
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque
- uid: System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
  commentId: T:System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
  parent: System
  definition: System.Func`5
  href: https://learn.microsoft.com/dotnet/api/system.func-5
  name: Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>
  nameWithType: Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>
  fullName: System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>
  nameWithType.vb: Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable)
  fullName.vb: System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable)
  name.vb: Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    href: NMF.Synchronizations.SynchronizationDirection.html
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    href: NMF.Synchronizations.ISynchronizationContext.html
  - name: ','
  - name: " "
  - uid: System.IDisposable
    name: IDisposable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable
  - name: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    href: NMF.Synchronizations.SynchronizationDirection.html
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    href: NMF.Synchronizations.ISynchronizationContext.html
  - name: ','
  - name: " "
  - uid: System.IDisposable
    name: IDisposable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable
  - name: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-5
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext}
  commentId: T:System.Action{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext}
  parent: System
  definition: System.Action`4
  href: https://learn.microsoft.com/dotnet/api/system.action-4
  name: Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>
  nameWithType: Action<TLeft, TRight, SynchronizationDirection, ISynchronizationContext>
  fullName: System.Action<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext>
  nameWithType.vb: Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext)
  fullName.vb: System.Action(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Action(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    href: NMF.Synchronizations.SynchronizationDirection.html
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    href: NMF.Synchronizations.ISynchronizationContext.html
  - name: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    href: NMF.Synchronizations.SynchronizationDirection.html
  - name: ','
  - name: " "
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    href: NMF.Synchronizations.ISynchronizationContext.html
  - name: )
- uid: System.Action`4
  commentId: T:System.Action`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-4
  name: Action<T1, T2, T3, T4>
  nameWithType: Action<T1, T2, T3, T4>
  fullName: System.Action<T1, T2, T3, T4>
  nameWithType.vb: Action(Of T1, T2, T3, T4)
  fullName.vb: System.Action(Of T1, T2, T3, T4)
  name.vb: Action(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_CreateRightOutput__0_System_Collections_Generic_IEnumerable__1__NMF_Synchronizations_ISynchronizationContext_System_Boolean__
  name: CreateRightOutput
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateRightOutput
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateRightOutput
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateRightOutput
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateRightOutput
- uid: System.Collections.Generic.IEnumerable{{TRight}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TRight>
  nameWithType: IEnumerable<TRight>
  fullName: System.Collections.Generic.IEnumerable<TRight>
  nameWithType.vb: IEnumerable(Of TRight)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TRight)
  name.vb: IEnumerable(Of TRight)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TRight
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_CreateLeftOutput__1_System_Collections_Generic_IEnumerable__0__NMF_Synchronizations_ISynchronizationContext_System_Boolean__
  name: CreateLeftOutput
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateLeftOutput
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateLeftOutput
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateLeftOutput
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateLeftOutput
- uid: System.Collections.Generic.IEnumerable{{TLeft}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TLeft>
  nameWithType: IEnumerable<TLeft>
  fullName: System.Collections.Generic.IEnumerable<TLeft>
  nameWithType.vb: IEnumerable(Of TLeft)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TLeft)
  name.vb: IEnumerable(Of TLeft)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TLeft
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeCollectionsRightToLeft_System_Collections_Generic_ICollection__0__System_Collections_Generic_ICollection__1__NMF_Synchronizations_ISynchronizationContext_System_Boolean_
  name: SynchronizeCollectionsRightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft
- uid: System.Collections.Generic.ICollection{{TLeft}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TLeft>
  nameWithType: ICollection<TLeft>
  fullName: System.Collections.Generic.ICollection<TLeft>
  nameWithType.vb: ICollection(Of TLeft)
  fullName.vb: System.Collections.Generic.ICollection(Of TLeft)
  name.vb: ICollection(Of TLeft)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TLeft
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: )
- uid: System.Collections.Generic.ICollection{{TRight}}
  commentId: T:System.Collections.Generic.ICollection{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TRight>
  nameWithType: ICollection<TRight>
  fullName: System.Collections.Generic.ICollection<TRight>
  nameWithType.vb: ICollection(Of TRight)
  fullName.vb: System.Collections.Generic.ICollection(Of TRight)
  name.vb: ICollection(Of TRight)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TRight
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_SynchronizeCollectionsLeftToRight_System_Collections_Generic_ICollection__1__System_Collections_Generic_ICollection__0__NMF_Synchronizations_ISynchronizationContext_System_Boolean_
  name: SynchronizeCollectionsLeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight
- uid: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor
  href: NMF.Synchronizations.SynchronizationRule-2.html#NMF_Synchronizations_SynchronizationRule_2_MarkInstantiatingFor_NMF_Synchronizations_SynchronizationRuleBase_System_Linq_Expressions_Expression_System_Func__0_System_Boolean___System_Linq_Expressions_Expression_System_Func__1_System_Boolean___
  name: MarkInstantiatingFor
  nameWithType: SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor
