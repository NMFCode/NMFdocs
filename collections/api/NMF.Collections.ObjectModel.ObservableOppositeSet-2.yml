### YamlMime:ManagedReference
items:
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2
  commentId: T:NMF.Collections.ObjectModel.ObservableOppositeSet`2
  id: ObservableOppositeSet`2
  parent: NMF.Collections.ObjectModel
  children:
  - NMF.Collections.ObjectModel.ObservableOppositeSet`2.#ctor(`0)
  - NMF.Collections.ObjectModel.ObservableOppositeSet`2.Add(`1)
  - NMF.Collections.ObjectModel.ObservableOppositeSet`2.Clear
  - NMF.Collections.ObjectModel.ObservableOppositeSet`2.Parent
  - NMF.Collections.ObjectModel.ObservableOppositeSet`2.Remove(`1)
  - NMF.Collections.ObjectModel.ObservableOppositeSet`2.SetOpposite(`1,`0)
  langs:
  - csharp
  - vb
  name: ObservableOppositeSet<TParent, TCollected>
  nameWithType: ObservableOppositeSet<TParent, TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>
  type: Class
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableOppositeSet
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 189
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: 'public abstract class ObservableOppositeSet<TParent, TCollected> : ObservableSet<TCollected>, IList, ICollection, INotifyCollectionChanged, INotifyCollectionChanging, INotifyPropertyChanged, ISetExpression<TCollected>, ISet<TCollected>, ICollectionExpression<TCollected>, IEnumerableExpression<TCollected>, IEnumerableExpression, ICollection<TCollected>, IEnumerable<TCollected>, IEnumerable'
    typeParameters:
    - id: TParent
    - id: TCollected
    content.vb: >-
      Public MustInherit Class ObservableOppositeSet(Of TParent, TCollected)
          Inherits ObservableSet(Of TCollected)
          Implements IList, ICollection, INotifyCollectionChanged, INotifyCollectionChanging, INotifyPropertyChanged, ISetExpression(Of TCollected), ISet(Of TCollected), ICollectionExpression(Of TCollected), IEnumerableExpression(Of TCollected), IEnumerableExpression, ICollection(Of TCollected), IEnumerable(Of TCollected), IEnumerable
  inheritance:
  - System.Object
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Collections.ObjectModel.INotifyCollectionChanging
  - System.ComponentModel.INotifyPropertyChanged
  - NMF.Expressions.ISetExpression{{TCollected}}
  - System.Collections.Generic.ISet{{TCollected}}
  - NMF.Expressions.ICollectionExpression{{TCollected}}
  - NMF.Expressions.IEnumerableExpression{{TCollected}}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.Generic.ICollection{{TCollected}}
  - System.Collections.Generic.IEnumerable{{TCollected}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.RequireEvents
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.SilentAdd({TCollected})
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.SilentClear
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.SilentRemove({TCollected})
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.CollectionChanged
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.CollectionChanging
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.OnPropertyChanged(System.String)
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.PropertyChanged
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.AsNotifiable
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  - NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.NMF#Expressions#IEnumerableExpression#AsNotifiable
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Items
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.ExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IntersectWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Overlaps(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.SetEquals(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.UnionWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#Generic#ICollection{T}#Add({TCollected})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Contains({TCollected})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.CopyTo({TCollected}[],System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Count
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.GetEnumerator
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IEnumerable#GetEnumerator
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Add(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Contains(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Clear
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#IndexOf(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Insert(System.Int32,System.Object)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Remove(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#RemoveAt(System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#ICollection#IsSynchronized
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#ICollection#SyncRoot
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#IsReadOnly
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#IsFixedSize
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected)
  name.vb: ObservableOppositeSet(Of TParent, TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Parent
  commentId: P:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Parent
  id: Parent
  parent: NMF.Collections.ObjectModel.ObservableOppositeSet`2
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Parent
  type: Property
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Parent
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 191
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public TParent Parent { get; }
    parameters: []
    return:
      type: '{TParent}'
    content.vb: Public ReadOnly Property Parent As TParent
  overload: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Parent*
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Parent
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Parent
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.SetOpposite(`1,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeSet`2.SetOpposite(`1,`0)
  id: SetOpposite(`1,`0)
  parent: NMF.Collections.ObjectModel.ObservableOppositeSet`2
  langs:
  - csharp
  - vb
  name: SetOpposite(TCollected, TParent)
  nameWithType: ObservableOppositeSet<TParent, TCollected>.SetOpposite(TCollected, TParent)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.SetOpposite(TCollected, TParent)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetOpposite
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 193
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected abstract void SetOpposite(TCollected item, TParent newParent)
    parameters:
    - id: item
      type: '{TCollected}'
    - id: newParent
      type: '{TParent}'
    content.vb: Protected MustOverride Sub SetOpposite(item As TCollected, newParent As TParent)
  overload: NMF.Collections.ObjectModel.ObservableOppositeSet`2.SetOpposite*
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).SetOpposite(TCollected, TParent)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).SetOpposite(TCollected, TParent)
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.#ctor(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeSet`2.#ctor(`0)
  id: '#ctor(`0)'
  parent: NMF.Collections.ObjectModel.ObservableOppositeSet`2
  langs:
  - csharp
  - vb
  name: ObservableOppositeSet(TParent)
  nameWithType: ObservableOppositeSet<TParent, TCollected>.ObservableOppositeSet(TParent)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.ObservableOppositeSet(TParent)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 195
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected ObservableOppositeSet(TParent parent)
    parameters:
    - id: parent
      type: '{TParent}'
    content.vb: Protected Sub New(parent As TParent)
  overload: NMF.Collections.ObjectModel.ObservableOppositeSet`2.#ctor*
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).ObservableOppositeSet(TParent)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).ObservableOppositeSet(TParent)
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Clear
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Clear
  id: Clear
  parent: NMF.Collections.ObjectModel.ObservableOppositeSet`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Clear()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Clear()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 202
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear
  overridden: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.Clear
  overload: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Clear*
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Clear()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Clear()
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Add(`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Add(`1)
  id: Add(`1)
  parent: NMF.Collections.ObjectModel.ObservableOppositeSet`2
  langs:
  - csharp
  - vb
  name: Add(TCollected)
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Add(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Add(TCollected)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 239
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override bool Add(TCollected item)
    parameters:
    - id: item
      type: '{TCollected}'
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Add(item As TCollected) As Boolean
  overridden: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.Add({TCollected})
  overload: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Add*
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Add(TCollected)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Add(TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Remove(`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Remove(`1)
  id: Remove(`1)
  parent: NMF.Collections.ObjectModel.ObservableOppositeSet`2
  langs:
  - csharp
  - vb
  name: Remove(TCollected)
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Remove(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Remove(TCollected)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 264
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override bool Remove(TCollected item)
    parameters:
    - id: item
      type: '{TCollected}'
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Remove(item As TCollected) As Boolean
  overridden: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.Remove({TCollected})
  overload: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Remove*
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Remove(TCollected)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Remove(TCollected)
references:
- uid: NMF.Collections.ObjectModel
  commentId: N:NMF.Collections.ObjectModel
  name: NMF.Collections.ObjectModel
  nameWithType: NMF.Collections.ObjectModel
  fullName: NMF.Collections.ObjectModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  commentId: T:NMF.Collections.Generic.DecoratedSet{`1}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<TCollected>
  nameWithType: DecoratedSet<TCollected>
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>
  nameWithType.vb: DecoratedSet(Of TCollected)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected)
  name.vb: DecoratedSet(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  commentId: T:NMF.Collections.ObjectModel.ObservableSet{`1}
  parent: NMF.Collections.ObjectModel
  definition: NMF.Collections.ObjectModel.ObservableSet`1
  name: ObservableSet<TCollected>
  nameWithType: ObservableSet<TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>
  nameWithType.vb: ObservableSet(Of TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected)
  name.vb: ObservableSet(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1
    name: ObservableSet
    nameWithType: ObservableSet
    fullName: NMF.Collections.ObjectModel.ObservableSet
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1
    name: ObservableSet
    nameWithType: ObservableSet
    fullName: NMF.Collections.ObjectModel.ObservableSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Collections.ObjectModel.INotifyCollectionChanging
  commentId: T:NMF.Collections.ObjectModel.INotifyCollectionChanging
  parent: NMF.Collections.ObjectModel
  name: INotifyCollectionChanging
  nameWithType: INotifyCollectionChanging
  fullName: NMF.Collections.ObjectModel.INotifyCollectionChanging
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: NMF.Expressions.ISetExpression{{TCollected}}
  commentId: T:NMF.Expressions.ISetExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ISetExpression`1
  name: ISetExpression<TCollected>
  nameWithType: ISetExpression<TCollected>
  fullName: NMF.Expressions.ISetExpression<TCollected>
  nameWithType.vb: ISetExpression(Of TCollected)
  fullName.vb: NMF.Expressions.ISetExpression(Of TCollected)
  name.vb: ISetExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: NMF.Expressions.ISetExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: NMF.Expressions.ISetExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet{{TCollected}}
  commentId: T:System.Collections.Generic.ISet{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<TCollected>
  nameWithType: ISet<TCollected>
  fullName: System.Collections.Generic.ISet<TCollected>
  nameWithType.vb: ISet(Of TCollected)
  fullName.vb: System.Collections.Generic.ISet(Of TCollected)
  name.vb: ISet(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression{{TCollected}}
  commentId: T:NMF.Expressions.ICollectionExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<TCollected>
  nameWithType: ICollectionExpression<TCollected>
  fullName: NMF.Expressions.ICollectionExpression<TCollected>
  nameWithType.vb: ICollectionExpression(Of TCollected)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of TCollected)
  name.vb: ICollectionExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{{TCollected}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TCollected>
  nameWithType: IEnumerableExpression<TCollected>
  fullName: NMF.Expressions.IEnumerableExpression<TCollected>
  nameWithType.vb: IEnumerableExpression(Of TCollected)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TCollected)
  name.vb: IEnumerableExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.Generic.ICollection{{TCollected}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TCollected>
  nameWithType: ICollection<TCollected>
  fullName: System.Collections.Generic.ICollection<TCollected>
  nameWithType.vb: ICollection(Of TCollected)
  fullName.vb: System.Collections.Generic.ICollection(Of TCollected)
  name.vb: ICollection(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TCollected}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TCollected>
  nameWithType: IEnumerable<TCollected>
  fullName: System.Collections.Generic.IEnumerable<TCollected>
  nameWithType.vb: IEnumerable(Of TCollected)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCollected)
  name.vb: IEnumerable(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.RequireEvents
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableSet<TCollected>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.RequireEvents()
  nameWithType.vb: ObservableSet(Of TCollected).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
    name: RequireEvents
    nameWithType: ObservableSet<TCollected>.RequireEvents
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.RequireEvents
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
    name: RequireEvents
    nameWithType: ObservableSet(Of TCollected).RequireEvents
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).RequireEvents
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.SilentAdd({TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.SilentAdd(`1)
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
  name: SilentAdd(TCollected)
  nameWithType: ObservableSet<TCollected>.SilentAdd(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.SilentAdd(TCollected)
  nameWithType.vb: ObservableSet(Of TCollected).SilentAdd(TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).SilentAdd(TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
    name: SilentAdd
    nameWithType: ObservableSet<TCollected>.SilentAdd
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.SilentAdd
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
    name: SilentAdd
    nameWithType: ObservableSet(Of TCollected).SilentAdd
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).SilentAdd
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.SilentClear
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.SilentClear
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
  name: SilentClear()
  nameWithType: ObservableSet<TCollected>.SilentClear()
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.SilentClear()
  nameWithType.vb: ObservableSet(Of TCollected).SilentClear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).SilentClear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
    name: SilentClear
    nameWithType: ObservableSet<TCollected>.SilentClear
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.SilentClear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
    name: SilentClear
    nameWithType: ObservableSet(Of TCollected).SilentClear
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).SilentClear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.SilentRemove({TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.SilentRemove(`1)
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
  name: SilentRemove(TCollected)
  nameWithType: ObservableSet<TCollected>.SilentRemove(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.SilentRemove(TCollected)
  nameWithType.vb: ObservableSet(Of TCollected).SilentRemove(TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).SilentRemove(TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
    name: SilentRemove
    nameWithType: ObservableSet<TCollected>.SilentRemove
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.SilentRemove
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
    name: SilentRemove
    nameWithType: ObservableSet(Of TCollected).SilentRemove
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).SilentRemove
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableSet{`1}.CollectionChanged
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableSet<TCollected>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.CollectionChanged
  nameWithType.vb: ObservableSet(Of TCollected).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableSet{`1}.CollectionChanging
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableSet<TCollected>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.CollectionChanging
  nameWithType.vb: ObservableSet(Of TCollected).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.OnPropertyChanged(System.String)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.OnPropertyChanged(System.String)
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
  name: OnPropertyChanged(String)
  nameWithType: ObservableSet<TCollected>.OnPropertyChanged(String)
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.OnPropertyChanged(System.String)
  nameWithType.vb: ObservableSet(Of TCollected).OnPropertyChanged(String)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).OnPropertyChanged(System.String)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: ObservableSet<TCollected>.OnPropertyChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: ObservableSet(Of TCollected).OnPropertyChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableSet<TCollected>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableSet(Of TCollected).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableSet<TCollected>.OnCollectionChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableSet(Of TCollected).OnCollectionChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableSet<TCollected>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableSet(Of TCollected).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
    nameWithType: ObservableSet<TCollected>.OnCollectionChanging
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.OnCollectionChanging
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
    nameWithType: ObservableSet(Of TCollected).OnCollectionChanging
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).OnCollectionChanging
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableSet{`1}.PropertyChanged
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableSet<TCollected>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.PropertyChanged
  nameWithType.vb: ObservableSet(Of TCollected).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.AsNotifiable
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableSet<TCollected>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.AsNotifiable()
  nameWithType.vb: ObservableSet(Of TCollected).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ObservableSet<TCollected>.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ObservableSet(Of TCollected).AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  name: IEnumerableExpression<TCollected>.AsNotifiable()
  nameWithType: ObservableSet<TCollected>.IEnumerableExpression<TCollected>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.NMF.Expressions.IEnumerableExpression<TCollected>.AsNotifiable()
  nameWithType.vb: ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
    name: IEnumerableExpression<TCollected>.AsNotifiable
    nameWithType: ObservableSet<TCollected>.IEnumerableExpression<TCollected>.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.NMF.Expressions.IEnumerableExpression<TCollected>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
    name: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
    nameWithType: ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.NMF#Expressions#IEnumerableExpression#AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.NMF#Expressions#IEnumerableExpression#AsNotifiable
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
  name: IEnumerableExpression.AsNotifiable()
  nameWithType: ObservableSet<TCollected>.IEnumerableExpression.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  nameWithType.vb: ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
    name: IEnumerableExpression.AsNotifiable
    nameWithType: ObservableSet<TCollected>.IEnumerableExpression.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
    name: NMF.Expressions.IEnumerableExpression.AsNotifiable
    nameWithType: ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.Items
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<TCollected>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Items
  nameWithType.vb: DecoratedSet(Of TCollected).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Items
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.ExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.ExceptWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: ExceptWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.ExceptWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.ExceptWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).ExceptWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).ExceptWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: ExceptWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet<TCollected>.ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet(Of TCollected).ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IntersectWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IntersectWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  name: IntersectWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IntersectWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IntersectWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IntersectWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IntersectWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IntersectWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet<TCollected>.IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet(Of TCollected).IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSubsetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsProperSubsetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsProperSubsetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsProperSubsetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet<TCollected>.IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet(Of TCollected).IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSupersetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsProperSupersetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsProperSupersetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsProperSupersetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet<TCollected>.IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet(Of TCollected).IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsSubsetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSubsetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsSubsetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsSubsetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsSubsetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsSubsetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsSubsetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet<TCollected>.IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet(Of TCollected).IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsSupersetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSupersetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsSupersetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsSupersetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsSupersetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsSupersetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsSupersetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet<TCollected>.IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet(Of TCollected).IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Overlaps(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.Overlaps(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  name: Overlaps(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.Overlaps(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Overlaps(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).Overlaps(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Overlaps(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: Overlaps(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet<TCollected>.Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet(Of TCollected).Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.SetEquals(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.SetEquals(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  name: SetEquals(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.SetEquals(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.SetEquals(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).SetEquals(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).SetEquals(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: SetEquals(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet<TCollected>.SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet(Of TCollected).SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: SymmetricExceptWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.SymmetricExceptWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).SymmetricExceptWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: SymmetricExceptWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet<TCollected>.SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet(Of TCollected).SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.UnionWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.UnionWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  name: UnionWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.UnionWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.UnionWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).UnionWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).UnionWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: UnionWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet<TCollected>.UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet(Of TCollected).UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#Generic#ICollection{T}#Add({TCollected})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#Generic#ICollection{T}#Add(`1)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<TCollected>.Add(TCollected)
  nameWithType: DecoratedSet<TCollected>.ICollection<TCollected>.Add(TCollected)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.Generic.ICollection<TCollected>.Add(TCollected)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.Generic.ICollection<T>.Add(TCollected)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.Generic.ICollection<T>.Add(TCollected)
  name.vb: System.Collections.Generic.ICollection<T>.Add(TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<TCollected>.Add
    nameWithType: DecoratedSet<TCollected>.ICollection<TCollected>.Add
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.Generic.ICollection<TCollected>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: DecoratedSet(Of TCollected).System.Collections.Generic.ICollection<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Contains({TCollected})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.Contains(`1)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(TCollected)
  nameWithType: DecoratedSet<TCollected>.Contains(TCollected)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Contains(TCollected)
  nameWithType.vb: DecoratedSet(Of TCollected).Contains(TCollected)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Contains(TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet<TCollected>.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet(Of TCollected).Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.CopyTo({TCollected}[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.CopyTo(`1[],System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TCollected[], Int32)
  nameWithType: DecoratedSet<TCollected>.CopyTo(TCollected[], Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.CopyTo(TCollected[], System.Int32)
  nameWithType.vb: DecoratedSet(Of TCollected).CopyTo(TCollected(), Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).CopyTo(TCollected(), System.Int32)
  name.vb: CopyTo(TCollected(), Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet<TCollected>.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet(Of TCollected).CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.Count
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<TCollected>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Count
  nameWithType.vb: DecoratedSet(Of TCollected).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Count
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<TCollected>.IsReadOnly
  nameWithType: DecoratedSet<TCollected>.ICollection<TCollected>.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.Generic.ICollection<TCollected>.IsReadOnly
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.GetEnumerator
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: DecoratedSet<TCollected>.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of TCollected).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet<TCollected>.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet(Of TCollected).GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IEnumerable#GetEnumerator
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: DecoratedSet<TCollected>.IEnumerable.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: DecoratedSet<TCollected>.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: DecoratedSet<TCollected>.ICollection.CopyTo(Array, Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: DecoratedSet<TCollected>.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: DecoratedSet(Of TCollected).System.Collections.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Add(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#Add(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: DecoratedSet<TCollected>.IList.Add(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.Add(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: DecoratedSet<TCollected>.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Contains(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#Contains(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: DecoratedSet<TCollected>.IList.Contains(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.Contains(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: DecoratedSet<TCollected>.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Clear
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#Clear
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
  name: IList.Clear()
  nameWithType: DecoratedSet<TCollected>.IList.Clear()
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Clear()
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.Clear()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: IList.Clear
    nameWithType: DecoratedSet<TCollected>.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: System.Collections.IList.Clear
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#IndexOf(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: DecoratedSet<TCollected>.IList.IndexOf(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.IndexOf(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: DecoratedSet<TCollected>.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: DecoratedSet<TCollected>.IList.Insert(Int32, Object)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: DecoratedSet<TCollected>.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Remove(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#Remove(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: DecoratedSet<TCollected>.IList.Remove(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.Remove(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: DecoratedSet<TCollected>.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#RemoveAt(System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  name: IList.RemoveAt(Int32)
  nameWithType: DecoratedSet<TCollected>.IList.RemoveAt(Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: IList.RemoveAt
    nameWithType: DecoratedSet<TCollected>.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: System.Collections.IList.RemoveAt
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#ICollection#IsSynchronized
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#ICollection#IsSynchronized
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: DecoratedSet<TCollected>.ICollection.IsSynchronized
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.ICollection.IsSynchronized
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#ICollection#SyncRoot
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#ICollection#SyncRoot
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: DecoratedSet<TCollected>.ICollection.SyncRoot
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.ICollection.SyncRoot
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#IsReadOnly
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: DecoratedSet<TCollected>.IList.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.IsReadOnly
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#IsFixedSize
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#IsFixedSize
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: DecoratedSet<TCollected>.IList.IsFixedSize
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.IsFixedSize
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.IsFixedSize
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.System#Collections#IList#Item(System.Int32)
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.System#Collections#IList#Item(System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: DecoratedSet<TCollected>.IList.Item[Int32]
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: DecoratedSet(Of TCollected).System.Collections.IList.Item(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: DecoratedSet<TCollected>.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.System.Collections.IList.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: DecoratedSet(Of TCollected).System.Collections.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet(Of TCollected).System.Collections.IList.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Collections.Generic.DecoratedSet`1
  commentId: T:NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<T>
  nameWithType: DecoratedSet<T>
  fullName: NMF.Collections.Generic.DecoratedSet<T>
  nameWithType.vb: DecoratedSet(Of T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T)
  name.vb: DecoratedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
- uid: NMF.Collections.ObjectModel.ObservableSet`1
  commentId: T:NMF.Collections.ObjectModel.ObservableSet`1
  name: ObservableSet<T>
  nameWithType: ObservableSet<T>
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>
  nameWithType.vb: ObservableSet(Of T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T)
  name.vb: ObservableSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1
    name: ObservableSet
    nameWithType: ObservableSet
    fullName: NMF.Collections.ObjectModel.ObservableSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1
    name: ObservableSet
    nameWithType: ObservableSet
    fullName: NMF.Collections.ObjectModel.ObservableSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: NMF.Expressions.ISetExpression`1
  commentId: T:NMF.Expressions.ISetExpression`1
  name: ISetExpression<T>
  nameWithType: ISetExpression<T>
  fullName: NMF.Expressions.ISetExpression<T>
  nameWithType.vb: ISetExpression(Of T)
  fullName.vb: NMF.Expressions.ISetExpression(Of T)
  name.vb: ISetExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: NMF.Expressions.ISetExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: NMF.Expressions.ISetExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableSet<T>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.RequireEvents()
  nameWithType.vb: ObservableSet(Of T).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
    name: RequireEvents
    nameWithType: ObservableSet<T>.RequireEvents
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.RequireEvents
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
    name: RequireEvents
    nameWithType: ObservableSet(Of T).RequireEvents
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).RequireEvents
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
  name: SilentAdd(T)
  nameWithType: ObservableSet<T>.SilentAdd(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentAdd(T)
  nameWithType.vb: ObservableSet(Of T).SilentAdd(T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentAdd(T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
    name: SilentAdd
    nameWithType: ObservableSet<T>.SilentAdd
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentAdd
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
    name: SilentAdd
    nameWithType: ObservableSet(Of T).SilentAdd
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentAdd
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
  name: SilentClear()
  nameWithType: ObservableSet<T>.SilentClear()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentClear()
  nameWithType.vb: ObservableSet(Of T).SilentClear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentClear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
    name: SilentClear
    nameWithType: ObservableSet<T>.SilentClear
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentClear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
    name: SilentClear
    nameWithType: ObservableSet(Of T).SilentClear
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentClear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
  name: SilentRemove(T)
  nameWithType: ObservableSet<T>.SilentRemove(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentRemove(T)
  nameWithType.vb: ObservableSet(Of T).SilentRemove(T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentRemove(T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
    name: SilentRemove
    nameWithType: ObservableSet<T>.SilentRemove
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentRemove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
    name: SilentRemove
    nameWithType: ObservableSet(Of T).SilentRemove
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentRemove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableSet<T>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.CollectionChanged
  nameWithType.vb: ObservableSet(Of T).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableSet<T>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.CollectionChanging
  nameWithType.vb: ObservableSet(Of T).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
  isExternal: true
  name: OnPropertyChanged(String)
  nameWithType: ObservableSet<T>.OnPropertyChanged(String)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnPropertyChanged(System.String)
  nameWithType.vb: ObservableSet(Of T).OnPropertyChanged(String)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnPropertyChanged(System.String)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: ObservableSet<T>.OnPropertyChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
    nameWithType: ObservableSet(Of T).OnPropertyChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).OnPropertyChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableSet<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableSet(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableSet<T>.OnCollectionChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableSet(Of T).OnCollectionChanged
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableSet<T>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableSet(Of T).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
    nameWithType: ObservableSet<T>.OnCollectionChanging
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanging
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
    nameWithType: ObservableSet(Of T).OnCollectionChanging
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanging
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableSet`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableSet<T>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.PropertyChanged
  nameWithType.vb: ObservableSet(Of T).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableSet<T>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.AsNotifiable()
  nameWithType.vb: ObservableSet(Of T).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ObservableSet<T>.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ObservableSet(Of T).AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  name: IEnumerableExpression<T>.AsNotifiable()
  nameWithType: ObservableSet<T>.IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: ObservableSet(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
    name: IEnumerableExpression<T>.AsNotifiable
    nameWithType: ObservableSet<T>.IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
    name: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
    nameWithType: ObservableSet(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
  name: IEnumerableExpression.AsNotifiable()
  nameWithType: ObservableSet<T>.IEnumerableExpression.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  nameWithType.vb: ObservableSet(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
    name: IEnumerableExpression.AsNotifiable
    nameWithType: ObservableSet<T>.IEnumerableExpression.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
    name: NMF.Expressions.IEnumerableExpression.AsNotifiable
    nameWithType: ObservableSet(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<T>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Items
  nameWithType.vb: DecoratedSet(Of T).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Items
- uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: ExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet<T>.ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet(Of T).ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IntersectWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet<T>.IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet(Of T).IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet<T>.IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet(Of T).IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet<T>.IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet(Of T).IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet<T>.IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet(Of T).IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet<T>.IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet(Of T).IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Overlaps(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.Overlaps(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet<T>.Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet(Of T).Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SetEquals(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SetEquals(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet<T>.SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet(Of T).SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet<T>.SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet(Of T).SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: UnionWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.UnionWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet<T>.UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet(Of T).UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<T>.Add(T)
  nameWithType: DecoratedSet<T>.ICollection<T>.Add(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<T>.Add
    nameWithType: DecoratedSet<T>.ICollection<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(T)
  nameWithType: DecoratedSet<T>.Contains(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains(T)
  nameWithType.vb: DecoratedSet(Of T).Contains(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet<T>.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet(Of T).Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: DecoratedSet<T>.CopyTo(T[], Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: DecoratedSet(Of T).CopyTo(T(), Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet<T>.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet(Of T).CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<T>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Count
  nameWithType.vb: DecoratedSet(Of T).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Count
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: DecoratedSet<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: DecoratedSet<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet<T>.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<T>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet(Of T).GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: DecoratedSet<T>.IEnumerable.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: DecoratedSet<T>.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: DecoratedSet<T>.ICollection.CopyTo(Array, Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: DecoratedSet<T>.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: DecoratedSet(Of T).System.Collections.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: DecoratedSet<T>.IList.Add(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Add(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: DecoratedSet<T>.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: DecoratedSet<T>.IList.Contains(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: DecoratedSet<T>.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
  name: IList.Clear()
  nameWithType: DecoratedSet<T>.IList.Clear()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Clear()
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Clear()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: IList.Clear
    nameWithType: DecoratedSet<T>.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: System.Collections.IList.Clear
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: DecoratedSet<T>.IList.IndexOf(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: DecoratedSet<T>.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: DecoratedSet(Of T).System.Collections.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: DecoratedSet<T>.IList.Insert(Int32, Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: DecoratedSet<T>.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: DecoratedSet<T>.IList.Remove(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: DecoratedSet<T>.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  isExternal: true
  name: IList.RemoveAt(Int32)
  nameWithType: DecoratedSet<T>.IList.RemoveAt(Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: IList.RemoveAt
    nameWithType: DecoratedSet<T>.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: System.Collections.IList.RemoveAt
    nameWithType: DecoratedSet(Of T).System.Collections.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#IsSynchronized
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: DecoratedSet<T>.ICollection.IsSynchronized
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#SyncRoot
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: DecoratedSet<T>.ICollection.SyncRoot
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: DecoratedSet<T>.IList.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsFixedSize
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: DecoratedSet<T>.IList.IsFixedSize
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: DecoratedSet<T>.IList.Item[Int32]
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: DecoratedSet<T>.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Parent*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Parent
  name: Parent
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Parent
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Parent
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Parent
- uid: '{TParent}'
  commentId: '!:TParent'
  definition: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.SetOpposite*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeSet`2.SetOpposite
  name: SetOpposite
  nameWithType: ObservableOppositeSet<TParent, TCollected>.SetOpposite
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.SetOpposite
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).SetOpposite
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).SetOpposite
- uid: '{TCollected}'
  commentId: '!:TCollected'
  definition: TCollected
  name: TCollected
  nameWithType: TCollected
  fullName: TCollected
- uid: TCollected
  name: TCollected
  nameWithType: TCollected
  fullName: TCollected
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.#ctor*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeSet`2.#ctor
  name: ObservableOppositeSet
  nameWithType: ObservableOppositeSet<TParent, TCollected>.ObservableOppositeSet
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.ObservableOppositeSet
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).ObservableOppositeSet
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).ObservableOppositeSet
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.Clear
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.Clear
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.Clear
  name: Clear()
  nameWithType: ObservableSet<TCollected>.Clear()
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.Clear()
  nameWithType.vb: ObservableSet(Of TCollected).Clear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).Clear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Clear
    name: Clear
    nameWithType: ObservableSet<TCollected>.Clear
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Clear
    name: Clear
    nameWithType: ObservableSet(Of TCollected).Clear
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Clear*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Clear
  name: Clear
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Clear
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Clear
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Clear
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Clear
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Clear
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.Clear
  name: Clear()
  nameWithType: ObservableSet<T>.Clear()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Clear()
  nameWithType.vb: ObservableSet(Of T).Clear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Clear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Clear
    name: Clear
    nameWithType: ObservableSet<T>.Clear
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Clear
    name: Clear
    nameWithType: ObservableSet(Of T).Clear
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.Add({TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.Add(`1)
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
  name: Add(TCollected)
  nameWithType: ObservableSet<TCollected>.Add(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.Add(TCollected)
  nameWithType.vb: ObservableSet(Of TCollected).Add(TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).Add(TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
    name: Add
    nameWithType: ObservableSet<TCollected>.Add
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
    name: Add
    nameWithType: ObservableSet(Of TCollected).Add
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Add*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Add
  name: Add
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Add
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Add
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Add
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Add
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
  name: Add(T)
  nameWithType: ObservableSet<T>.Add(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Add(T)
  nameWithType.vb: ObservableSet(Of T).Add(T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Add(T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
    name: Add
    nameWithType: ObservableSet<T>.Add
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
    name: Add
    nameWithType: ObservableSet(Of T).Add
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}.Remove({TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableSet{`1}.Remove(`1)
  parent: NMF.Collections.ObjectModel.ObservableSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
  name: Remove(TCollected)
  nameWithType: ObservableSet<TCollected>.Remove(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.Remove(TCollected)
  nameWithType.vb: ObservableSet(Of TCollected).Remove(TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).Remove(TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
    name: Remove
    nameWithType: ObservableSet<TCollected>.Remove
    fullName: NMF.Collections.ObjectModel.ObservableSet<TCollected>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
    name: Remove
    nameWithType: ObservableSet(Of TCollected).Remove
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of TCollected).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TCollected
    nameWithType: TCollected
    fullName: TCollected
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2.Remove*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeSet`2.Remove
  name: Remove
  nameWithType: ObservableOppositeSet<TParent, TCollected>.Remove
  fullName: NMF.Collections.ObjectModel.ObservableOppositeSet<TParent, TCollected>.Remove
  nameWithType.vb: ObservableOppositeSet(Of TParent, TCollected).Remove
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeSet(Of TParent, TCollected).Remove
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
  name: Remove(T)
  nameWithType: ObservableSet<T>.Remove(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Remove(T)
  nameWithType.vb: ObservableSet(Of T).Remove(T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Remove(T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
    name: Remove
    nameWithType: ObservableSet<T>.Remove
    fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
    name: Remove
    nameWithType: ObservableSet(Of T).Remove
    fullName: NMF.Collections.ObjectModel.ObservableSet(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
