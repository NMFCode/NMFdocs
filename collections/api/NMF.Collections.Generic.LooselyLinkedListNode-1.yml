### YamlMime:ManagedReference
items:
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode`1
  id: LooselyLinkedListNode`1
  parent: NMF.Collections.Generic
  children:
  - NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor(`0)
  - NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  - NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  - NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  - NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  - NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  langs:
  - csharp
  - vb
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  type: Class
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LooselyLinkedListNode
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 213
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public class LooselyLinkedListNode<T>
    typeParameters:
    - id: T
    content.vb: Public Class LooselyLinkedListNode(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: LooselyLinkedListNode(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor(`0)
  commentId: M:NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: LooselyLinkedListNode(T)
  nameWithType: LooselyLinkedListNode<T>.LooselyLinkedListNode(T)
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.LooselyLinkedListNode(T)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 215
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public LooselyLinkedListNode(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub New(value As T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor*
  nameWithType.vb: LooselyLinkedListNode(Of T).LooselyLinkedListNode(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).LooselyLinkedListNode(T)
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  commentId: P:NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  id: Value
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: LooselyLinkedListNode<T>.Value
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Value
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 220
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.Value*
  nameWithType.vb: LooselyLinkedListNode(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Value
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  commentId: P:NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  id: Next
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: Next
  nameWithType: LooselyLinkedListNode<T>.Next
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Next
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Next
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 222
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public LooselyLinkedListNode<T> Next { get; set; }
    parameters: []
    return:
      type: NMF.Collections.Generic.LooselyLinkedListNode`1
    content.vb: Public Property Next As LooselyLinkedListNode(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.Next*
  nameWithType.vb: LooselyLinkedListNode(Of T).Next
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Next
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  commentId: P:NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  id: FromHere
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: FromHere
  nameWithType: LooselyLinkedListNode<T>.FromHere
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.FromHere
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FromHere
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 224
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public IEnumerable<T> FromHere { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public ReadOnly Property FromHere As IEnumerable(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere*
  nameWithType.vb: LooselyLinkedListNode(Of T).FromHere
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).FromHere
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  commentId: M:NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  id: CutNext
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: CutNext()
  nameWithType: LooselyLinkedListNode<T>.CutNext()
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CutNext()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CutNext
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 237
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void CutNext()
    content.vb: Public Sub CutNext
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext*
  nameWithType.vb: LooselyLinkedListNode(Of T).CutNext()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CutNext()
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  commentId: M:NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  id: CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: CreateDummyFor(LooselyLinkedListNode<T>)
  nameWithType: LooselyLinkedListNode<T>.CreateDummyFor(LooselyLinkedListNode<T>)
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateDummyFor
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 244
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public static LooselyLinkedListNode<T> CreateDummyFor(LooselyLinkedListNode<T> node)
    parameters:
    - id: node
      type: NMF.Collections.Generic.LooselyLinkedListNode`1
    return:
      type: NMF.Collections.Generic.LooselyLinkedListNode`1
    content.vb: Public Shared Function CreateDummyFor(node As LooselyLinkedListNode(Of T)) As LooselyLinkedListNode(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor*
  nameWithType.vb: LooselyLinkedListNode(Of T).CreateDummyFor(LooselyLinkedListNode(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: CreateDummyFor(LooselyLinkedListNode(Of T))
references:
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor
  name: LooselyLinkedListNode
  nameWithType: LooselyLinkedListNode<T>.LooselyLinkedListNode
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.LooselyLinkedListNode
  nameWithType.vb: LooselyLinkedListNode(Of T).LooselyLinkedListNode
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).LooselyLinkedListNode
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Value*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  name: Value
  nameWithType: LooselyLinkedListNode<T>.Value
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Value
  nameWithType.vb: LooselyLinkedListNode(Of T).Value
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Value
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Next*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  name: Next
  nameWithType: LooselyLinkedListNode<T>.Next
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Next
  nameWithType.vb: LooselyLinkedListNode(Of T).Next
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Next
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode`1
  parent: NMF.Collections.Generic
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  nameWithType.vb: LooselyLinkedListNode(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    nameWithType: LooselyLinkedListNode
    fullName: NMF.Collections.Generic.LooselyLinkedListNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    nameWithType: LooselyLinkedListNode
    fullName: NMF.Collections.Generic.LooselyLinkedListNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  name: FromHere
  nameWithType: LooselyLinkedListNode<T>.FromHere
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.FromHere
  nameWithType.vb: LooselyLinkedListNode(Of T).FromHere
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).FromHere
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  name: CutNext
  nameWithType: LooselyLinkedListNode<T>.CutNext
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CutNext
  nameWithType.vb: LooselyLinkedListNode(Of T).CutNext
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CutNext
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor
  name: CreateDummyFor
  nameWithType: LooselyLinkedListNode<T>.CreateDummyFor
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CreateDummyFor
  nameWithType.vb: LooselyLinkedListNode(Of T).CreateDummyFor
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CreateDummyFor
