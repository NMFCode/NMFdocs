### YamlMime:ManagedReference
items:
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode`1
  id: LooselyLinkedListNode`1
  parent: NMF.Collections.Generic
  children:
  - NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor(`0)
  - NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  - NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  - NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  - NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  - NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  langs:
  - csharp
  - vb
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  type: Class
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: LooselyLinkedListNode
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 213
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public class LooselyLinkedListNode<T>
    typeParameters:
    - id: T
    content.vb: Public Class LooselyLinkedListNode(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: LooselyLinkedListNode(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor(`0)
  commentId: M:NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: LooselyLinkedListNode(T)
  nameWithType: LooselyLinkedListNode<T>.LooselyLinkedListNode(T)
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.LooselyLinkedListNode(T)
  type: Constructor
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: .ctor
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 215
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public LooselyLinkedListNode(T value)
    parameters:
    - id: value
      type: '{T}'
    content.vb: Public Sub New(value As T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor*
  nameWithType.vb: LooselyLinkedListNode(Of T).New(T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).New(T)
  name.vb: New(T)
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  commentId: P:NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  id: Value
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: LooselyLinkedListNode<T>.Value
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Value
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Value
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 220
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.Value*
  nameWithType.vb: LooselyLinkedListNode(Of T).Value
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Value
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  commentId: P:NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  id: Next
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: Next
  nameWithType: LooselyLinkedListNode<T>.Next
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Next
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Next
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 222
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public LooselyLinkedListNode<T> Next { get; set; }
    parameters: []
    return:
      type: NMF.Collections.Generic.LooselyLinkedListNode`1
    content.vb: Public Property [Next] As LooselyLinkedListNode(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.Next*
  nameWithType.vb: LooselyLinkedListNode(Of T).Next
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Next
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  commentId: P:NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  id: FromHere
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: FromHere
  nameWithType: LooselyLinkedListNode<T>.FromHere
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.FromHere
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: FromHere
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 224
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public IEnumerable<T> FromHere { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public ReadOnly Property FromHere As IEnumerable(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere*
  nameWithType.vb: LooselyLinkedListNode(Of T).FromHere
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).FromHere
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  commentId: M:NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  id: CutNext
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: CutNext()
  nameWithType: LooselyLinkedListNode<T>.CutNext()
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CutNext()
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CutNext
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 237
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void CutNext()
    content.vb: Public Sub CutNext()
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext*
  nameWithType.vb: LooselyLinkedListNode(Of T).CutNext()
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CutNext()
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  commentId: M:NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  id: CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  parent: NMF.Collections.Generic.LooselyLinkedListNode`1
  langs:
  - csharp
  - vb
  name: CreateDummyFor(LooselyLinkedListNode<T>)
  nameWithType: LooselyLinkedListNode<T>.CreateDummyFor(LooselyLinkedListNode<T>)
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CreateDummyFor
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 244
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public static LooselyLinkedListNode<T> CreateDummyFor(LooselyLinkedListNode<T> node)
    parameters:
    - id: node
      type: NMF.Collections.Generic.LooselyLinkedListNode`1
    return:
      type: NMF.Collections.Generic.LooselyLinkedListNode`1
    content.vb: Public Shared Function CreateDummyFor(node As LooselyLinkedListNode(Of T)) As LooselyLinkedListNode(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor*
  nameWithType.vb: LooselyLinkedListNode(Of T).CreateDummyFor(LooselyLinkedListNode(Of T))
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CreateDummyFor(NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: CreateDummyFor(LooselyLinkedListNode(Of T))
references:
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  href: NMF.html
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Collections
    name: Collections
    href: NMF.Collections.html
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
    href: NMF.Collections.Generic.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Collections
    name: Collections
    href: NMF.Collections.html
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
    href: NMF.Collections.Generic.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.#ctor
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html#NMF_Collections_Generic_LooselyLinkedListNode_1__ctor__0_
  name: LooselyLinkedListNode
  nameWithType: LooselyLinkedListNode<T>.LooselyLinkedListNode
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.LooselyLinkedListNode
  nameWithType.vb: LooselyLinkedListNode(Of T).New
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).New
  name.vb: New
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Value*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.Value
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html#NMF_Collections_Generic_LooselyLinkedListNode_1_Value
  name: Value
  nameWithType: LooselyLinkedListNode<T>.Value
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Value
  nameWithType.vb: LooselyLinkedListNode(Of T).Value
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Value
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.Next*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.Next
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html#NMF_Collections_Generic_LooselyLinkedListNode_1_Next
  name: Next
  nameWithType: LooselyLinkedListNode<T>.Next
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.Next
  nameWithType.vb: LooselyLinkedListNode(Of T).Next
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).Next
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode`1
  parent: NMF.Collections.Generic
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  nameWithType.vb: LooselyLinkedListNode(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.FromHere
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html#NMF_Collections_Generic_LooselyLinkedListNode_1_FromHere
  name: FromHere
  nameWithType: LooselyLinkedListNode<T>.FromHere
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.FromHere
  nameWithType.vb: LooselyLinkedListNode(Of T).FromHere
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).FromHere
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.CutNext
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html#NMF_Collections_Generic_LooselyLinkedListNode_1_CutNext
  name: CutNext
  nameWithType: LooselyLinkedListNode<T>.CutNext
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CutNext
  nameWithType.vb: LooselyLinkedListNode(Of T).CutNext
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CutNext
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedListNode`1.CreateDummyFor
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html#NMF_Collections_Generic_LooselyLinkedListNode_1_CreateDummyFor_NMF_Collections_Generic_LooselyLinkedListNode__0__
  name: CreateDummyFor
  nameWithType: LooselyLinkedListNode<T>.CreateDummyFor
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>.CreateDummyFor
  nameWithType.vb: LooselyLinkedListNode(Of T).CreateDummyFor
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T).CreateDummyFor
