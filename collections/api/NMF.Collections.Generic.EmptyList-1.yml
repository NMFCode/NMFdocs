### YamlMime:ManagedReference
items:
- uid: NMF.Collections.Generic.EmptyList`1
  commentId: T:NMF.Collections.Generic.EmptyList`1
  id: EmptyList`1
  parent: NMF.Collections.Generic
  children:
  - NMF.Collections.Generic.EmptyList`1.AsNotifiable
  - NMF.Collections.Generic.EmptyList`1.Instance
  - NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
  - NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Clear
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Count
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - NMF.Collections.Generic.EmptyList`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: EmptyList<T>
  nameWithType: EmptyList<T>
  fullName: NMF.Collections.Generic.EmptyList<T>
  type: Class
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EmptyList
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 11
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: 'public sealed class EmptyList<T> : IListExpression<T>, IList<T>, ICollectionExpression<T>, IEnumerableExpression<T>, IEnumerableExpression, ICollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
    content.vb: >-
      Public NotInheritable Class EmptyList(Of T)
          Implements IListExpression(Of T), IList(Of T), ICollectionExpression(Of T), IEnumerableExpression(Of T), IEnumerableExpression, ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.IListExpression{{T}}
  - System.Collections.Generic.IList{{T}}
  - NMF.Expressions.ICollectionExpression{{T}}
  - NMF.Expressions.IEnumerableExpression{{T}}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: EmptyList(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T)
  name.vb: EmptyList(Of T)
- uid: NMF.Collections.Generic.EmptyList`1.Instance
  commentId: P:NMF.Collections.Generic.EmptyList`1.Instance
  id: Instance
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: EmptyList<T>.Instance
  fullName: NMF.Collections.Generic.EmptyList<T>.Instance
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Instance
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 15
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public static EmptyList<T> Instance { get; }
    parameters: []
    return:
      type: NMF.Collections.Generic.EmptyList`1
    content.vb: Public Shared ReadOnly Property Instance As EmptyList(Of T)
  overload: NMF.Collections.Generic.EmptyList`1.Instance*
  nameWithType.vb: EmptyList(Of T).Instance
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).Instance
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  id: System#Collections#Generic#IList{T}#IndexOf(`0)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IList<T>.IndexOf(T)
  nameWithType: EmptyList<T>.IList<T>.IndexOf(T)
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.IList<T>.IndexOf
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 23
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: int IList<T>.IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Function System.Collections.Generic.IList<T>.IndexOf(item As T) As Integer Implements IList(Of T).IndexOf
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.IndexOf(T)
  name.vb: System.Collections.Generic.IList<T>.IndexOf(T)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IList<T>.Insert(Int32, T)
  nameWithType: EmptyList<T>.IList<T>.Insert(Int32, T)
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.IList<T>.Insert
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 28
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: void IList<T>.Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, item As T) Implements IList(Of T).Insert
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Insert*
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.Insert(Int32, T)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IList<T>.RemoveAt(Int32)
  nameWithType: EmptyList<T>.IList<T>.RemoveAt(Int32)
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.IList<T>.RemoveAt
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 33
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: void IList<T>.RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#RemoveAt*
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.RemoveAt(Int32)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IList<T>.Item[Int32]
  nameWithType: EmptyList<T>.IList<T>.Item[Int32]
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.IList<T>.this[]
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 38
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: T IList<T>.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this[]
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Item*
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  nameWithType: EmptyList<T>.ICollection<T>.Add(T)
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 50
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Clear()
  nameWithType: EmptyList<T>.ICollection<T>.Clear()
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Clear
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 55
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  id: System#Collections#Generic#ICollection{T}#Contains(`0)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Contains(T)
  nameWithType: EmptyList<T>.ICollection<T>.Contains(T)
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Contains
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 60
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: bool ICollection<T>.Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<T>.Contains(item As T) As Boolean Implements ICollection(Of T).Contains
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Contains(T)
  name.vb: System.Collections.Generic.ICollection<T>.Contains(T)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.CopyTo(T[], Int32)
  nameWithType: EmptyList<T>.ICollection<T>.CopyTo(T[], Int32)
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.CopyTo
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 65
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Count
  commentId: P:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Count
  id: System#Collections#Generic#ICollection{T}#Count
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Count
  nameWithType: EmptyList<T>.ICollection<T>.Count
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Count
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Count
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 69
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: int ICollection<T>.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.Count As Integer Implements ICollection(Of T).Count
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Count
  name.vb: System.Collections.Generic.ICollection<T>.Count
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  nameWithType: EmptyList<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 74
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Remove(T)
  nameWithType: EmptyList<T>.ICollection<T>.Remove(T)
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Remove
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 79
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: bool ICollection<T>.Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: EmptyList<T>.IEnumerable<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 84
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Collections.Generic.EmptyList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: EmptyList<T>.IEnumerable.GetEnumerator()
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 89
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NMF.Collections.Generic.EmptyList`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: EmptyList(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NMF.Collections.Generic.EmptyList`1.AsNotifiable
  commentId: M:NMF.Collections.Generic.EmptyList`1.AsNotifiable
  id: AsNotifiable
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: EmptyList<T>.AsNotifiable()
  fullName: NMF.Collections.Generic.EmptyList<T>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 94
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public INotifyCollection<T> AsNotifiable()
    return:
      type: NMF.Expressions.INotifyCollection{{T}}
    content.vb: Public Function AsNotifiable As INotifyCollection(Of T)
  overload: NMF.Collections.Generic.EmptyList`1.AsNotifiable*
  implements:
  - NMF.Expressions.ICollectionExpression{{T}}.AsNotifiable
  nameWithType.vb: EmptyList(Of T).AsNotifiable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).AsNotifiable()
- uid: NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  commentId: M:NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  id: NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IEnumerableExpression<T>.AsNotifiable()
  nameWithType: EmptyList<T>.IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Collections.Generic.EmptyList<T>.NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 99
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: INotifyEnumerable<T> IEnumerableExpression<T>.AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable{{T}}
    content.vb: Function NMF.Expressions.IEnumerableExpression<T>.AsNotifiable As INotifyEnumerable(Of T) Implements IEnumerableExpression(Of T).AsNotifiable
  overload: NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression{{T}}.AsNotifiable
  nameWithType.vb: EmptyList(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
- uid: NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
  commentId: M:NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
  id: NMF#Expressions#IEnumerableExpression#AsNotifiable
  isEii: true
  parent: NMF.Collections.Generic.EmptyList`1
  langs:
  - csharp
  - vb
  name: IEnumerableExpression.AsNotifiable()
  nameWithType: EmptyList<T>.IEnumerableExpression.AsNotifiable()
  fullName: NMF.Collections.Generic.EmptyList<T>.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/EmptyList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IEnumerableExpression.AsNotifiable
    path: src/Collections/Collections/Generic/EmptyList.cs
    startLine: 104
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: INotifyEnumerable IEnumerableExpression.AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable
    content.vb: Function NMF.Expressions.IEnumerableExpression.AsNotifiable As INotifyEnumerable Implements IEnumerableExpression.AsNotifiable
  overload: NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: EmptyList(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable()
references:
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.IListExpression{{T}}
  commentId: T:NMF.Expressions.IListExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IListExpression`1
  name: IListExpression<T>
  nameWithType: IListExpression<T>
  fullName: NMF.Expressions.IListExpression<T>
  nameWithType.vb: IListExpression(Of T)
  fullName.vb: NMF.Expressions.IListExpression(Of T)
  name.vb: IListExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
    nameWithType: IListExpression
    fullName: NMF.Expressions.IListExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
    nameWithType: IListExpression
    fullName: NMF.Expressions.IListExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression{{T}}
  commentId: T:NMF.Expressions.ICollectionExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{{T}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.IListExpression`1
  commentId: T:NMF.Expressions.IListExpression`1
  name: IListExpression<T>
  nameWithType: IListExpression<T>
  fullName: NMF.Expressions.IListExpression<T>
  nameWithType.vb: IListExpression(Of T)
  fullName.vb: NMF.Expressions.IListExpression(Of T)
  name.vb: IListExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
    nameWithType: IListExpression
    fullName: NMF.Expressions.IListExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
    nameWithType: IListExpression
    fullName: NMF.Expressions.IListExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Collections.Generic.EmptyList`1.Instance*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.Instance
  name: Instance
  nameWithType: EmptyList<T>.Instance
  fullName: NMF.Collections.Generic.EmptyList<T>.Instance
  nameWithType.vb: EmptyList(Of T).Instance
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).Instance
- uid: NMF.Collections.Generic.EmptyList`1
  commentId: T:NMF.Collections.Generic.EmptyList`1
  parent: NMF.Collections.Generic
  name: EmptyList<T>
  nameWithType: EmptyList<T>
  fullName: NMF.Collections.Generic.EmptyList<T>
  nameWithType.vb: EmptyList(Of T)
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T)
  name.vb: EmptyList(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.EmptyList`1
    name: EmptyList
    nameWithType: EmptyList
    fullName: NMF.Collections.Generic.EmptyList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.EmptyList`1
    name: EmptyList
    nameWithType: EmptyList
    fullName: NMF.Collections.Generic.EmptyList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#IndexOf*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#IndexOf
  name: IList<T>.IndexOf
  nameWithType: EmptyList<T>.IList<T>.IndexOf
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.IndexOf
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.IndexOf
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.IndexOf
  name.vb: System.Collections.Generic.IList<T>.IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Insert*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Insert
  name: IList<T>.Insert
  nameWithType: EmptyList<T>.IList<T>.Insert
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.Insert
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.Insert
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.Insert
  name.vb: System.Collections.Generic.IList<T>.Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#RemoveAt*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#RemoveAt
  name: IList<T>.RemoveAt
  nameWithType: EmptyList<T>.IList<T>.RemoveAt
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.RemoveAt
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.RemoveAt
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.RemoveAt
  name.vb: System.Collections.Generic.IList<T>.RemoveAt
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Item*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IList{T}#Item
  name: IList<T>.Item
  nameWithType: EmptyList<T>.IList<T>.Item
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IList<T>.Item
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IList<T>.Item
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IList<T>.Item
  name.vb: System.Collections.Generic.IList<T>.Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Add*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Add
  name: ICollection<T>.Add
  nameWithType: EmptyList<T>.ICollection<T>.Add
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Add
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Add
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Add
  name.vb: System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Clear*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Clear
  name: ICollection<T>.Clear
  nameWithType: EmptyList<T>.ICollection<T>.Clear
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Clear
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Clear
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Clear
  name.vb: System.Collections.Generic.ICollection<T>.Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Contains*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Contains
  name: ICollection<T>.Contains
  nameWithType: EmptyList<T>.ICollection<T>.Contains
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Contains
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Contains
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Contains
  name.vb: System.Collections.Generic.ICollection<T>.Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#CopyTo*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#CopyTo
  name: ICollection<T>.CopyTo
  nameWithType: EmptyList<T>.ICollection<T>.CopyTo
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.CopyTo
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.CopyTo
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.CopyTo
  name.vb: System.Collections.Generic.ICollection<T>.CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Count*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Count
  name: ICollection<T>.Count
  nameWithType: EmptyList<T>.ICollection<T>.Count
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Count
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Count
  name.vb: System.Collections.Generic.ICollection<T>.Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: EmptyList<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Remove*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#ICollection{T}#Remove
  name: ICollection<T>.Remove
  nameWithType: EmptyList<T>.ICollection<T>.Remove
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.ICollection<T>.Remove
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.ICollection<T>.Remove
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.ICollection<T>.Remove
  name.vb: System.Collections.Generic.ICollection<T>.Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<T>.GetEnumerator
  nameWithType: EmptyList<T>.IEnumerable<T>.GetEnumerator
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType.vb: EmptyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: EmptyList<T>.IEnumerable.GetEnumerator
  fullName: NMF.Collections.Generic.EmptyList<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: EmptyList(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NMF.Collections.Generic.EmptyList`1.AsNotifiable*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.AsNotifiable
  name: AsNotifiable
  nameWithType: EmptyList<T>.AsNotifiable
  fullName: NMF.Collections.Generic.EmptyList<T>.AsNotifiable
  nameWithType.vb: EmptyList(Of T).AsNotifiable
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).AsNotifiable
- uid: NMF.Expressions.ICollectionExpression{{T}}.AsNotifiable
  commentId: M:NMF.Expressions.ICollectionExpression{`0}.AsNotifiable
  parent: NMF.Expressions.ICollectionExpression{{T}}
  definition: NMF.Expressions.ICollectionExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ICollectionExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable()
  nameWithType.vb: ICollectionExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression<T>.AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyCollection{{T}}
  commentId: T:NMF.Expressions.INotifyCollection{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.ICollectionExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ICollectionExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable()
  nameWithType.vb: ICollectionExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression<T>.AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: ICollectionExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyCollection`1
  commentId: T:NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: NMF.Expressions.INotifyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression{T}#AsNotifiable
  name: IEnumerableExpression<T>.AsNotifiable
  nameWithType: EmptyList<T>.IEnumerableExpression<T>.AsNotifiable
  fullName: NMF.Collections.Generic.EmptyList<T>.NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  nameWithType.vb: EmptyList(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  name.vb: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression{{T}}.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression{`0}.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression{{T}}
  definition: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  commentId: Overload:NMF.Collections.Generic.EmptyList`1.NMF#Expressions#IEnumerableExpression#AsNotifiable
  name: IEnumerableExpression.AsNotifiable
  nameWithType: EmptyList<T>.IEnumerableExpression.AsNotifiable
  fullName: NMF.Collections.Generic.EmptyList<T>.NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: EmptyList(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable
  fullName.vb: NMF.Collections.Generic.EmptyList(Of T).NMF.Expressions.IEnumerableExpression.AsNotifiable
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression
  name: AsNotifiable()
  nameWithType: IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
