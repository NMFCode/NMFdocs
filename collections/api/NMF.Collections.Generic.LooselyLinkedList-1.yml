### YamlMime:ManagedReference
items:
- uid: NMF.Collections.Generic.LooselyLinkedList`1
  commentId: T:NMF.Collections.Generic.LooselyLinkedList`1
  id: LooselyLinkedList`1
  parent: NMF.Collections.Generic
  children:
  - NMF.Collections.Generic.LooselyLinkedList`1.#ctor
  - NMF.Collections.Generic.LooselyLinkedList`1.Add(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  - NMF.Collections.Generic.LooselyLinkedList`1.Add(`0)
  - NMF.Collections.Generic.LooselyLinkedList`1.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},NMF.Collections.Generic.LooselyLinkedListNode{`0})
  - NMF.Collections.Generic.LooselyLinkedList`1.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},`0)
  - NMF.Collections.Generic.LooselyLinkedList`1.AddFirst(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  - NMF.Collections.Generic.LooselyLinkedList`1.Clear
  - NMF.Collections.Generic.LooselyLinkedList`1.Contains(`0)
  - NMF.Collections.Generic.LooselyLinkedList`1.CopyTo(`0[],System.Int32)
  - NMF.Collections.Generic.LooselyLinkedList`1.Count
  - NMF.Collections.Generic.LooselyLinkedList`1.CutAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  - NMF.Collections.Generic.LooselyLinkedList`1.First
  - NMF.Collections.Generic.LooselyLinkedList`1.GetEnumerator
  - NMF.Collections.Generic.LooselyLinkedList`1.IsReadOnly
  - NMF.Collections.Generic.LooselyLinkedList`1.Last
  - NMF.Collections.Generic.LooselyLinkedList`1.Nodes
  - NMF.Collections.Generic.LooselyLinkedList`1.Remove(`0)
  langs:
  - csharp
  - vb
  name: LooselyLinkedList<T>
  nameWithType: LooselyLinkedList<T>
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>
  type: Class
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: LooselyLinkedList
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 8
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: 'public class LooselyLinkedList<T> : ICollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
    content.vb: Public Class LooselyLinkedList(Of T) Implements ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: LooselyLinkedList(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T)
  name.vb: LooselyLinkedList(Of T)
- uid: NMF.Collections.Generic.LooselyLinkedList`1.#ctor
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.#ctor
  id: '#ctor'
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: LooselyLinkedList()
  nameWithType: LooselyLinkedList<T>.LooselyLinkedList()
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.LooselyLinkedList()
  type: Constructor
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: .ctor
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 13
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public LooselyLinkedList()
    content.vb: Public Sub New()
  overload: NMF.Collections.Generic.LooselyLinkedList`1.#ctor*
  nameWithType.vb: LooselyLinkedList(Of T).New()
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).New()
  name.vb: New()
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Last
  commentId: P:NMF.Collections.Generic.LooselyLinkedList`1.Last
  id: Last
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Last
  nameWithType: LooselyLinkedList<T>.Last
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Last
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Last
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 19
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public LooselyLinkedListNode<T> Last { get; }
    parameters: []
    return:
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    content.vb: Public ReadOnly Property Last As LooselyLinkedListNode(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Last*
  nameWithType.vb: LooselyLinkedList(Of T).Last
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Last
- uid: NMF.Collections.Generic.LooselyLinkedList`1.First
  commentId: P:NMF.Collections.Generic.LooselyLinkedList`1.First
  id: First
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: First
  nameWithType: LooselyLinkedList<T>.First
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.First
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: First
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 27
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public LooselyLinkedListNode<T> First { get; }
    parameters: []
    return:
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    content.vb: Public ReadOnly Property First As LooselyLinkedListNode(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedList`1.First*
  nameWithType.vb: LooselyLinkedList(Of T).First
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).First
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Count
  commentId: P:NMF.Collections.Generic.LooselyLinkedList`1.Count
  id: Count
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: LooselyLinkedList<T>.Count
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Count
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Count
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 35
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: LooselyLinkedList(Of T).Count
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Count
- uid: NMF.Collections.Generic.LooselyLinkedList`1.IsReadOnly
  commentId: P:NMF.Collections.Generic.LooselyLinkedList`1.IsReadOnly
  id: IsReadOnly
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: LooselyLinkedList<T>.IsReadOnly
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: IsReadOnly
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 50
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: NMF.Collections.Generic.LooselyLinkedList`1.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: LooselyLinkedList(Of T).IsReadOnly
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).IsReadOnly
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Nodes
  commentId: P:NMF.Collections.Generic.LooselyLinkedList`1.Nodes
  id: Nodes
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Nodes
  nameWithType: LooselyLinkedList<T>.Nodes
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Nodes
  type: Property
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Nodes
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 58
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public IEnumerable<LooselyLinkedListNode<T>> Nodes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Collections.Generic.LooselyLinkedListNode{{T}}}
    content.vb: Public ReadOnly Property Nodes As IEnumerable(Of LooselyLinkedListNode(Of T))
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Nodes*
  nameWithType.vb: LooselyLinkedList(Of T).Nodes
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Nodes
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Add(`0)
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Add(`0)
  id: Add(`0)
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: LooselyLinkedList<T>.Add(T)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Add
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 71
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Add(item As T)
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: LooselyLinkedList(Of T).Add(T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Add(T)
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Add(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Add(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  id: Add(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Add(LooselyLinkedListNode<T>)
  nameWithType: LooselyLinkedList<T>.Add(LooselyLinkedListNode<T>)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Add(NMF.Collections.Generic.LooselyLinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Add
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 78
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void Add(LooselyLinkedListNode<T> newNode)
    parameters:
    - id: newNode
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    content.vb: Public Sub Add(newNode As LooselyLinkedListNode(Of T))
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Add*
  nameWithType.vb: LooselyLinkedList(Of T).Add(LooselyLinkedListNode(Of T))
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Add(NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: Add(LooselyLinkedListNode(Of T))
- uid: NMF.Collections.Generic.LooselyLinkedList`1.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},NMF.Collections.Generic.LooselyLinkedListNode{`0})
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},NMF.Collections.Generic.LooselyLinkedListNode{`0})
  id: AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},NMF.Collections.Generic.LooselyLinkedListNode{`0})
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: AddAfter(LooselyLinkedListNode<T>, LooselyLinkedListNode<T>)
  nameWithType: LooselyLinkedList<T>.AddAfter(LooselyLinkedListNode<T>, LooselyLinkedListNode<T>)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode<T>, NMF.Collections.Generic.LooselyLinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: AddAfter
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 83
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void AddAfter(LooselyLinkedListNode<T> node, LooselyLinkedListNode<T> newNode)
    parameters:
    - id: node
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    - id: newNode
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    content.vb: Public Sub AddAfter(node As LooselyLinkedListNode(Of T), newNode As LooselyLinkedListNode(Of T))
  overload: NMF.Collections.Generic.LooselyLinkedList`1.AddAfter*
  nameWithType.vb: LooselyLinkedList(Of T).AddAfter(LooselyLinkedListNode(Of T), LooselyLinkedListNode(Of T))
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).AddAfter(NMF.Collections.Generic.LooselyLinkedListNode(Of T), NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: AddAfter(LooselyLinkedListNode(Of T), LooselyLinkedListNode(Of T))
- uid: NMF.Collections.Generic.LooselyLinkedList`1.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},`0)
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},`0)
  id: AddAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0},`0)
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: AddAfter(LooselyLinkedListNode<T>, T)
  nameWithType: LooselyLinkedList<T>.AddAfter(LooselyLinkedListNode<T>, T)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.AddAfter(NMF.Collections.Generic.LooselyLinkedListNode<T>, T)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: AddAfter
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 98
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void AddAfter(LooselyLinkedListNode<T> node, T value)
    parameters:
    - id: node
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    - id: value
      type: '{T}'
    content.vb: Public Sub AddAfter(node As LooselyLinkedListNode(Of T), value As T)
  overload: NMF.Collections.Generic.LooselyLinkedList`1.AddAfter*
  nameWithType.vb: LooselyLinkedList(Of T).AddAfter(LooselyLinkedListNode(Of T), T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).AddAfter(NMF.Collections.Generic.LooselyLinkedListNode(Of T), T)
  name.vb: AddAfter(LooselyLinkedListNode(Of T), T)
- uid: NMF.Collections.Generic.LooselyLinkedList`1.AddFirst(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.AddFirst(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  id: AddFirst(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: AddFirst(LooselyLinkedListNode<T>)
  nameWithType: LooselyLinkedList<T>.AddFirst(LooselyLinkedListNode<T>)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.AddFirst(NMF.Collections.Generic.LooselyLinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: AddFirst
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 103
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void AddFirst(LooselyLinkedListNode<T> newNode)
    parameters:
    - id: newNode
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    content.vb: Public Sub AddFirst(newNode As LooselyLinkedListNode(Of T))
  overload: NMF.Collections.Generic.LooselyLinkedList`1.AddFirst*
  nameWithType.vb: LooselyLinkedList(Of T).AddFirst(LooselyLinkedListNode(Of T))
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).AddFirst(NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: AddFirst(LooselyLinkedListNode(Of T))
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Clear
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Clear
  id: Clear
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: LooselyLinkedList<T>.Clear()
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Clear()
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Clear
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 108
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: LooselyLinkedList(Of T).Clear()
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Clear()
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Contains(`0)
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Contains(`0)
  id: Contains(`0)
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: LooselyLinkedList<T>.Contains(T)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Contains
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 114
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: LooselyLinkedList(Of T).Contains(T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Contains(T)
- uid: NMF.Collections.Generic.LooselyLinkedList`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], int)
  nameWithType: LooselyLinkedList<T>.CopyTo(T[], int)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.CopyTo(T[], int)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CopyTo
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 128
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: NMF.Collections.Generic.LooselyLinkedList`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: LooselyLinkedList(Of T).CopyTo(T(), Integer)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
- uid: NMF.Collections.Generic.LooselyLinkedList`1.GetEnumerator
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.GetEnumerator
  id: GetEnumerator
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: LooselyLinkedList<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetEnumerator
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 139
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public Function GetEnumerator() As IEnumerator(Of T)
  overload: NMF.Collections.Generic.LooselyLinkedList`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: LooselyLinkedList(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).GetEnumerator()
- uid: NMF.Collections.Generic.LooselyLinkedList`1.CutAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.CutAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  id: CutAfter(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: CutAfter(LooselyLinkedListNode<T>)
  nameWithType: LooselyLinkedList<T>.CutAfter(LooselyLinkedListNode<T>)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.CutAfter(NMF.Collections.Generic.LooselyLinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CutAfter
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 144
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void CutAfter(LooselyLinkedListNode<T> node)
    parameters:
    - id: node
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    content.vb: Public Sub CutAfter(node As LooselyLinkedListNode(Of T))
  overload: NMF.Collections.Generic.LooselyLinkedList`1.CutAfter*
  nameWithType.vb: LooselyLinkedList(Of T).CutAfter(LooselyLinkedListNode(Of T))
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).CutAfter(NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: CutAfter(LooselyLinkedListNode(Of T))
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Remove(`0)
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Remove(`0)
  id: Remove(`0)
  parent: NMF.Collections.Generic.LooselyLinkedList`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: LooselyLinkedList<T>.Remove(T)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Remove
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 151
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As T) As Boolean
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: LooselyLinkedList(Of T).Remove(T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Remove(T)
references:
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  href: NMF.html
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Collections
    name: Collections
    href: NMF.Collections.html
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
    href: NMF.Collections.Generic.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Collections
    name: Collections
    href: NMF.Collections.html
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
    href: NMF.Collections.Generic.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: NMF.Collections.Generic.LooselyLinkedList`1.#ctor*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.#ctor
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1__ctor
  name: LooselyLinkedList
  nameWithType: LooselyLinkedList<T>.LooselyLinkedList
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.LooselyLinkedList
  nameWithType.vb: LooselyLinkedList(Of T).New
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).New
  name.vb: New
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Last*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Last
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_Last
  name: Last
  nameWithType: LooselyLinkedList<T>.Last
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Last
  nameWithType.vb: LooselyLinkedList(Of T).Last
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Last
- uid: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.LooselyLinkedListNode`1
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  nameWithType.vb: LooselyLinkedListNode(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode`1
  parent: NMF.Collections.Generic
  href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  nameWithType.vb: LooselyLinkedListNode(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.First*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.First
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_First
  name: First
  nameWithType: LooselyLinkedList<T>.First
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.First
  nameWithType.vb: LooselyLinkedList(Of T).First
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).First
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Count*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Count
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_Count
  name: Count
  nameWithType: LooselyLinkedList<T>.Count
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Count
  nameWithType.vb: LooselyLinkedList(Of T).Count
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Collections.Generic.LooselyLinkedList`1.IsReadOnly*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.IsReadOnly
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_IsReadOnly
  name: IsReadOnly
  nameWithType: LooselyLinkedList<T>.IsReadOnly
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.IsReadOnly
  nameWithType.vb: LooselyLinkedList(Of T).IsReadOnly
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Nodes*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Nodes
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_Nodes
  name: Nodes
  nameWithType: LooselyLinkedList<T>.Nodes
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Nodes
  nameWithType.vb: LooselyLinkedList(Of T).Nodes
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Nodes
- uid: System.Collections.Generic.IEnumerable{NMF.Collections.Generic.LooselyLinkedListNode{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Collections.Generic.LooselyLinkedListNode{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<LooselyLinkedListNode<T>>
  nameWithType: IEnumerable<LooselyLinkedListNode<T>>
  fullName: System.Collections.Generic.IEnumerable<NMF.Collections.Generic.LooselyLinkedListNode<T>>
  nameWithType.vb: IEnumerable(Of LooselyLinkedListNode(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: IEnumerable(Of LooselyLinkedListNode(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    href: NMF.Collections.Generic.LooselyLinkedListNode-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Add*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Add
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_Add__0_
  name: Add
  nameWithType: LooselyLinkedList<T>.Add
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Add
  nameWithType.vb: LooselyLinkedList(Of T).Add
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.LooselyLinkedList`1.AddAfter*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.AddAfter
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_AddAfter_NMF_Collections_Generic_LooselyLinkedListNode__0__NMF_Collections_Generic_LooselyLinkedListNode__0__
  name: AddAfter
  nameWithType: LooselyLinkedList<T>.AddAfter
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.AddAfter
  nameWithType.vb: LooselyLinkedList(Of T).AddAfter
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).AddAfter
- uid: NMF.Collections.Generic.LooselyLinkedList`1.AddFirst*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.AddFirst
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_AddFirst_NMF_Collections_Generic_LooselyLinkedListNode__0__
  name: AddFirst
  nameWithType: LooselyLinkedList<T>.AddFirst
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.AddFirst
  nameWithType.vb: LooselyLinkedList(Of T).AddFirst
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).AddFirst
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Clear*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Clear
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_Clear
  name: Clear
  nameWithType: LooselyLinkedList<T>.Clear
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Clear
  nameWithType.vb: LooselyLinkedList(Of T).Clear
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Contains*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Contains
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_Contains__0_
  name: Contains
  nameWithType: LooselyLinkedList<T>.Contains
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Contains
  nameWithType.vb: LooselyLinkedList(Of T).Contains
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.CopyTo*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.CopyTo
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_CopyTo__0___System_Int32_
  name: CopyTo
  nameWithType: LooselyLinkedList<T>.CopyTo
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.CopyTo
  nameWithType.vb: LooselyLinkedList(Of T).CopyTo
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.GetEnumerator*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.GetEnumerator
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_GetEnumerator
  name: GetEnumerator
  nameWithType: LooselyLinkedList<T>.GetEnumerator
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.GetEnumerator
  nameWithType.vb: LooselyLinkedList(Of T).GetEnumerator
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.CutAfter*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.CutAfter
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_CutAfter_NMF_Collections_Generic_LooselyLinkedListNode__0__
  name: CutAfter
  nameWithType: LooselyLinkedList<T>.CutAfter
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.CutAfter
  nameWithType.vb: LooselyLinkedList(Of T).CutAfter
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).CutAfter
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Remove*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Remove
  href: NMF.Collections.Generic.LooselyLinkedList-1.html#NMF_Collections_Generic_LooselyLinkedList_1_Remove__0_
  name: Remove
  nameWithType: LooselyLinkedList<T>.Remove
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Remove
  nameWithType.vb: LooselyLinkedList(Of T).Remove
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
