### YamlMime:ManagedReference
items:
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  commentId: T:NMF.Collections.Generic.ReadOnlyOrderedSet`1
  id: ReadOnlyOrderedSet`1
  parent: NMF.Collections.Generic
  children:
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.#ctor(NMF.Collections.Generic.OrderedSet{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add(`0)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add(System.Object)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Clear
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains(`0)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains(System.Object)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo(`0[],System.Int32)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo(System.Array,System.Int32)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Count
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.GetEnumerator
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf(`0)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf(System.Object)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert(System.Int32,`0)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert(System.Int32,System.Object)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsFixedSize
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsReadOnly
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSynchronized
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Item(System.Int32)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove(`0)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove(System.Object)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.RemoveAt(System.Int32)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.SyncRoot
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IEnumerable#GetEnumerator
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IList#Item(System.Int32)
  - NMF.Collections.Generic.ReadOnlyOrderedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  - vb
  name: ReadOnlyOrderedSet<T>
  nameWithType: ReadOnlyOrderedSet<T>
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>
  type: Class
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReadOnlyOrderedSet
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 9
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: 'public class ReadOnlyOrderedSet<T> : IList, ICollection, IOrderedSet<T>, IList<T>, ISet<T>, ICollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class ReadOnlyOrderedSet(Of T)
          Implements IList, ICollection, IOrderedSet(Of T), IList(Of T), ISet(Of T), ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Collections.ObjectModel.ObservableReadOnlyOrderedSet`1
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - NMF.Collections.Generic.IOrderedSet{{T}}
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ISet{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ReadOnlyOrderedSet(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T)
  name.vb: ReadOnlyOrderedSet(Of T)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.#ctor(NMF.Collections.Generic.OrderedSet{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.#ctor(NMF.Collections.Generic.OrderedSet{`0})
  id: '#ctor(NMF.Collections.Generic.OrderedSet{`0})'
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: ReadOnlyOrderedSet(OrderedSet<T>)
  nameWithType: ReadOnlyOrderedSet<T>.ReadOnlyOrderedSet(OrderedSet<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.ReadOnlyOrderedSet(NMF.Collections.Generic.OrderedSet<T>)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 12
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public ReadOnlyOrderedSet(OrderedSet<T> parent)
    parameters:
    - id: parent
      type: NMF.Collections.Generic.OrderedSet{{T}}
    content.vb: Public Sub New(parent As OrderedSet(Of T))
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.#ctor*
  nameWithType.vb: ReadOnlyOrderedSet(Of T).ReadOnlyOrderedSet(OrderedSet(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).ReadOnlyOrderedSet(NMF.Collections.Generic.OrderedSet(Of T))
  name.vb: ReadOnlyOrderedSet(OrderedSet(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add(`0)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add(`0)
  id: Add(`0)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ReadOnlyOrderedSet<T>.Add(T)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Add(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 21
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool Add(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Add(item As T) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add*
  implements:
  - System.Collections.Generic.ISet{{T}}.Add({T})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Add(T)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExceptWith
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 26
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void ExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub ExceptWith(other As IEnumerable(Of T))
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.ExceptWith*
  implements:
  - System.Collections.Generic.ISet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).ExceptWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IntersectWith
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 31
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void IntersectWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub IntersectWith(other As IEnumerable(Of T))
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IntersectWith*
  implements:
  - System.Collections.Generic.ISet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IntersectWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSubsetOf
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 36
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool IsProperSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSubsetOf*
  implements:
  - System.Collections.Generic.ISet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSupersetOf
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 41
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool IsProperSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSupersetOf*
  implements:
  - System.Collections.Generic.ISet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSubsetOf
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 46
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool IsSubsetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSubsetOf*
  implements:
  - System.Collections.Generic.ISet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsSubsetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSupersetOf
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 51
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool IsSupersetOf(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSupersetOf*
  implements:
  - System.Collections.Generic.ISet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsSupersetOf(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Overlaps(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.Overlaps(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Overlaps
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 56
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool Overlaps(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function Overlaps(other As IEnumerable(Of T)) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Overlaps*
  implements:
  - System.Collections.Generic.ISet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Overlaps(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: SetEquals(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.SetEquals(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetEquals
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 61
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool SetEquals(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
    content.vb: Public Function SetEquals(other As IEnumerable(Of T)) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SetEquals*
  implements:
  - System.Collections.Generic.ISet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).SetEquals(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SymmetricExceptWith
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 66
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void SymmetricExceptWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub SymmetricExceptWith(other As IEnumerable(Of T))
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SymmetricExceptWith*
  implements:
  - System.Collections.Generic.ISet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: UnionWith(IEnumerable<T>)
  nameWithType: ReadOnlyOrderedSet<T>.UnionWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UnionWith
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 71
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void UnionWith(IEnumerable<T> other)
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Sub UnionWith(other As IEnumerable(Of T))
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.UnionWith*
  implements:
  - System.Collections.Generic.ISet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).UnionWith(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  nameWithType: ReadOnlyOrderedSet<T>.ICollection<T>.Add(T)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 76
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#Generic#ICollection{T}#Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Clear
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Clear
  id: Clear
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ReadOnlyOrderedSet<T>.Clear()
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Clear()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 81
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Clear*
  implements:
  - System.Collections.IList.Clear
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Clear()
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains(`0)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains(`0)
  id: Contains(`0)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: ReadOnlyOrderedSet<T>.Contains(T)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Contains(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 86
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Contains(T)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: ReadOnlyOrderedSet<T>.CopyTo(T[], Int32)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 91
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Count
  commentId: P:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Count
  id: Count
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ReadOnlyOrderedSet<T>.Count
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Count
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 96
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Count*
  implements:
  - System.Collections.ICollection.Count
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Count
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsReadOnly
  commentId: P:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsReadOnly
  id: IsReadOnly
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ReadOnlyOrderedSet<T>.IsReadOnly
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReadOnly
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 101
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsReadOnly*
  implements:
  - System.Collections.IList.IsReadOnly
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsReadOnly
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove(`0)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove(`0)
  id: Remove(`0)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ReadOnlyOrderedSet<T>.Remove(T)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Remove(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 106
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As T) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Remove(T)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.GetEnumerator
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.GetEnumerator
  id: GetEnumerator
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ReadOnlyOrderedSet<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 111
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: ReadOnlyOrderedSet(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).GetEnumerator()
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ReadOnlyOrderedSet<T>.IEnumerable.GetEnumerator()
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 116
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ReadOnlyOrderedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf(`0)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: ReadOnlyOrderedSet<T>.IndexOf(T)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IndexOf
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 121
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IndexOf(T)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert(System.Int32,`0)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: ReadOnlyOrderedSet<T>.Insert(Int32, T)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Insert
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 126
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{T}'
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert*
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Insert(System.Int32, T)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ReadOnlyOrderedSet<T>.RemoveAt(Int32)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemoveAt
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 131
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.RemoveAt*
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).RemoveAt(System.Int32)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Item(System.Int32)
  commentId: P:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ReadOnlyOrderedSet<T>.Item[Int32]
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 136
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: Public Property Item(index As Integer) As T
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Item*
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add(System.Object)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add(System.Object)
  id: Add(System.Object)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: ReadOnlyOrderedSet<T>.Add(Object)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Add(System.Object)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 148
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public int Add(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
    content.vb: Public Function Add(value As Object) As Integer
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add*
  implements:
  - System.Collections.IList.Add(System.Object)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Add(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Add(System.Object)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains(System.Object)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains(System.Object)
  id: Contains(System.Object)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Contains(Object)
  nameWithType: ReadOnlyOrderedSet<T>.Contains(Object)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Contains(System.Object)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 153
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool Contains(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Function Contains(value As Object) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains*
  implements:
  - System.Collections.IList.Contains(System.Object)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Contains(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Contains(System.Object)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf(System.Object)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IndexOf(Object)
  nameWithType: ReadOnlyOrderedSet<T>.IndexOf(Object)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IndexOf
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 158
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public int IndexOf(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(value As Object) As Integer
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf*
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IndexOf(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IndexOf(System.Object)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert(System.Int32,System.Object)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object)
  nameWithType: ReadOnlyOrderedSet<T>.Insert(Int32, Object)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Insert
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 163
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void Insert(int index, object value)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
    content.vb: Public Sub Insert(index As Integer, value As Object)
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert*
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Insert(Int32, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Insert(System.Int32, System.Object)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsFixedSize
  commentId: P:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsFixedSize
  id: IsFixedSize
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IsFixedSize
  nameWithType: ReadOnlyOrderedSet<T>.IsFixedSize
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsFixedSize
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsFixedSize
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 168
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool IsFixedSize { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsFixedSize*
  implements:
  - System.Collections.IList.IsFixedSize
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsFixedSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsFixedSize
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove(System.Object)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove(System.Object)
  id: Remove(System.Object)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: ReadOnlyOrderedSet<T>.Remove(Object)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Remove(System.Object)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 173
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void Remove(object value)
    parameters:
    - id: value
      type: System.Object
    content.vb: Public Sub Remove(value As Object)
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove*
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Remove(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Remove(System.Object)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IList#Item(System.Int32)
  commentId: P:NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  nameWithType: ReadOnlyOrderedSet<T>.IList.Item[Int32]
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IList.this[]
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 178
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: object IList.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this[]
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IList#Item*
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).System.Collections.IList.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo(System.Array,System.Int32)
  commentId: M:NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: ReadOnlyOrderedSet<T>.CopyTo(Array, Int32)
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 190
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void CopyTo(Array array, int index)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo*
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  nameWithType.vb: ReadOnlyOrderedSet(Of T).CopyTo(Array, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).CopyTo(System.Array, System.Int32)
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSynchronized
  commentId: P:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSynchronized
  id: IsSynchronized
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: IsSynchronized
  nameWithType: ReadOnlyOrderedSet<T>.IsSynchronized
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsSynchronized
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSynchronized
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 195
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool IsSynchronized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSynchronized*
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsSynchronized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsSynchronized
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SyncRoot
  commentId: P:NMF.Collections.Generic.ReadOnlyOrderedSet`1.SyncRoot
  id: SyncRoot
  parent: NMF.Collections.Generic.ReadOnlyOrderedSet`1
  langs:
  - csharp
  - vb
  name: SyncRoot
  nameWithType: ReadOnlyOrderedSet<T>.SyncRoot
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.SyncRoot
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyOrderedSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SyncRoot
    path: src/Collections/Collections/Generic/ReadOnlyOrderedSet.cs
    startLine: 200
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public object SyncRoot { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property SyncRoot As Object
  overload: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SyncRoot*
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: ReadOnlyOrderedSet(Of T).SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).SyncRoot
references:
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: NMF.Collections.Generic.IOrderedSet{{T}}
  commentId: T:NMF.Collections.Generic.IOrderedSet{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.IOrderedSet`1
  name: IOrderedSet<T>
  nameWithType: IOrderedSet<T>
  fullName: NMF.Collections.Generic.IOrderedSet<T>
  nameWithType.vb: IOrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.IOrderedSet(Of T)
  name.vb: IOrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
    nameWithType: IOrderedSet
    fullName: NMF.Collections.Generic.IOrderedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
    nameWithType: IOrderedSet
    fullName: NMF.Collections.Generic.IOrderedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet{{T}}
  commentId: T:System.Collections.Generic.ISet{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Collections.Generic.IOrderedSet`1
  commentId: T:NMF.Collections.Generic.IOrderedSet`1
  name: IOrderedSet<T>
  nameWithType: IOrderedSet<T>
  fullName: NMF.Collections.Generic.IOrderedSet<T>
  nameWithType.vb: IOrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.IOrderedSet(Of T)
  name.vb: IOrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
    nameWithType: IOrderedSet
    fullName: NMF.Collections.Generic.IOrderedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
    nameWithType: IOrderedSet
    fullName: NMF.Collections.Generic.IOrderedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.#ctor*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.#ctor
  name: ReadOnlyOrderedSet
  nameWithType: ReadOnlyOrderedSet<T>.ReadOnlyOrderedSet
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.ReadOnlyOrderedSet
  nameWithType.vb: ReadOnlyOrderedSet(Of T).ReadOnlyOrderedSet
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).ReadOnlyOrderedSet
- uid: NMF.Collections.Generic.OrderedSet{{T}}
  commentId: T:NMF.Collections.Generic.OrderedSet{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.OrderedSet`1
  name: OrderedSet<T>
  nameWithType: OrderedSet<T>
  fullName: NMF.Collections.Generic.OrderedSet<T>
  nameWithType.vb: OrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T)
  name.vb: OrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
    nameWithType: OrderedSet
    fullName: NMF.Collections.Generic.OrderedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
    nameWithType: OrderedSet
    fullName: NMF.Collections.Generic.OrderedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.OrderedSet`1
  commentId: T:NMF.Collections.Generic.OrderedSet`1
  name: OrderedSet<T>
  nameWithType: OrderedSet<T>
  fullName: NMF.Collections.Generic.OrderedSet<T>
  nameWithType.vb: OrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T)
  name.vb: OrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
    nameWithType: OrderedSet
    fullName: NMF.Collections.Generic.OrderedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
    nameWithType: OrderedSet
    fullName: NMF.Collections.Generic.OrderedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Add
  name: Add
  nameWithType: ReadOnlyOrderedSet<T>.Add
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Add
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Add
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Add
- uid: System.Collections.Generic.ISet{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ISet{`0}.Add(`0)
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.Add(`0)
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
  nameWithType.vb: ISet(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ISet(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet<T>.Add
    fullName: System.Collections.Generic.ISet<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet(Of T).Add
    fullName: System.Collections.Generic.ISet(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ISet`1.Add(`0)
  commentId: M:System.Collections.Generic.ISet`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
  nameWithType.vb: ISet(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ISet(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet<T>.Add
    fullName: System.Collections.Generic.ISet<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet(Of T).Add
    fullName: System.Collections.Generic.ISet(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.ExceptWith*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.ExceptWith
  name: ExceptWith
  nameWithType: ReadOnlyOrderedSet<T>.ExceptWith
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.ExceptWith
  nameWithType.vb: ReadOnlyOrderedSet(Of T).ExceptWith
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).ExceptWith
- uid: System.Collections.Generic.ISet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: ISet<T>.ExceptWith
    fullName: System.Collections.Generic.ISet<T>.ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: ISet(Of T).ExceptWith
    fullName: System.Collections.Generic.ISet(Of T).ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: ISet<T>.ExceptWith
    fullName: System.Collections.Generic.ISet<T>.ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: ISet(Of T).ExceptWith
    fullName: System.Collections.Generic.ISet(Of T).ExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IntersectWith*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IntersectWith
  name: IntersectWith
  nameWithType: ReadOnlyOrderedSet<T>.IntersectWith
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IntersectWith
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IntersectWith
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IntersectWith
- uid: System.Collections.Generic.ISet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ISet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: ISet<T>.IntersectWith
    fullName: System.Collections.Generic.ISet<T>.IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: ISet(Of T).IntersectWith
    fullName: System.Collections.Generic.ISet(Of T).IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ISet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: ISet<T>.IntersectWith
    fullName: System.Collections.Generic.ISet<T>.IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: ISet(Of T).IntersectWith
    fullName: System.Collections.Generic.ISet(Of T).IntersectWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSubsetOf*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSubsetOf
  name: IsProperSubsetOf
  nameWithType: ReadOnlyOrderedSet<T>.IsProperSubsetOf
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsProperSubsetOf
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsProperSubsetOf
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsProperSubsetOf
- uid: System.Collections.Generic.ISet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: ISet<T>.IsProperSubsetOf
    fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: ISet(Of T).IsProperSubsetOf
    fullName: System.Collections.Generic.ISet(Of T).IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: ISet<T>.IsProperSubsetOf
    fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: ISet(Of T).IsProperSubsetOf
    fullName: System.Collections.Generic.ISet(Of T).IsProperSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSupersetOf*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsProperSupersetOf
  name: IsProperSupersetOf
  nameWithType: ReadOnlyOrderedSet<T>.IsProperSupersetOf
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsProperSupersetOf
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsProperSupersetOf
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsProperSupersetOf
- uid: System.Collections.Generic.ISet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: ISet<T>.IsProperSupersetOf
    fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: ISet(Of T).IsProperSupersetOf
    fullName: System.Collections.Generic.ISet(Of T).IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: ISet<T>.IsProperSupersetOf
    fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: ISet(Of T).IsProperSupersetOf
    fullName: System.Collections.Generic.ISet(Of T).IsProperSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSubsetOf*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSubsetOf
  name: IsSubsetOf
  nameWithType: ReadOnlyOrderedSet<T>.IsSubsetOf
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsSubsetOf
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsSubsetOf
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsSubsetOf
- uid: System.Collections.Generic.ISet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: ISet<T>.IsSubsetOf
    fullName: System.Collections.Generic.ISet<T>.IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: ISet(Of T).IsSubsetOf
    fullName: System.Collections.Generic.ISet(Of T).IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: ISet<T>.IsSubsetOf
    fullName: System.Collections.Generic.ISet<T>.IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: ISet(Of T).IsSubsetOf
    fullName: System.Collections.Generic.ISet(Of T).IsSubsetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSupersetOf*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSupersetOf
  name: IsSupersetOf
  nameWithType: ReadOnlyOrderedSet<T>.IsSupersetOf
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsSupersetOf
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsSupersetOf
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsSupersetOf
- uid: System.Collections.Generic.ISet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: ISet<T>.IsSupersetOf
    fullName: System.Collections.Generic.ISet<T>.IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: ISet(Of T).IsSupersetOf
    fullName: System.Collections.Generic.ISet(Of T).IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: ISet<T>.IsSupersetOf
    fullName: System.Collections.Generic.ISet<T>.IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: ISet(Of T).IsSupersetOf
    fullName: System.Collections.Generic.ISet(Of T).IsSupersetOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Overlaps*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Overlaps
  name: Overlaps
  nameWithType: ReadOnlyOrderedSet<T>.Overlaps
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Overlaps
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Overlaps
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Overlaps
- uid: System.Collections.Generic.ISet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  name: Overlaps(IEnumerable<T>)
  nameWithType: ISet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: ISet<T>.Overlaps
    fullName: System.Collections.Generic.ISet<T>.Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: ISet(Of T).Overlaps
    fullName: System.Collections.Generic.ISet(Of T).Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Overlaps(IEnumerable<T>)
  nameWithType: ISet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: ISet<T>.Overlaps
    fullName: System.Collections.Generic.ISet<T>.Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: ISet(Of T).Overlaps
    fullName: System.Collections.Generic.ISet(Of T).Overlaps
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SetEquals*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.SetEquals
  name: SetEquals
  nameWithType: ReadOnlyOrderedSet<T>.SetEquals
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.SetEquals
  nameWithType.vb: ReadOnlyOrderedSet(Of T).SetEquals
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).SetEquals
- uid: System.Collections.Generic.ISet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  name: SetEquals(IEnumerable<T>)
  nameWithType: ISet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: ISet<T>.SetEquals
    fullName: System.Collections.Generic.ISet<T>.SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: ISet(Of T).SetEquals
    fullName: System.Collections.Generic.ISet(Of T).SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SetEquals(IEnumerable<T>)
  nameWithType: ISet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: ISet<T>.SetEquals
    fullName: System.Collections.Generic.ISet<T>.SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: ISet(Of T).SetEquals
    fullName: System.Collections.Generic.ISet(Of T).SetEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SymmetricExceptWith*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.SymmetricExceptWith
  name: SymmetricExceptWith
  nameWithType: ReadOnlyOrderedSet<T>.SymmetricExceptWith
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.SymmetricExceptWith
  nameWithType.vb: ReadOnlyOrderedSet(Of T).SymmetricExceptWith
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).SymmetricExceptWith
- uid: System.Collections.Generic.ISet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: ISet<T>.SymmetricExceptWith
    fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: ISet(Of T).SymmetricExceptWith
    fullName: System.Collections.Generic.ISet(Of T).SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: ISet<T>.SymmetricExceptWith
    fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: ISet(Of T).SymmetricExceptWith
    fullName: System.Collections.Generic.ISet(Of T).SymmetricExceptWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.UnionWith*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.UnionWith
  name: UnionWith
  nameWithType: ReadOnlyOrderedSet<T>.UnionWith
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.UnionWith
  nameWithType.vb: ReadOnlyOrderedSet(Of T).UnionWith
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).UnionWith
- uid: System.Collections.Generic.ISet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:System.Collections.Generic.ISet{`0}.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  name: UnionWith(IEnumerable<T>)
  nameWithType: ISet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: ISet<T>.UnionWith
    fullName: System.Collections.Generic.ISet<T>.UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: ISet(Of T).UnionWith
    fullName: System.Collections.Generic.ISet(Of T).UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: UnionWith(IEnumerable<T>)
  nameWithType: ISet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ISet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.ISet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: ISet<T>.UnionWith
    fullName: System.Collections.Generic.ISet<T>.UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: ISet(Of T).UnionWith
    fullName: System.Collections.Generic.ISet(Of T).UnionWith
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#Generic#ICollection{T}#Add*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#Generic#ICollection{T}#Add
  name: ICollection<T>.Add
  nameWithType: ReadOnlyOrderedSet<T>.ICollection<T>.Add
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.System.Collections.Generic.ICollection<T>.Add
  nameWithType.vb: ReadOnlyOrderedSet(Of T).System.Collections.Generic.ICollection<T>.Add
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).System.Collections.Generic.ICollection<T>.Add
  name.vb: System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Clear*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Clear
  name: Clear
  nameWithType: ReadOnlyOrderedSet<T>.Clear
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Clear
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Clear
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Clear
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: true
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Contains
  name: Contains
  nameWithType: ReadOnlyOrderedSet<T>.Contains
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Contains
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Contains
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.CopyTo
  name: CopyTo
  nameWithType: ReadOnlyOrderedSet<T>.CopyTo
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.CopyTo
  nameWithType.vb: ReadOnlyOrderedSet(Of T).CopyTo
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Count*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Count
  name: Count
  nameWithType: ReadOnlyOrderedSet<T>.Count
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Count
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Count
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Count
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: true
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsReadOnly*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ReadOnlyOrderedSet<T>.IsReadOnly
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsReadOnly
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsReadOnly
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: true
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Remove
  name: Remove
  nameWithType: ReadOnlyOrderedSet<T>.Remove
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Remove
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Remove
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.GetEnumerator*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.GetEnumerator
  name: GetEnumerator
  nameWithType: ReadOnlyOrderedSet<T>.GetEnumerator
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.GetEnumerator
  nameWithType.vb: ReadOnlyOrderedSet(Of T).GetEnumerator
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ReadOnlyOrderedSet<T>.IEnumerable.GetEnumerator
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ReadOnlyOrderedSet(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IndexOf
  name: IndexOf
  nameWithType: ReadOnlyOrderedSet<T>.IndexOf
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IndexOf
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IndexOf
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Insert
  name: Insert
  nameWithType: ReadOnlyOrderedSet<T>.Insert
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Insert
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Insert
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.RemoveAt*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.RemoveAt
  name: RemoveAt
  nameWithType: ReadOnlyOrderedSet<T>.RemoveAt
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.RemoveAt
  nameWithType.vb: ReadOnlyOrderedSet(Of T).RemoveAt
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).RemoveAt
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.Item*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.Item
  name: Item
  nameWithType: ReadOnlyOrderedSet<T>.Item
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.Item
  nameWithType.vb: ReadOnlyOrderedSet(Of T).Item
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsFixedSize*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsFixedSize
  name: IsFixedSize
  nameWithType: ReadOnlyOrderedSet<T>.IsFixedSize
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsFixedSize
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsFixedSize
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsFixedSize
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: true
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IList#Item*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.System#Collections#IList#Item
  name: IList.Item
  nameWithType: ReadOnlyOrderedSet<T>.IList.Item
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.System.Collections.IList.Item
  nameWithType.vb: ReadOnlyOrderedSet(Of T).System.Collections.IList.Item
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).System.Collections.IList.Item
  name.vb: System.Collections.IList.Item
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullName.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSynchronized*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.IsSynchronized
  name: IsSynchronized
  nameWithType: ReadOnlyOrderedSet<T>.IsSynchronized
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.IsSynchronized
  nameWithType.vb: ReadOnlyOrderedSet(Of T).IsSynchronized
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).IsSynchronized
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: true
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1.SyncRoot*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyOrderedSet`1.SyncRoot
  name: SyncRoot
  nameWithType: ReadOnlyOrderedSet<T>.SyncRoot
  fullName: NMF.Collections.Generic.ReadOnlyOrderedSet<T>.SyncRoot
  nameWithType.vb: ReadOnlyOrderedSet(Of T).SyncRoot
  fullName.vb: NMF.Collections.Generic.ReadOnlyOrderedSet(Of T).SyncRoot
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: true
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
