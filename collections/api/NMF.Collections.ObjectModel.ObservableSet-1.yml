### YamlMime:ManagedReference
items:
- uid: NMF.Collections.ObjectModel.ObservableSet`1
  commentId: T:NMF.Collections.ObjectModel.ObservableSet`1
  id: ObservableSet`1
  parent: NMF.Collections.ObjectModel
  children:
  - NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
  - NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
  - NMF.Collections.ObjectModel.ObservableSet`1.Clear
  - NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanged
  - NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanging
  - NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
  - NMF.Collections.ObjectModel.ObservableSet`1.PropertyChanged
  - NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
  - NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
  - NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
  - NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
  - NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
  langs:
  - csharp
  - vb
  name: ObservableSet<T>
  nameWithType: ObservableSet<T>
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>
  type: Class
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableSet
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 14
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: 'public class ObservableSet<T> : DecoratedSet<T>, IList, ISet<T>, ICollection<T>, IEnumerable<T>, ICollection, IEnumerable, INotifyCollectionChanged, INotifyCollectionChanging, INotifyPropertyChanged, ISetExpression<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class ObservableSet(Of T)

          Inherits DecoratedSet(Of T)

          Implements IList, ISet(Of T), ICollection(Of T), IEnumerable(Of T), ICollection, IEnumerable, INotifyCollectionChanged, INotifyCollectionChanging, INotifyPropertyChanged, ISetExpression(Of T)
  inheritance:
  - System.Object
  - NMF.Collections.Generic.DecoratedSet{{T}}
  derivedClasses:
  - NMF.Collections.ObjectModel.ObservableOppositeSet`2
  implements:
  - System.Collections.IList
  - System.Collections.Generic.ISet{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Collections.ObjectModel.INotifyCollectionChanging
  - System.ComponentModel.INotifyPropertyChanged
  - ISetExpression{{T}}
  inheritedMembers:
  - NMF.Collections.Generic.DecoratedSet{{T}}.Items
  - NMF.Collections.Generic.DecoratedSet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#Generic#ICollection{T}#Add({T})
  - NMF.Collections.Generic.DecoratedSet{{T}}.Contains({T})
  - NMF.Collections.Generic.DecoratedSet{{T}}.CopyTo({T}[],System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{T}}.Count
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - NMF.Collections.Generic.DecoratedSet{{T}}.GetEnumerator
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IEnumerable#GetEnumerator
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Add(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Contains(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Clear
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#IndexOf(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Insert(System.Int32,System.Object)
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Remove(System.Object)
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#RemoveAt(System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#ICollection#IsSynchronized
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#ICollection#SyncRoot
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#IsReadOnly
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#IsFixedSize
  - NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Item(System.Int32)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ObservableSet(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T)
  name.vb: ObservableSet(Of T)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.Add(`0)
  id: Add(`0)
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ObservableSet<T>.Add(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Add(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 17
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override bool Add(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Add(item As T) As Boolean
  overridden: NMF.Collections.Generic.DecoratedSet{{T}}.Add({T})
  overload: NMF.Collections.ObjectModel.ObservableSet`1.Add*
  implements:
  - System.Collections.Generic.ISet{{T}}.Add({T})
  nameWithType.vb: ObservableSet(Of T).Add(T)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Add(T)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
  id: RequireEvents
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: RequireEvents()
  nameWithType: ObservableSet<T>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.RequireEvents()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RequireEvents
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 38
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected bool RequireEvents()
    return:
      type: System.Boolean
    content.vb: Protected Function RequireEvents As Boolean
  overload: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents*
  nameWithType.vb: ObservableSet(Of T).RequireEvents()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).RequireEvents()
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd(`0)
  id: SilentAdd(`0)
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: SilentAdd(T)
  nameWithType: ObservableSet<T>.SilentAdd(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentAdd(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SilentAdd
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 43
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected bool SilentAdd(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Protected Function SilentAdd(item As T) As Boolean
  overload: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd*
  nameWithType.vb: ObservableSet(Of T).SilentAdd(T)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentAdd(T)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Clear
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.Clear
  id: Clear
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ObservableSet<T>.Clear()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Clear()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 48
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear
  overridden: NMF.Collections.Generic.DecoratedSet{{T}}.Clear
  overload: NMF.Collections.ObjectModel.ObservableSet`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: ObservableSet(Of T).Clear()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Clear()
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
  id: SilentClear
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: SilentClear()
  nameWithType: ObservableSet<T>.SilentClear()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentClear()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SilentClear
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 63
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected void SilentClear()
    content.vb: Protected Sub SilentClear
  overload: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear*
  nameWithType.vb: ObservableSet(Of T).SilentClear()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentClear()
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.Remove(`0)
  id: Remove(`0)
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ObservableSet<T>.Remove(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Remove(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 68
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Remove(item As T) As Boolean
  overridden: NMF.Collections.Generic.DecoratedSet{{T}}.Remove({T})
  overload: NMF.Collections.ObjectModel.ObservableSet`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: ObservableSet(Of T).Remove(T)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Remove(T)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove(`0)
  id: SilentRemove(`0)
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: SilentRemove(T)
  nameWithType: ObservableSet<T>.SilentRemove(T)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentRemove(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SilentRemove
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 84
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected bool SilentRemove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Protected Function SilentRemove(item As T) As Boolean
  overload: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove*
  nameWithType.vb: ObservableSet(Of T).SilentRemove(T)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentRemove(T)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanged
  id: CollectionChanged
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: ObservableSet<T>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.CollectionChanged
  type: Event
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CollectionChanged
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 89
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: ObservableSet(Of T).CollectionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableSet`1.CollectionChanging
  id: CollectionChanging
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: CollectionChanging
  nameWithType: ObservableSet<T>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.CollectionChanging
  type: Event
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CollectionChanging
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 91
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public event EventHandler<NotifyCollectionChangedEventArgs> CollectionChanging
    return:
      type: System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs}
    content.vb: Public Event CollectionChanging As EventHandler(Of NotifyCollectionChangedEventArgs)
  implements:
  - NMF.Collections.ObjectModel.INotifyCollectionChanging.CollectionChanging
  nameWithType.vb: ObservableSet(Of T).CollectionChanging
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged(System.String)
  id: OnPropertyChanged(System.String)
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(String)
  nameWithType: ObservableSet<T>.OnPropertyChanged(String)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnPropertyChanged(System.String)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnPropertyChanged
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 93
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected void OnPropertyChanged(string property)
    parameters:
    - id: property
      type: System.String
    content.vb: Protected Sub OnPropertyChanged(property As String)
  overload: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged*
  nameWithType.vb: ObservableSet(Of T).OnPropertyChanged(String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnPropertyChanged(System.String)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableSet<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnCollectionChanged
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 98
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
    parameters:
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    content.vb: Protected Sub OnCollectionChanged(e As NotifyCollectionChangedEventArgs)
  overload: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged*
  nameWithType.vb: ObservableSet(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableSet<T>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnCollectionChanging
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 104
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected void OnCollectionChanging(NotifyCollectionChangedEventArgs e)
    parameters:
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    content.vb: Protected Sub OnCollectionChanging(e As NotifyCollectionChangedEventArgs)
  overload: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging*
  nameWithType.vb: ObservableSet(Of T).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
- uid: NMF.Collections.ObjectModel.ObservableSet`1.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableSet`1.PropertyChanged
  id: PropertyChanged
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: ObservableSet<T>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.PropertyChanged
  type: Event
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropertyChanged
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 109
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  nameWithType.vb: ObservableSet(Of T).PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
  id: AsNotifiable
  parent: NMF.Collections.ObjectModel.ObservableSet`1
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: ObservableSet<T>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableSet.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Collections/Collections/ObjectModel/ObservableSet.cs
    startLine: 113
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public INotifyCollection<T> AsNotifiable()
    return:
      type: INotifyCollection{{T}}
    content.vb: Public Function AsNotifiable As INotifyCollection(Of T)
  overload: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable*
  nameWithType.vb: ObservableSet(Of T).AsNotifiable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).AsNotifiable()
references:
- uid: NMF.Collections.ObjectModel
  commentId: N:NMF.Collections.ObjectModel
  name: NMF.Collections.ObjectModel
  nameWithType: NMF.Collections.ObjectModel
  fullName: NMF.Collections.ObjectModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Collections.Generic.DecoratedSet{{T}}
  commentId: T:NMF.Collections.Generic.DecoratedSet{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<T>
  nameWithType: DecoratedSet<T>
  fullName: NMF.Collections.Generic.DecoratedSet<T>
  nameWithType.vb: DecoratedSet(Of T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T)
  name.vb: DecoratedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.Generic.ISet{{T}}
  commentId: T:System.Collections.Generic.ISet{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Collections.ObjectModel.INotifyCollectionChanging
  commentId: T:NMF.Collections.ObjectModel.INotifyCollectionChanging
  parent: NMF.Collections.ObjectModel
  name: INotifyCollectionChanging
  nameWithType: INotifyCollectionChanging
  fullName: NMF.Collections.ObjectModel.INotifyCollectionChanging
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: ISetExpression{{T}}
  commentId: '!:ISetExpression{`0}'
  definition: ISetExpression`1
  name: ISetExpression<T>
  nameWithType: ISetExpression<T>
  fullName: ISetExpression<T>
  nameWithType.vb: ISetExpression(Of T)
  fullName.vb: ISetExpression(Of T)
  name.vb: ISetExpression(Of T)
  spec.csharp:
  - uid: ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: ISetExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: ISetExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.Items
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<T>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Items
  nameWithType.vb: DecoratedSet(Of T).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Items
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.ExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: ExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet<T>.ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet(Of T).ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IntersectWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  name: IntersectWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet<T>.IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet(Of T).IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet<T>.IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet(Of T).IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet<T>.IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet(Of T).IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet<T>.IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet(Of T).IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet<T>.IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet(Of T).IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Overlaps(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  name: Overlaps(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.Overlaps(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet<T>.Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet(Of T).Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.SetEquals(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  name: SetEquals(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SetEquals(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet<T>.SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet(Of T).SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet<T>.SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet(Of T).SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.UnionWith(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  name: UnionWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.UnionWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet<T>.UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet(Of T).UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#Generic#ICollection{T}#Add({T})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<T>.Add(T)
  nameWithType: DecoratedSet<T>.ICollection<T>.Add(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<T>.Add
    nameWithType: DecoratedSet<T>.ICollection<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Contains({T})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.Contains(`0)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(T)
  nameWithType: DecoratedSet<T>.Contains(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains(T)
  nameWithType.vb: DecoratedSet(Of T).Contains(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet<T>.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet(Of T).Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.CopyTo(`0[],System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: DecoratedSet<T>.CopyTo(T[], Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: DecoratedSet(Of T).CopyTo(T(), Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet<T>.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet(Of T).CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.Count
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<T>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Count
  nameWithType.vb: DecoratedSet(Of T).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Count
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: DecoratedSet<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.GetEnumerator
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: DecoratedSet<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet<T>.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<T>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet(Of T).GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IEnumerable#GetEnumerator
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: DecoratedSet<T>.IEnumerable.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: DecoratedSet<T>.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: DecoratedSet<T>.ICollection.CopyTo(Array, Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: DecoratedSet<T>.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: DecoratedSet(Of T).System.Collections.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Add(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#Add(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: DecoratedSet<T>.IList.Add(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Add(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: DecoratedSet<T>.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Contains(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#Contains(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: DecoratedSet<T>.IList.Contains(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: DecoratedSet<T>.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Clear
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#Clear
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
  name: IList.Clear()
  nameWithType: DecoratedSet<T>.IList.Clear()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Clear()
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Clear()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: IList.Clear
    nameWithType: DecoratedSet<T>.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: System.Collections.IList.Clear
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#IndexOf(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: DecoratedSet<T>.IList.IndexOf(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: DecoratedSet<T>.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: DecoratedSet(Of T).System.Collections.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: DecoratedSet<T>.IList.Insert(Int32, Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: DecoratedSet<T>.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Remove(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#Remove(System.Object)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: DecoratedSet<T>.IList.Remove(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: DecoratedSet<T>.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#RemoveAt(System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  name: IList.RemoveAt(Int32)
  nameWithType: DecoratedSet<T>.IList.RemoveAt(Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: IList.RemoveAt
    nameWithType: DecoratedSet<T>.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: System.Collections.IList.RemoveAt
    nameWithType: DecoratedSet(Of T).System.Collections.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#ICollection#IsSynchronized
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#ICollection#IsSynchronized
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: DecoratedSet<T>.ICollection.IsSynchronized
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#ICollection#SyncRoot
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#ICollection#SyncRoot
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: DecoratedSet<T>.ICollection.SyncRoot
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#IsReadOnly
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: DecoratedSet<T>.IList.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#IsFixedSize
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#IsFixedSize
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: DecoratedSet<T>.IList.IsFixedSize
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.System#Collections#IList#Item(System.Int32)
  commentId: P:NMF.Collections.Generic.DecoratedSet{`0}.System#Collections#IList#Item(System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: DecoratedSet<T>.IList.Item[Int32]
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: DecoratedSet<T>.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Collections.Generic.DecoratedSet`1
  commentId: T:NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<T>
  nameWithType: DecoratedSet<T>
  fullName: NMF.Collections.Generic.DecoratedSet<T>
  nameWithType.vb: DecoratedSet(Of T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T)
  name.vb: DecoratedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
    nameWithType: DecoratedSet
    fullName: NMF.Collections.Generic.DecoratedSet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: ISetExpression`1
  isExternal: true
  name: ISetExpression<>
  nameWithType: ISetExpression<>
  fullName: ISetExpression<>
  nameWithType.vb: ISetExpression(Of )
  fullName.vb: ISetExpression(Of )
  name.vb: ISetExpression(Of )
  spec.csharp:
  - uid: ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: ISetExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISetExpression`1
    name: ISetExpression
    nameWithType: ISetExpression
    fullName: ISetExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<T>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Items
  nameWithType.vb: DecoratedSet(Of T).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Items
- uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: ExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet<T>.ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
    nameWithType: DecoratedSet(Of T).ExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IntersectWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet<T>.IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
    nameWithType: DecoratedSet(Of T).IntersectWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet<T>.IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
    nameWithType: DecoratedSet(Of T).IsProperSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet<T>.IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
    nameWithType: DecoratedSet(Of T).IsProperSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet<T>.IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
    nameWithType: DecoratedSet(Of T).IsSubsetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet<T>.IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
    nameWithType: DecoratedSet(Of T).IsSupersetOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Overlaps(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.Overlaps(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet<T>.Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
    nameWithType: DecoratedSet(Of T).Overlaps
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SetEquals(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SetEquals(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet<T>.SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
    nameWithType: DecoratedSet(Of T).SetEquals
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet<T>.SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
    nameWithType: DecoratedSet(Of T).SymmetricExceptWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: UnionWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.UnionWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet<T>.UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
    nameWithType: DecoratedSet(Of T).UnionWith
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<T>.Add(T)
  nameWithType: DecoratedSet<T>.ICollection<T>.Add(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<T>.Add
    nameWithType: DecoratedSet<T>.ICollection<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(T)
  nameWithType: DecoratedSet<T>.Contains(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains(T)
  nameWithType.vb: DecoratedSet(Of T).Contains(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet<T>.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
    nameWithType: DecoratedSet(Of T).Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: DecoratedSet<T>.CopyTo(T[], Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: DecoratedSet(Of T).CopyTo(T(), Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet<T>.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: DecoratedSet(Of T).CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<T>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Count
  nameWithType.vb: DecoratedSet(Of T).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Count
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: DecoratedSet<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: DecoratedSet<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet<T>.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<T>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.GetEnumerator
    name: GetEnumerator
    nameWithType: DecoratedSet(Of T).GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: DecoratedSet<T>.IEnumerable.GetEnumerator()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: DecoratedSet<T>.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: DecoratedSet<T>.ICollection.CopyTo(Array, Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: DecoratedSet<T>.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: DecoratedSet(Of T).System.Collections.ICollection.CopyTo
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: DecoratedSet<T>.IList.Add(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Add(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: DecoratedSet<T>.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: DecoratedSet<T>.IList.Contains(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: DecoratedSet<T>.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Contains
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
  name: IList.Clear()
  nameWithType: DecoratedSet<T>.IList.Clear()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Clear()
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Clear()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: IList.Clear
    nameWithType: DecoratedSet<T>.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Clear
    name: System.Collections.IList.Clear
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Clear
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: DecoratedSet<T>.IList.IndexOf(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: DecoratedSet<T>.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: DecoratedSet(Of T).System.Collections.IList.IndexOf
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: DecoratedSet<T>.IList.Insert(Int32, Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: DecoratedSet<T>.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Insert
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: DecoratedSet<T>.IList.Remove(Object)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: DecoratedSet<T>.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Remove
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
  isExternal: true
  name: IList.RemoveAt(Int32)
  nameWithType: DecoratedSet<T>.IList.RemoveAt(Int32)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: IList.RemoveAt
    nameWithType: DecoratedSet<T>.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#RemoveAt(System.Int32)
    name: System.Collections.IList.RemoveAt
    nameWithType: DecoratedSet(Of T).System.Collections.IList.RemoveAt
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#IsSynchronized
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: DecoratedSet<T>.ICollection.IsSynchronized
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#SyncRoot
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: DecoratedSet<T>.ICollection.SyncRoot
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: DecoratedSet(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsReadOnly
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: DecoratedSet<T>.IList.IsReadOnly
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsFixedSize
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: DecoratedSet<T>.IList.IsFixedSize
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: DecoratedSet<T>.IList.Item[Int32]
  fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: DecoratedSet(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: DecoratedSet<T>.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet<T>.System.Collections.IList.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: DecoratedSet(Of T).System.Collections.IList.Item
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).System.Collections.IList.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Add({T})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.Add(`0)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Add(`0)
  name: Add(T)
  nameWithType: DecoratedSet<T>.Add(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Add(T)
  nameWithType.vb: DecoratedSet(Of T).Add(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Add(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Add(`0)
    name: Add
    nameWithType: DecoratedSet<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Add(`0)
    name: Add
    nameWithType: DecoratedSet(Of T).Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Add*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.Add
  name: Add
  nameWithType: ObservableSet<T>.Add
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Add
  nameWithType.vb: ObservableSet(Of T).Add
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Add
- uid: System.Collections.Generic.ISet{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ISet{`0}.Add(`0)
  parent: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1.Add(`0)
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
  nameWithType.vb: ISet(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ISet(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet<T>.Add
    fullName: System.Collections.Generic.ISet<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet(Of T).Add
    fullName: System.Collections.Generic.ISet(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Collections.Generic.DecoratedSet`1.Add(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Add(`0)
  name: Add(T)
  nameWithType: DecoratedSet<T>.Add(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Add(T)
  nameWithType.vb: DecoratedSet(Of T).Add(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Add(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Add(`0)
    name: Add
    nameWithType: DecoratedSet<T>.Add
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Add(`0)
    name: Add
    nameWithType: DecoratedSet(Of T).Add
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1.Add(`0)
  commentId: M:System.Collections.Generic.ISet`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
  nameWithType.vb: ISet(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ISet(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet<T>.Add
    fullName: System.Collections.Generic.ISet<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ISet`1.Add(`0)
    name: Add
    nameWithType: ISet(Of T).Add
    fullName: System.Collections.Generic.ISet(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.RequireEvents
  name: RequireEvents
  nameWithType: ObservableSet<T>.RequireEvents
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.RequireEvents
  nameWithType.vb: ObservableSet(Of T).RequireEvents
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).RequireEvents
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.SilentAdd
  name: SilentAdd
  nameWithType: ObservableSet<T>.SilentAdd
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentAdd
  nameWithType.vb: ObservableSet(Of T).SilentAdd
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentAdd
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Clear
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.Clear
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Clear
  name: Clear()
  nameWithType: DecoratedSet<T>.Clear()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Clear()
  nameWithType.vb: DecoratedSet(Of T).Clear()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Clear
    name: Clear
    nameWithType: DecoratedSet<T>.Clear
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Clear
    name: Clear
    nameWithType: DecoratedSet(Of T).Clear
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Clear*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.Clear
  name: Clear
  nameWithType: ObservableSet<T>.Clear
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Clear
  nameWithType.vb: ObservableSet(Of T).Clear
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Clear
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Clear
  name: Clear()
  nameWithType: DecoratedSet<T>.Clear()
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Clear()
  nameWithType.vb: DecoratedSet(Of T).Clear()
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Clear()
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Clear
    name: Clear
    nameWithType: DecoratedSet<T>.Clear
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Clear
    name: Clear
    nameWithType: DecoratedSet(Of T).Clear
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentClear*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.SilentClear
  name: SilentClear
  nameWithType: ObservableSet<T>.SilentClear
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentClear
  nameWithType.vb: ObservableSet(Of T).SilentClear
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentClear
- uid: NMF.Collections.Generic.DecoratedSet{{T}}.Remove({T})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`0}.Remove(`0)
  parent: NMF.Collections.Generic.DecoratedSet{{T}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Remove(`0)
  name: Remove(T)
  nameWithType: DecoratedSet<T>.Remove(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Remove(T)
  nameWithType.vb: DecoratedSet(Of T).Remove(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Remove(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Remove(`0)
    name: Remove
    nameWithType: DecoratedSet<T>.Remove
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Remove(`0)
    name: Remove
    nameWithType: DecoratedSet(Of T).Remove
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.Remove*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.Remove
  name: Remove
  nameWithType: ObservableSet<T>.Remove
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.Remove
  nameWithType.vb: ObservableSet(Of T).Remove
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Remove(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Remove(`0)
  name: Remove(T)
  nameWithType: DecoratedSet<T>.Remove(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Remove(T)
  nameWithType.vb: DecoratedSet(Of T).Remove(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Remove(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Remove(`0)
    name: Remove
    nameWithType: DecoratedSet<T>.Remove
    fullName: NMF.Collections.Generic.DecoratedSet<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Remove(`0)
    name: Remove
    nameWithType: DecoratedSet(Of T).Remove
    fullName: NMF.Collections.Generic.DecoratedSet(Of T).Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.SilentRemove
  name: SilentRemove
  nameWithType: ObservableSet<T>.SilentRemove
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.SilentRemove
  nameWithType.vb: ObservableSet(Of T).SilentRemove
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).SilentRemove
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: NMF.Collections.ObjectModel.INotifyCollectionChanging.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.INotifyCollectionChanging.CollectionChanging
  parent: NMF.Collections.ObjectModel.INotifyCollectionChanging
  name: CollectionChanging
  nameWithType: INotifyCollectionChanging.CollectionChanging
  fullName: NMF.Collections.ObjectModel.INotifyCollectionChanging.CollectionChanging
- uid: System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs}
  commentId: T:System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<NotifyCollectionChangedEventArgs>
  nameWithType: EventHandler<NotifyCollectionChangedEventArgs>
  fullName: System.EventHandler<System.Collections.Specialized.NotifyCollectionChangedEventArgs>
  nameWithType.vb: EventHandler(Of NotifyCollectionChangedEventArgs)
  fullName.vb: System.EventHandler(Of System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name.vb: EventHandler(Of NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: ObservableSet<T>.OnPropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnPropertyChanged
  nameWithType.vb: ObservableSet(Of T).OnPropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnPropertyChanged
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanged
  name: OnCollectionChanged
  nameWithType: ObservableSet<T>.OnCollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanged
  nameWithType.vb: ObservableSet(Of T).OnCollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventArgs
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
- uid: NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.OnCollectionChanging
  name: OnCollectionChanging
  nameWithType: ObservableSet<T>.OnCollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.OnCollectionChanging
  nameWithType.vb: ObservableSet(Of T).OnCollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).OnCollectionChanging
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableSet`1.AsNotifiable
  name: AsNotifiable
  nameWithType: ObservableSet<T>.AsNotifiable
  fullName: NMF.Collections.ObjectModel.ObservableSet<T>.AsNotifiable
  nameWithType.vb: ObservableSet(Of T).AsNotifiable
  fullName.vb: NMF.Collections.ObjectModel.ObservableSet(Of T).AsNotifiable
- uid: INotifyCollection{{T}}
  commentId: '!:INotifyCollection{`0}'
  definition: INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: INotifyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: INotifyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: INotifyCollection`1
  isExternal: true
  name: INotifyCollection<>
  nameWithType: INotifyCollection<>
  fullName: INotifyCollection<>
  nameWithType.vb: INotifyCollection(Of )
  fullName.vb: INotifyCollection(Of )
  name.vb: INotifyCollection(Of )
  spec.csharp:
  - uid: INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: INotifyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyCollection`1
    name: INotifyCollection
    nameWithType: INotifyCollection
    fullName: INotifyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
