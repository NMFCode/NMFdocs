### YamlMime:ManagedReference
items:
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2
  commentId: T:NMF.Collections.Generic.ReadOnlyListSelection`2
  id: ReadOnlyListSelection`2
  parent: NMF.Collections.Generic
  children:
  - NMF.Collections.Generic.ReadOnlyListSelection`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1})
  - NMF.Collections.Generic.ReadOnlyListSelection`2.Add(`1)
  - NMF.Collections.Generic.ReadOnlyListSelection`2.Clear
  - NMF.Collections.Generic.ReadOnlyListSelection`2.Contains(`1)
  - NMF.Collections.Generic.ReadOnlyListSelection`2.CopyTo(`1[],System.Int32)
  - NMF.Collections.Generic.ReadOnlyListSelection`2.Count
  - NMF.Collections.Generic.ReadOnlyListSelection`2.GetEnumerator
  - NMF.Collections.Generic.ReadOnlyListSelection`2.IndexOf(`1)
  - NMF.Collections.Generic.ReadOnlyListSelection`2.IsReadOnly
  - NMF.Collections.Generic.ReadOnlyListSelection`2.Item(System.Int32)
  - NMF.Collections.Generic.ReadOnlyListSelection`2.Remove(`1)
  langs:
  - csharp
  - vb
  name: ReadOnlyListSelection<TSource, T>
  nameWithType: ReadOnlyListSelection<TSource, T>
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>
  type: Class
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReadOnlyListSelection
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 8
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: 'public class ReadOnlyListSelection<TSource, T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: TSource
    - id: T
    content.vb: Public Class ReadOnlyListSelection(Of TSource, T) Implements IList(Of T), ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T)
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T)
  name.vb: ReadOnlyListSelection(Of TSource, T)
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1})
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1})
  id: '#ctor(System.Collections.Generic.IList{`0},System.Func{`0,`1})'
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: ReadOnlyListSelection(IList<TSource>, Func<TSource, T>)
  nameWithType: ReadOnlyListSelection<TSource, T>.ReadOnlyListSelection(IList<TSource>, Func<TSource, T>)
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.ReadOnlyListSelection(System.Collections.Generic.IList<TSource>, System.Func<TSource, T>)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 14
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public ReadOnlyListSelection(IList<TSource> source, Func<TSource, T> selector)
    parameters:
    - id: source
      type: System.Collections.Generic.IList{{TSource}}
    - id: selector
      type: System.Func{{TSource},{T}}
    content.vb: Public Sub New(source As IList(Of TSource), selector As Func(Of TSource, T))
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.#ctor*
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).New(IList(Of TSource), Func(Of TSource, T))
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).New(System.Collections.Generic.IList(Of TSource), System.Func(Of TSource, T))
  name.vb: New(IList(Of TSource), Func(Of TSource, T))
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.IndexOf(`1)
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.IndexOf(`1)
  id: IndexOf(`1)
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: ReadOnlyListSelection<TSource, T>.IndexOf(T)
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IndexOf
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 20
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).IndexOf(T)
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).IndexOf(T)
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Item(System.Int32)
  commentId: P:NMF.Collections.Generic.ReadOnlyListSelection`2.Item(System.Int32)
  id: Item(System.Int32)
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: ReadOnlyListSelection<TSource, T>.this[int]
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.this[int]
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 35
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
    content.vb: Public Default Property this[](index As Integer) As T
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.Item*
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).this[](Integer)
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).this[](Integer)
  name.vb: this[](Integer)
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Add(`1)
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.Add(`1)
  id: Add(`1)
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ReadOnlyListSelection<TSource, T>.Add(T)
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Add(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 47
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public Sub Add(item As T)
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Add(T)
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Add(T)
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Clear
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.Clear
  id: Clear
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ReadOnlyListSelection<TSource, T>.Clear()
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Clear()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 52
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Clear()
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Clear()
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Contains(`1)
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.Contains(`1)
  id: Contains(`1)
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: ReadOnlyListSelection<TSource, T>.Contains(T)
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Contains(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 57
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As T) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Contains(T)
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Contains(T)
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.CopyTo(`1[],System.Int32)
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.CopyTo(`1[],System.Int32)
  id: CopyTo(`1[],System.Int32)
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: CopyTo(T[], int)
  nameWithType: ReadOnlyListSelection<TSource, T>.CopyTo(T[], int)
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.CopyTo(T[], int)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 62
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).CopyTo(T(), Integer)
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Count
  commentId: P:NMF.Collections.Generic.ReadOnlyListSelection`2.Count
  id: Count
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ReadOnlyListSelection<TSource, T>.Count
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Count
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 71
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Count
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Count
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.IsReadOnly
  commentId: P:NMF.Collections.Generic.ReadOnlyListSelection`2.IsReadOnly
  id: IsReadOnly
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ReadOnlyListSelection<TSource, T>.IsReadOnly
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.IsReadOnly
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReadOnly
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 76
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).IsReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).IsReadOnly
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Remove(`1)
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.Remove(`1)
  id: Remove(`1)
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ReadOnlyListSelection<TSource, T>.Remove(T)
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Remove(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 81
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As T) As Boolean
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Remove(T)
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Remove(T)
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.GetEnumerator
  commentId: M:NMF.Collections.Generic.ReadOnlyListSelection`2.GetEnumerator
  id: GetEnumerator
  parent: NMF.Collections.Generic.ReadOnlyListSelection`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ReadOnlyListSelection<TSource, T>.GetEnumerator()
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/ReadOnlyListSelection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Collections/Collections/Generic/ReadOnlyListSelection.cs
    startLine: 86
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  example: []
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public Function GetEnumerator() As IEnumerator(Of T)
  overload: NMF.Collections.Generic.ReadOnlyListSelection`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).GetEnumerator()
references:
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  href: NMF.html
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Collections
    name: Collections
    href: NMF.Collections.html
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
    href: NMF.Collections.Generic.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Collections
    name: Collections
    href: NMF.Collections.html
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
    href: NMF.Collections.Generic.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.#ctor*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.#ctor
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2__ctor_System_Collections_Generic_IList__0__System_Func__0__1__
  name: ReadOnlyListSelection
  nameWithType: ReadOnlyListSelection<TSource, T>.ReadOnlyListSelection
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.ReadOnlyListSelection
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).New
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).New
  name.vb: New
- uid: System.Collections.Generic.IList{{TSource}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<TSource>
  nameWithType: IList<TSource>
  fullName: System.Collections.Generic.IList<TSource>
  nameWithType.vb: IList(Of TSource)
  fullName.vb: System.Collections.Generic.IList(Of TSource)
  name.vb: IList(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Func{{TSource},{T}}
  commentId: T:System.Func{`0,`1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, T>
  nameWithType: Func<TSource, T>
  fullName: System.Func<TSource, T>
  nameWithType.vb: Func(Of TSource, T)
  fullName.vb: System.Func(Of TSource, T)
  name.vb: Func(Of TSource, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.IndexOf*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.IndexOf
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_IndexOf__1_
  name: IndexOf
  nameWithType: ReadOnlyListSelection<TSource, T>.IndexOf
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.IndexOf
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).IndexOf
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.indexof
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList{`0}.IndexOf(`0)
    name: IndexOf
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.indexof
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IList{`0}.IndexOf(`0)
    name: IndexOf
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.indexof
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.indexof
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.indexof
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.indexof
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Item*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.Item
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_Item_System_Int32_
  name: this
  nameWithType: ReadOnlyListSelection<TSource, T>.this
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.this
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).this[]
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).this[]
  name.vb: this[]
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: this[int]
  nameWithType: IList<T>.this[int]
  fullName: System.Collections.Generic.IList<T>.this[int]
  nameWithType.vb: IList(Of T).this[](Integer)
  fullName.vb: System.Collections.Generic.IList(Of T).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList{`0}.Item(System.Int32)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.item
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: this[int]
  nameWithType: IList<T>.this[int]
  fullName: System.Collections.Generic.IList<T>.this[int]
  nameWithType.vb: IList(Of T).this[](Integer)
  fullName.vb: System.Collections.Generic.IList(Of T).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1.item
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Add*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.Add
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_Add__1_
  name: Add
  nameWithType: ReadOnlyListSelection<TSource, T>.Add
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Add
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Add
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Clear*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.Clear
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_Clear
  name: Clear
  nameWithType: ReadOnlyListSelection<TSource, T>.Clear
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Clear
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Clear
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Contains*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.Contains
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_Contains__1_
  name: Contains
  nameWithType: ReadOnlyListSelection<TSource, T>.Contains
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Contains
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Contains
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.CopyTo*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.CopyTo
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_CopyTo__1___System_Int32_
  name: CopyTo
  nameWithType: ReadOnlyListSelection<TSource, T>.CopyTo
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.CopyTo
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).CopyTo
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Count*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.Count
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_Count
  name: Count
  nameWithType: ReadOnlyListSelection<TSource, T>.Count
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Count
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Count
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.IsReadOnly*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.IsReadOnly
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_IsReadOnly
  name: IsReadOnly
  nameWithType: ReadOnlyListSelection<TSource, T>.IsReadOnly
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.IsReadOnly
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).IsReadOnly
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.Remove*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.Remove
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_Remove__1_
  name: Remove
  nameWithType: ReadOnlyListSelection<TSource, T>.Remove
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.Remove
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).Remove
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.ReadOnlyListSelection`2.GetEnumerator*
  commentId: Overload:NMF.Collections.Generic.ReadOnlyListSelection`2.GetEnumerator
  href: NMF.Collections.Generic.ReadOnlyListSelection-2.html#NMF_Collections_Generic_ReadOnlyListSelection_2_GetEnumerator
  name: GetEnumerator
  nameWithType: ReadOnlyListSelection<TSource, T>.GetEnumerator
  fullName: NMF.Collections.Generic.ReadOnlyListSelection<TSource, T>.GetEnumerator
  nameWithType.vb: ReadOnlyListSelection(Of TSource, T).GetEnumerator
  fullName.vb: NMF.Collections.Generic.ReadOnlyListSelection(Of TSource, T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
