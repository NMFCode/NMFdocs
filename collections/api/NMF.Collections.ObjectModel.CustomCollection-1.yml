### YamlMime:ManagedReference
items:
- uid: NMF.Collections.ObjectModel.CustomCollection`1
  commentId: T:NMF.Collections.ObjectModel.CustomCollection`1
  id: CustomCollection`1
  parent: NMF.Collections.ObjectModel
  children:
  - NMF.Collections.ObjectModel.CustomCollection`1.#ctor(NMF.Expressions.IEnumerableExpression{`0})
  - NMF.Collections.ObjectModel.CustomCollection`1.Add(`0)
  - NMF.Collections.ObjectModel.CustomCollection`1.AsNotifiable
  - NMF.Collections.ObjectModel.CustomCollection`1.Clear
  - NMF.Collections.ObjectModel.CustomCollection`1.Contains(`0)
  - NMF.Collections.ObjectModel.CustomCollection`1.CopyTo(`0[],System.Int32)
  - NMF.Collections.ObjectModel.CustomCollection`1.Count
  - NMF.Collections.ObjectModel.CustomCollection`1.GetEnumerator
  - NMF.Collections.ObjectModel.CustomCollection`1.Inner
  - NMF.Collections.ObjectModel.CustomCollection`1.IsReadOnly
  - NMF.Collections.ObjectModel.CustomCollection`1.Remove(`0)
  langs:
  - csharp
  - vb
  name: CustomCollection<T>
  nameWithType: CustomCollection<T>
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>
  type: Class
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CustomCollection
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 12
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: 'public abstract class CustomCollection<T> : ICollectionExpression<T>, IEnumerableExpression<T>, IEnumerableExpression, ICollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
    content.vb: Public MustInherit Class CustomCollection(Of T) Implements ICollectionExpression(Of T), IEnumerableExpression(Of T), IEnumerableExpression, ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.ICollectionExpression{{T}}
  - NMF.Expressions.IEnumerableExpression{{T}}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: CustomCollection(Of T)
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T)
  name.vb: CustomCollection(Of T)
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Inner
  commentId: P:NMF.Collections.ObjectModel.CustomCollection`1.Inner
  id: Inner
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: Inner
  nameWithType: CustomCollection<T>.Inner
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Inner
  type: Property
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Inner
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 14
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public IEnumerableExpression<T> Inner { get; }
    parameters: []
    return:
      type: NMF.Expressions.IEnumerableExpression{{T}}
    content.vb: Public Property Inner As IEnumerableExpression(Of T)
  overload: NMF.Collections.ObjectModel.CustomCollection`1.Inner*
  nameWithType.vb: CustomCollection(Of T).Inner
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Inner
- uid: NMF.Collections.ObjectModel.CustomCollection`1.#ctor(NMF.Expressions.IEnumerableExpression{`0})
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.#ctor(NMF.Expressions.IEnumerableExpression{`0})
  id: '#ctor(NMF.Expressions.IEnumerableExpression{`0})'
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: CustomCollection(IEnumerableExpression<T>)
  nameWithType: CustomCollection<T>.CustomCollection(IEnumerableExpression<T>)
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.CustomCollection(NMF.Expressions.IEnumerableExpression<T>)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 16
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public CustomCollection(IEnumerableExpression<T> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.IEnumerableExpression{{T}}
    content.vb: Public Sub New(inner As IEnumerableExpression(Of T))
  overload: NMF.Collections.ObjectModel.CustomCollection`1.#ctor*
  nameWithType.vb: CustomCollection(Of T).New(IEnumerableExpression(Of T))
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).New(NMF.Expressions.IEnumerableExpression(Of T))
  name.vb: New(IEnumerableExpression(Of T))
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Count
  commentId: P:NMF.Collections.ObjectModel.CustomCollection`1.Count
  id: Count
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: CustomCollection<T>.Count
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Count
  type: Property
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 23
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NMF.Collections.ObjectModel.CustomCollection`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: CustomCollection(Of T).Count
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Count
- uid: NMF.Collections.ObjectModel.CustomCollection`1.IsReadOnly
  commentId: P:NMF.Collections.ObjectModel.CustomCollection`1.IsReadOnly
  id: IsReadOnly
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: CustomCollection<T>.IsReadOnly
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReadOnly
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 31
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: NMF.Collections.ObjectModel.CustomCollection`1.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: CustomCollection(Of T).IsReadOnly
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).IsReadOnly
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Add(`0)
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.Add(`0)
  id: Add(`0)
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: CustomCollection<T>.Add(T)
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 39
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public abstract void Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Public MustOverride Sub Add(item As T)
  overload: NMF.Collections.ObjectModel.CustomCollection`1.Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: CustomCollection(Of T).Add(T)
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Add(T)
- uid: NMF.Collections.ObjectModel.CustomCollection`1.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.AsNotifiable
  id: AsNotifiable
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: CustomCollection<T>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 41
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public INotifyCollection<T> AsNotifiable()
    return:
      type: NMF.Expressions.INotifyCollection{{T}}
    content.vb: Public Function AsNotifiable() As INotifyCollection(Of T)
  overload: NMF.Collections.ObjectModel.CustomCollection`1.AsNotifiable*
  implements:
  - NMF.Expressions.ICollectionExpression{{T}}.AsNotifiable
  nameWithType.vb: CustomCollection(Of T).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).AsNotifiable()
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Clear
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.Clear
  id: Clear
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: CustomCollection<T>.Clear()
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Clear()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 46
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public abstract void Clear()
    content.vb: Public MustOverride Sub Clear()
  overload: NMF.Collections.ObjectModel.CustomCollection`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: CustomCollection(Of T).Clear()
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Clear()
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Contains(`0)
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.Contains(`0)
  id: Contains(`0)
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: CustomCollection<T>.Contains(T)
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 48
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public virtual bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Overridable Function Contains(item As T) As Boolean
  overload: NMF.Collections.ObjectModel.CustomCollection`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: CustomCollection(Of T).Contains(T)
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Contains(T)
- uid: NMF.Collections.ObjectModel.CustomCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], int)
  nameWithType: CustomCollection<T>.CopyTo(T[], int)
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.CopyTo(T[], int)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 53
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: NMF.Collections.ObjectModel.CustomCollection`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: CustomCollection(Of T).CopyTo(T(), Integer)
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
- uid: NMF.Collections.ObjectModel.CustomCollection`1.GetEnumerator
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.GetEnumerator
  id: GetEnumerator
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: CustomCollection<T>.GetEnumerator()
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 62
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public Function GetEnumerator() As IEnumerator(Of T)
  overload: NMF.Collections.ObjectModel.CustomCollection`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: CustomCollection(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).GetEnumerator()
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Remove(`0)
  commentId: M:NMF.Collections.ObjectModel.CustomCollection`1.Remove(`0)
  id: Remove(`0)
  parent: NMF.Collections.ObjectModel.CustomCollection`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: CustomCollection<T>.Remove(T)
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/CustomCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Collections/Collections/ObjectModel/CustomCollection.cs
    startLine: 67
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public abstract bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Remove(item As T) As Boolean
  overload: NMF.Collections.ObjectModel.CustomCollection`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: CustomCollection(Of T).Remove(T)
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Remove(T)
references:
- uid: NMF.Collections.ObjectModel
  commentId: N:NMF.Collections.ObjectModel
  name: NMF.Collections.ObjectModel
  nameWithType: NMF.Collections.ObjectModel
  fullName: NMF.Collections.ObjectModel
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Expressions.ICollectionExpression{{T}}
  commentId: T:NMF.Expressions.ICollectionExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression{{T}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Inner*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.Inner
  name: Inner
  nameWithType: CustomCollection<T>.Inner
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Inner
  nameWithType.vb: CustomCollection(Of T).Inner
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Inner
- uid: NMF.Collections.ObjectModel.CustomCollection`1.#ctor*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.#ctor
  name: CustomCollection
  nameWithType: CustomCollection<T>.CustomCollection
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.CustomCollection
  nameWithType.vb: CustomCollection(Of T).New
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).New
  name.vb: New
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Count*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.Count
  name: Count
  nameWithType: CustomCollection<T>.Count
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Count
  nameWithType.vb: CustomCollection(Of T).Count
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Collections.ObjectModel.CustomCollection`1.IsReadOnly*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: CustomCollection<T>.IsReadOnly
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.IsReadOnly
  nameWithType.vb: CustomCollection(Of T).IsReadOnly
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Add*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.Add
  name: Add
  nameWithType: CustomCollection<T>.Add
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Add
  nameWithType.vb: CustomCollection(Of T).Add
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.ObjectModel.CustomCollection`1.AsNotifiable*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.AsNotifiable
  name: AsNotifiable
  nameWithType: CustomCollection<T>.AsNotifiable
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.AsNotifiable
  nameWithType.vb: CustomCollection(Of T).AsNotifiable
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).AsNotifiable
- uid: NMF.Expressions.ICollectionExpression{{T}}.AsNotifiable
  commentId: M:NMF.Expressions.ICollectionExpression{`0}.AsNotifiable
  parent: NMF.Expressions.ICollectionExpression{{T}}
  definition: NMF.Expressions.ICollectionExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ICollectionExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable()
  nameWithType.vb: ICollectionExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression{`0}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression{`0}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Expressions.INotifyCollection{{T}}
  commentId: T:NMF.Expressions.INotifyCollection{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.ICollectionExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ICollectionExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.ICollectionExpression<T>.AsNotifiable()
  nameWithType.vb: ICollectionExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Expressions.INotifyCollection`1
  commentId: T:NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Clear*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.Clear
  name: Clear
  nameWithType: CustomCollection<T>.Clear
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Clear
  nameWithType.vb: CustomCollection(Of T).Clear
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Contains*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.Contains
  name: Contains
  nameWithType: CustomCollection<T>.Contains
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Contains
  nameWithType.vb: CustomCollection(Of T).Contains
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.CustomCollection`1.CopyTo*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.CopyTo
  name: CopyTo
  nameWithType: CustomCollection<T>.CopyTo
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.CopyTo
  nameWithType.vb: CustomCollection(Of T).CopyTo
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.CustomCollection`1.GetEnumerator*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.GetEnumerator
  name: GetEnumerator
  nameWithType: CustomCollection<T>.GetEnumerator
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.GetEnumerator
  nameWithType.vb: CustomCollection(Of T).GetEnumerator
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.CustomCollection`1.Remove*
  commentId: Overload:NMF.Collections.ObjectModel.CustomCollection`1.Remove
  name: Remove
  nameWithType: CustomCollection<T>.Remove
  fullName: NMF.Collections.ObjectModel.CustomCollection<T>.Remove
  nameWithType.vb: CustomCollection(Of T).Remove
  fullName.vb: NMF.Collections.ObjectModel.CustomCollection(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{`0}.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
