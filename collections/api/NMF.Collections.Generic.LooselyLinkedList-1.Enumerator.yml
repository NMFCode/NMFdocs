### YamlMime:ManagedReference
items:
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  commentId: T:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  id: LooselyLinkedList`1.Enumerator
  parent: NMF.Collections.Generic
  children:
  - NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.#ctor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  - NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Current
  - NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Dispose
  - NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.MoveNext
  - NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Reset
  - NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  - vb
  name: LooselyLinkedList<T>.Enumerator
  nameWithType: LooselyLinkedList<T>.Enumerator
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator
  type: Class
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Enumerator
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 171
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: 'public class Enumerator : IEnumerator<T>, IDisposable, IEnumerator'
    content.vb: >-
      Public Class Enumerator

          Implements IEnumerator(Of T), IDisposable, IEnumerator
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator{{T}}
  - System.IDisposable
  - System.Collections.IEnumerator
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator
  name.vb: LooselyLinkedList(Of T).Enumerator
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.#ctor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.#ctor(NMF.Collections.Generic.LooselyLinkedListNode{`0})
  id: '#ctor(NMF.Collections.Generic.LooselyLinkedListNode{`0})'
  parent: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  langs:
  - csharp
  - vb
  name: Enumerator(LooselyLinkedListNode<T>)
  nameWithType: LooselyLinkedList<T>.Enumerator.Enumerator(LooselyLinkedListNode<T>)
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Enumerator(NMF.Collections.Generic.LooselyLinkedListNode<T>)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 176
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public Enumerator(LooselyLinkedListNode<T> first)
    parameters:
    - id: first
      type: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
    content.vb: Public Sub New(first As LooselyLinkedListNode(Of T))
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.#ctor*
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Enumerator(LooselyLinkedListNode(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Enumerator(NMF.Collections.Generic.LooselyLinkedListNode(Of T))
  name.vb: Enumerator(LooselyLinkedListNode(Of T))
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Current
  commentId: P:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Current
  id: Current
  parent: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: LooselyLinkedList<T>.Enumerator.Current
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Current
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Current
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 182
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public T Current { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Current As T
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Current*
  implements:
  - System.Collections.Generic.IEnumerator{{T}}.Current
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Current
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.System#Collections#IEnumerator#Current
  commentId: P:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  nameWithType: LooselyLinkedList<T>.Enumerator.IEnumerator.Current
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerator.Current
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 190
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: object IEnumerator.Current { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.System#Collections#IEnumerator#Current*
  implements:
  - System.Collections.IEnumerator.Current
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Dispose
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Dispose
  id: Dispose
  parent: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: LooselyLinkedList<T>.Enumerator.Dispose()
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Dispose()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 198
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Dispose()
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.MoveNext
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.MoveNext
  id: MoveNext
  parent: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: LooselyLinkedList<T>.Enumerator.MoveNext()
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.MoveNext()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MoveNext
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 200
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
    content.vb: Public Function MoveNext As Boolean
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.MoveNext*
  implements:
  - System.Collections.IEnumerator.MoveNext
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.MoveNext()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.MoveNext()
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Reset
  commentId: M:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Reset
  id: Reset
  parent: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: LooselyLinkedList<T>.Enumerator.Reset()
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Reset()
  type: Method
  source:
    remote:
      path: Collections/Collections/Generic/LooselyLinkedListNode.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Reset
    path: src/Collections/Collections/Generic/LooselyLinkedListNode.cs
    startLine: 206
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.Generic
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Reset*
  implements:
  - System.Collections.IEnumerator.Reset
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Reset()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Reset()
references:
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.#ctor*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.#ctor
  name: Enumerator
  nameWithType: LooselyLinkedList<T>.Enumerator.Enumerator
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Enumerator
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Enumerator
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Enumerator
- uid: NMF.Collections.Generic.LooselyLinkedListNode{{T}}
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode{`0}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.LooselyLinkedListNode`1
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  nameWithType.vb: LooselyLinkedListNode(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    nameWithType: LooselyLinkedListNode
    fullName: NMF.Collections.Generic.LooselyLinkedListNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    nameWithType: LooselyLinkedListNode
    fullName: NMF.Collections.Generic.LooselyLinkedListNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.LooselyLinkedListNode`1
  commentId: T:NMF.Collections.Generic.LooselyLinkedListNode`1
  parent: NMF.Collections.Generic
  name: LooselyLinkedListNode<T>
  nameWithType: LooselyLinkedListNode<T>
  fullName: NMF.Collections.Generic.LooselyLinkedListNode<T>
  nameWithType.vb: LooselyLinkedListNode(Of T)
  fullName.vb: NMF.Collections.Generic.LooselyLinkedListNode(Of T)
  name.vb: LooselyLinkedListNode(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    nameWithType: LooselyLinkedListNode
    fullName: NMF.Collections.Generic.LooselyLinkedListNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode
    nameWithType: LooselyLinkedListNode
    fullName: NMF.Collections.Generic.LooselyLinkedListNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Current*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Current
  name: Current
  nameWithType: LooselyLinkedList<T>.Enumerator.Current
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Current
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Current
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Current
- uid: System.Collections.Generic.IEnumerator{{T}}.Current
  commentId: P:System.Collections.Generic.IEnumerator{`0}.Current
  parent: System.Collections.Generic.IEnumerator{{T}}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.System#Collections#IEnumerator#Current*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.System#Collections#IEnumerator#Current
  name: IEnumerator.Current
  nameWithType: LooselyLinkedList<T>.Enumerator.IEnumerator.Current
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.System.Collections.IEnumerator.Current
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.System.Collections.IEnumerator.Current
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Current
  nameWithType: IEnumerator.Current
  fullName: System.Collections.IEnumerator.Current
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Dispose*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Dispose
  name: Dispose
  nameWithType: LooselyLinkedList<T>.Enumerator.Dispose
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Dispose
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Dispose
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.MoveNext*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.MoveNext
  name: MoveNext
  nameWithType: LooselyLinkedList<T>.Enumerator.MoveNext
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.MoveNext
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.MoveNext
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.MoveNext
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Reset*
  commentId: Overload:NMF.Collections.Generic.LooselyLinkedList`1.Enumerator.Reset
  name: Reset
  nameWithType: LooselyLinkedList<T>.Enumerator.Reset
  fullName: NMF.Collections.Generic.LooselyLinkedList<T>.Enumerator.Reset
  nameWithType.vb: LooselyLinkedList(Of T).Enumerator.Reset
  fullName.vb: NMF.Collections.Generic.LooselyLinkedList(Of T).Enumerator.Reset
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
