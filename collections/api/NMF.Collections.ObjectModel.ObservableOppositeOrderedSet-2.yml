### YamlMime:ManagedReference
items:
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  commentId: T:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  id: ObservableOppositeOrderedSet`2
  parent: NMF.Collections.ObjectModel
  children:
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.#ctor(`0)
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Add(`1)
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Clear
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Insert(System.Int32,`1)
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Parent
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Remove(`1,System.Int32)
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Replace(System.Int32,`1,`1)
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.SetOpposite(`1,`0)
  - NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.ToString
  langs:
  - csharp
  - vb
  name: ObservableOppositeOrderedSet<TParent, TCollected>
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>
  type: Class
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableOppositeOrderedSet
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 10
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: 'public abstract class ObservableOppositeOrderedSet<TParent, TCollected> : ObservableOrderedSet<TCollected>, INotifyCollectionChanged, INotifyCollectionChanging, INotifyPropertyChanged, IOrderedSetExpression<TCollected>, IListExpression<TCollected>, ISetExpression<TCollected>, ICollectionExpression<TCollected>, IEnumerableExpression<TCollected>, IOrderedSet<TCollected>, IList<TCollected>, ISet<TCollected>, ICollection<TCollected>, IEnumerable<TCollected>, ICollectionExpression, IEnumerableExpression, IList, ICollection, IEnumerable'
    typeParameters:
    - id: TParent
    - id: TCollected
    content.vb: Public MustInherit Class ObservableOppositeOrderedSet(Of TParent, TCollected) Inherits ObservableOrderedSet(Of TCollected) Implements INotifyCollectionChanged, INotifyCollectionChanging, INotifyPropertyChanged, IOrderedSetExpression(Of TCollected), IListExpression(Of TCollected), ISetExpression(Of TCollected), ICollectionExpression(Of TCollected), IEnumerableExpression(Of TCollected), IOrderedSet(Of TCollected), IList(Of TCollected), ISet(Of TCollected), ICollection(Of TCollected), IEnumerable(Of TCollected), ICollectionExpression, IEnumerableExpression, IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}
  - NMF.Collections.Generic.OrderedSet{{TCollected}}
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Collections.ObjectModel.INotifyCollectionChanging
  - System.ComponentModel.INotifyPropertyChanged
  - NMF.Collections.Generic.IOrderedSetExpression{{TCollected}}
  - NMF.Expressions.IListExpression{{TCollected}}
  - NMF.Expressions.ISetExpression{{TCollected}}
  - NMF.Expressions.ICollectionExpression{{TCollected}}
  - NMF.Expressions.IEnumerableExpression{{TCollected}}
  - NMF.Collections.Generic.IOrderedSet{{TCollected}}
  - System.Collections.Generic.IList{{TCollected}}
  - System.Collections.Generic.ISet{{TCollected}}
  - System.Collections.Generic.ICollection{{TCollected}}
  - System.Collections.Generic.IEnumerable{{TCollected}}
  - NMF.Expressions.ICollectionExpression
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.OnPropertyChanged(System.String)
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.CollectionChanged
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.CollectionChanging
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.PropertyChanged
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.AsNotifiable
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.RequireEvents
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentAdd({TCollected})
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentInsert(System.Int32,{TCollected})
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentClear
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentRemove({TCollected},System.Int32)
  - NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentReplace(System.Int32,{TCollected},{TCollected})
  - NMF.Collections.Generic.OrderedSet{{TCollected}}.Remove({TCollected})
  - NMF.Collections.Generic.OrderedSet{{TCollected}}.GetEnumerator
  - NMF.Collections.Generic.OrderedSet{{TCollected}}.IndexOf({TCollected})
  - NMF.Collections.Generic.OrderedSet{{TCollected}}.RemoveAt(System.Int32)
  - NMF.Collections.Generic.OrderedSet{{TCollected}}.Item(System.Int32)
  - NMF.Collections.Generic.OrderedSet{{TCollected}}.AsReadOnly
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Items
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.ExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IntersectWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Overlaps(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.SetEquals(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.UnionWith(System.Collections.Generic.IEnumerable{{TCollected}})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Contains({TCollected})
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.CopyTo({TCollected}[],System.Int32)
  - NMF.Collections.Generic.DecoratedSet{{TCollected}}.Count
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected)
  name.vb: ObservableOppositeOrderedSet(Of TParent, TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Parent
  commentId: P:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Parent
  id: Parent
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Parent
  type: Property
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Parent
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 12
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public TParent Parent { get; }
    parameters: []
    return:
      type: '{TParent}'
    content.vb: Public Property Parent As TParent
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Parent*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Parent
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Parent
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.SetOpposite(`1,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.SetOpposite(`1,`0)
  id: SetOpposite(`1,`0)
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: SetOpposite(TCollected, TParent)
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.SetOpposite(TCollected, TParent)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.SetOpposite(TCollected, TParent)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetOpposite
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 14
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected abstract void SetOpposite(TCollected item, TParent newParent)
    parameters:
    - id: item
      type: '{TCollected}'
    - id: newParent
      type: '{TParent}'
    content.vb: Protected MustOverride Sub SetOpposite(item As TCollected, newParent As TParent)
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.SetOpposite*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).SetOpposite(TCollected, TParent)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).SetOpposite(TCollected, TParent)
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.#ctor(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.#ctor(`0)
  id: '#ctor(`0)'
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: ObservableOppositeOrderedSet(TParent)
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.ObservableOppositeOrderedSet(TParent)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.ObservableOppositeOrderedSet(TParent)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 16
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected ObservableOppositeOrderedSet(TParent parent)
    parameters:
    - id: parent
      type: '{TParent}'
    content.vb: Protected Sub New(parent As TParent)
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.#ctor*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).New(TParent)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).New(TParent)
  name.vb: New(TParent)
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Clear
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Clear
  id: Clear
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Clear()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Clear()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 23
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear()
  overridden: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Clear
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Clear*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Clear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Clear()
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Add(`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Add(`1)
  id: Add(`1)
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: Add(TCollected)
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Add(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Add(TCollected)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 60
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override bool Add(TCollected item)
    parameters:
    - id: item
      type: '{TCollected}'
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Add(item As TCollected) As Boolean
  overridden: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Add({TCollected})
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Add*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Add(TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Add(TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Insert(System.Int32,`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Insert(System.Int32,`1)
  id: Insert(System.Int32,`1)
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: Insert(int, TCollected)
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Insert(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Insert(int, TCollected)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Insert
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 98
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override void Insert(int index, TCollected item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{TCollected}'
    content.vb: Public Overrides Sub Insert(index As Integer, item As TCollected)
  overridden: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Insert(System.Int32,{TCollected})
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Insert*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Insert(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Insert(Integer, TCollected)
  name.vb: Insert(Integer, TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Remove(`1,System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Remove(`1,System.Int32)
  id: Remove(`1,System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: Remove(TCollected, int)
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Remove(TCollected, int)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Remove(TCollected, int)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 115
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected override bool Remove(TCollected item, int index)
    parameters:
    - id: item
      type: '{TCollected}'
    - id: index
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function Remove(item As TCollected, index As Integer) As Boolean
  overridden: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Remove({TCollected},System.Int32)
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Remove*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Remove(TCollected, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Remove(TCollected, Integer)
  name.vb: Remove(TCollected, Integer)
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Replace(System.Int32,`1,`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Replace(System.Int32,`1,`1)
  id: Replace(System.Int32,`1,`1)
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: Replace(int, TCollected, TCollected)
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Replace(int, TCollected, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Replace(int, TCollected, TCollected)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Replace
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 153
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected override void Replace(int index, TCollected oldValue, TCollected newValue)
    parameters:
    - id: index
      type: System.Int32
    - id: oldValue
      type: '{TCollected}'
    - id: newValue
      type: '{TCollected}'
    content.vb: Protected Overrides Sub Replace(index As Integer, oldValue As TCollected, newValue As TCollected)
  overridden: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Replace(System.Int32,{TCollected},{TCollected})
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Replace*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Replace(Integer, TCollected, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Replace(Integer, TCollected, TCollected)
  name.vb: Replace(Integer, TCollected, TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.ToString
  id: ToString
  parent: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.ToString()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToString
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 188
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.ToString
  overload: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.ToString*
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).ToString()
references:
- uid: NMF.Collections.ObjectModel
  commentId: N:NMF.Collections.ObjectModel
  name: NMF.Collections.ObjectModel
  nameWithType: NMF.Collections.ObjectModel
  fullName: NMF.Collections.ObjectModel
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  commentId: T:NMF.Collections.Generic.DecoratedSet{`1}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<TCollected>
  nameWithType: DecoratedSet<TCollected>
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>
  nameWithType.vb: DecoratedSet(Of TCollected)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected)
  name.vb: DecoratedSet(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{TCollected}}
  commentId: T:NMF.Collections.Generic.OrderedSet{`1}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.OrderedSet`1
  name: OrderedSet<TCollected>
  nameWithType: OrderedSet<TCollected>
  fullName: NMF.Collections.Generic.OrderedSet<TCollected>
  nameWithType.vb: OrderedSet(Of TCollected)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of TCollected)
  name.vb: OrderedSet(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  commentId: T:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}
  parent: NMF.Collections.ObjectModel
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1
  name: ObservableOrderedSet<TCollected>
  nameWithType: ObservableOrderedSet<TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>
  nameWithType.vb: ObservableOrderedSet(Of TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected)
  name.vb: ObservableOrderedSet(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1
    name: ObservableOrderedSet
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1
    name: ObservableOrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Collections.ObjectModel.INotifyCollectionChanging
  commentId: T:NMF.Collections.ObjectModel.INotifyCollectionChanging
  parent: NMF.Collections.ObjectModel
  name: INotifyCollectionChanging
  nameWithType: INotifyCollectionChanging
  fullName: NMF.Collections.ObjectModel.INotifyCollectionChanging
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: NMF.Collections.Generic.IOrderedSetExpression{{TCollected}}
  commentId: T:NMF.Collections.Generic.IOrderedSetExpression{`1}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.IOrderedSetExpression`1
  name: IOrderedSetExpression<TCollected>
  nameWithType: IOrderedSetExpression<TCollected>
  fullName: NMF.Collections.Generic.IOrderedSetExpression<TCollected>
  nameWithType.vb: IOrderedSetExpression(Of TCollected)
  fullName.vb: NMF.Collections.Generic.IOrderedSetExpression(Of TCollected)
  name.vb: IOrderedSetExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSetExpression`1
    name: IOrderedSetExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSetExpression`1
    name: IOrderedSetExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.IListExpression{{TCollected}}
  commentId: T:NMF.Expressions.IListExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IListExpression`1
  name: IListExpression<TCollected>
  nameWithType: IListExpression<TCollected>
  fullName: NMF.Expressions.IListExpression<TCollected>
  nameWithType.vb: IListExpression(Of TCollected)
  fullName.vb: NMF.Expressions.IListExpression(Of TCollected)
  name.vb: IListExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.ISetExpression{{TCollected}}
  commentId: T:NMF.Expressions.ISetExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ISetExpression`1
  name: ISetExpression<TCollected>
  nameWithType: ISetExpression<TCollected>
  fullName: NMF.Expressions.ISetExpression<TCollected>
  nameWithType.vb: ISetExpression(Of TCollected)
  fullName.vb: NMF.Expressions.ISetExpression(Of TCollected)
  name.vb: ISetExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.ICollectionExpression{{TCollected}}
  commentId: T:NMF.Expressions.ICollectionExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<TCollected>
  nameWithType: ICollectionExpression<TCollected>
  fullName: NMF.Expressions.ICollectionExpression<TCollected>
  nameWithType.vb: ICollectionExpression(Of TCollected)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of TCollected)
  name.vb: ICollectionExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.IEnumerableExpression{{TCollected}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TCollected>
  nameWithType: IEnumerableExpression<TCollected>
  fullName: NMF.Expressions.IEnumerableExpression<TCollected>
  nameWithType.vb: IEnumerableExpression(Of TCollected)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TCollected)
  name.vb: IEnumerableExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.Generic.IOrderedSet{{TCollected}}
  commentId: T:NMF.Collections.Generic.IOrderedSet{`1}
  parent: NMF.Collections.Generic
  definition: NMF.Collections.Generic.IOrderedSet`1
  name: IOrderedSet<TCollected>
  nameWithType: IOrderedSet<TCollected>
  fullName: NMF.Collections.Generic.IOrderedSet<TCollected>
  nameWithType.vb: IOrderedSet(Of TCollected)
  fullName.vb: NMF.Collections.Generic.IOrderedSet(Of TCollected)
  name.vb: IOrderedSet(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.IList{{TCollected}}
  commentId: T:System.Collections.Generic.IList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TCollected>
  nameWithType: IList<TCollected>
  fullName: System.Collections.Generic.IList<TCollected>
  nameWithType.vb: IList(Of TCollected)
  fullName.vb: System.Collections.Generic.IList(Of TCollected)
  name.vb: IList(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.ISet{{TCollected}}
  commentId: T:System.Collections.Generic.ISet{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<TCollected>
  nameWithType: ISet<TCollected>
  fullName: System.Collections.Generic.ISet<TCollected>
  nameWithType.vb: ISet(Of TCollected)
  fullName.vb: System.Collections.Generic.ISet(Of TCollected)
  name.vb: ISet(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.ICollection{{TCollected}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TCollected>
  nameWithType: ICollection<TCollected>
  fullName: System.Collections.Generic.ICollection<TCollected>
  nameWithType.vb: ICollection(Of TCollected)
  fullName.vb: System.Collections.Generic.ICollection(Of TCollected)
  name.vb: ICollection(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TCollected}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TCollected>
  nameWithType: IEnumerable<TCollected>
  fullName: System.Collections.Generic.IEnumerable<TCollected>
  nameWithType.vb: IEnumerable(Of TCollected)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCollected)
  name.vb: IEnumerable(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.ICollectionExpression
  commentId: T:NMF.Expressions.ICollectionExpression
  parent: NMF.Expressions
  name: ICollectionExpression
  nameWithType: ICollectionExpression
  fullName: NMF.Expressions.ICollectionExpression
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.OnPropertyChanged(System.String)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnPropertyChanged(System.String)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnPropertyChanged(System.String)
  name: OnPropertyChanged(string)
  nameWithType: ObservableOrderedSet<TCollected>.OnPropertyChanged(string)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.OnPropertyChanged(string)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).OnPropertyChanged(String)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).OnPropertyChanged(String)
  name.vb: OnPropertyChanged(String)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnPropertyChanged(System.String)
    name: OnPropertyChanged
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnPropertyChanged(System.String)
    name: OnPropertyChanged
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableOrderedSet<TCollected>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableOrderedSet<TCollected>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.CollectionChanged
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableOrderedSet<TCollected>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.CollectionChanged
  nameWithType.vb: ObservableOrderedSet(Of TCollected).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.CollectionChanging
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableOrderedSet<TCollected>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.CollectionChanging
  nameWithType.vb: ObservableOrderedSet(Of TCollected).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.PropertyChanged
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableOrderedSet<TCollected>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.PropertyChanged
  nameWithType.vb: ObservableOrderedSet(Of TCollected).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.AsNotifiable
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableOrderedSet<TCollected>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.AsNotifiable()
  nameWithType.vb: ObservableOrderedSet(Of TCollected).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.RequireEvents
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableOrderedSet<TCollected>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.RequireEvents()
  nameWithType.vb: ObservableOrderedSet(Of TCollected).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentAdd({TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentAdd(`1)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentAdd(`0)
  name: SilentAdd(TCollected)
  nameWithType: ObservableOrderedSet<TCollected>.SilentAdd(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.SilentAdd(TCollected)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).SilentAdd(TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).SilentAdd(TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentAdd(`1)
    name: SilentAdd
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentAdd(`1)
    name: SilentAdd
  - name: (
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentInsert(System.Int32,{TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentInsert(System.Int32,`1)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentInsert(System.Int32,`0)
  name: SilentInsert(int, TCollected)
  nameWithType: ObservableOrderedSet<TCollected>.SilentInsert(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.SilentInsert(int, TCollected)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).SilentInsert(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).SilentInsert(Integer, TCollected)
  name.vb: SilentInsert(Integer, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentInsert(System.Int32,`1)
    name: SilentInsert
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentInsert(System.Int32,`1)
    name: SilentInsert
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentClear
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentClear
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentClear
  name: SilentClear()
  nameWithType: ObservableOrderedSet<TCollected>.SilentClear()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.SilentClear()
  nameWithType.vb: ObservableOrderedSet(Of TCollected).SilentClear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).SilentClear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentClear
    name: SilentClear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentClear
    name: SilentClear
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentRemove({TCollected},System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentRemove(`1,System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentRemove(`0,System.Int32)
  name: SilentRemove(TCollected, int)
  nameWithType: ObservableOrderedSet<TCollected>.SilentRemove(TCollected, int)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.SilentRemove(TCollected, int)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).SilentRemove(TCollected, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).SilentRemove(TCollected, Integer)
  name.vb: SilentRemove(TCollected, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentRemove(`1,System.Int32)
    name: SilentRemove
  - name: (
  - name: TCollected
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentRemove(`1,System.Int32)
    name: SilentRemove
  - name: (
  - name: TCollected
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.SilentReplace(System.Int32,{TCollected},{TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentReplace(System.Int32,`1,`1)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentReplace(System.Int32,`0,`0)
  name: SilentReplace(int, TCollected, TCollected)
  nameWithType: ObservableOrderedSet<TCollected>.SilentReplace(int, TCollected, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.SilentReplace(int, TCollected, TCollected)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).SilentReplace(Integer, TCollected, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).SilentReplace(Integer, TCollected, TCollected)
  name.vb: SilentReplace(Integer, TCollected, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentReplace(System.Int32,`1,`1)
    name: SilentReplace
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.SilentReplace(System.Int32,`1,`1)
    name: SilentReplace
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{TCollected}}.Remove({TCollected})
  commentId: M:NMF.Collections.Generic.OrderedSet{`1}.Remove(`1)
  parent: NMF.Collections.Generic.OrderedSet{{TCollected}}
  definition: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
  name: Remove(TCollected)
  nameWithType: OrderedSet<TCollected>.Remove(TCollected)
  fullName: NMF.Collections.Generic.OrderedSet<TCollected>.Remove(TCollected)
  nameWithType.vb: OrderedSet(Of TCollected).Remove(TCollected)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of TCollected).Remove(TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.Remove(`1)
    name: Remove
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.Remove(`1)
    name: Remove
  - name: (
  - name: TCollected
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{TCollected}}.GetEnumerator
  commentId: M:NMF.Collections.Generic.OrderedSet{`1}.GetEnumerator
  parent: NMF.Collections.Generic.OrderedSet{{TCollected}}
  definition: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: OrderedSet<TCollected>.GetEnumerator()
  fullName: NMF.Collections.Generic.OrderedSet<TCollected>.GetEnumerator()
  nameWithType.vb: OrderedSet(Of TCollected).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of TCollected).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{TCollected}}.IndexOf({TCollected})
  commentId: M:NMF.Collections.Generic.OrderedSet{`1}.IndexOf(`1)
  parent: NMF.Collections.Generic.OrderedSet{{TCollected}}
  definition: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
  name: IndexOf(TCollected)
  nameWithType: OrderedSet<TCollected>.IndexOf(TCollected)
  fullName: NMF.Collections.Generic.OrderedSet<TCollected>.IndexOf(TCollected)
  nameWithType.vb: OrderedSet(Of TCollected).IndexOf(TCollected)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of TCollected).IndexOf(TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.IndexOf(`1)
    name: IndexOf
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.IndexOf(`1)
    name: IndexOf
  - name: (
  - name: TCollected
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{TCollected}}.RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.OrderedSet{`1}.RemoveAt(System.Int32)
  parent: NMF.Collections.Generic.OrderedSet{{TCollected}}
  definition: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
  name: RemoveAt(int)
  nameWithType: OrderedSet<TCollected>.RemoveAt(int)
  fullName: NMF.Collections.Generic.OrderedSet<TCollected>.RemoveAt(int)
  nameWithType.vb: OrderedSet(Of TCollected).RemoveAt(Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of TCollected).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{TCollected}}.Item(System.Int32)
  commentId: P:NMF.Collections.Generic.OrderedSet{`1}.Item(System.Int32)
  parent: NMF.Collections.Generic.OrderedSet{{TCollected}}
  definition: NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
  name: this[int]
  nameWithType: OrderedSet<TCollected>.this[int]
  fullName: NMF.Collections.Generic.OrderedSet<TCollected>.this[int]
  nameWithType.vb: OrderedSet(Of TCollected).this[](Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of TCollected).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.Item(System.Int32)
    name: this[]
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet{{TCollected}}.AsReadOnly
  commentId: M:NMF.Collections.Generic.OrderedSet{`1}.AsReadOnly
  parent: NMF.Collections.Generic.OrderedSet{{TCollected}}
  definition: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: OrderedSet<TCollected>.AsReadOnly()
  fullName: NMF.Collections.Generic.OrderedSet<TCollected>.AsReadOnly()
  nameWithType.vb: OrderedSet(Of TCollected).AsReadOnly()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of TCollected).AsReadOnly()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet{`1}.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.Items
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<TCollected>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Items
  nameWithType.vb: DecoratedSet(Of TCollected).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Items
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.ExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.ExceptWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: ExceptWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.ExceptWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.ExceptWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).ExceptWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).ExceptWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: ExceptWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.ExceptWith(System.Collections.Generic.IEnumerable{`1})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.ExceptWith(System.Collections.Generic.IEnumerable{`1})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IntersectWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IntersectWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  name: IntersectWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IntersectWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IntersectWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IntersectWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IntersectWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IntersectWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IntersectWith(System.Collections.Generic.IEnumerable{`1})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IntersectWith(System.Collections.Generic.IEnumerable{`1})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSubsetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsProperSubsetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsProperSubsetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsProperSubsetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsProperSupersetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsProperSupersetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsProperSupersetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsProperSupersetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSubsetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsSubsetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSubsetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsSubsetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsSubsetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsSubsetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsSubsetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsSubsetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsSubsetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsSubsetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.IsSupersetOf(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.IsSupersetOf(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  name: IsSupersetOf(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.IsSupersetOf(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.IsSupersetOf(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).IsSupersetOf(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).IsSupersetOf(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: IsSupersetOf(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsSupersetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.IsSupersetOf(System.Collections.Generic.IEnumerable{`1})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Overlaps(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.Overlaps(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  name: Overlaps(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.Overlaps(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Overlaps(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).Overlaps(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Overlaps(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: Overlaps(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.Overlaps(System.Collections.Generic.IEnumerable{`1})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.Overlaps(System.Collections.Generic.IEnumerable{`1})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.SetEquals(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.SetEquals(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  name: SetEquals(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.SetEquals(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.SetEquals(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).SetEquals(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).SetEquals(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: SetEquals(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.SetEquals(System.Collections.Generic.IEnumerable{`1})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.SetEquals(System.Collections.Generic.IEnumerable{`1})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  name: SymmetricExceptWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.SymmetricExceptWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).SymmetricExceptWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: SymmetricExceptWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`1})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`1})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.UnionWith(System.Collections.Generic.IEnumerable{{TCollected}})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.UnionWith(System.Collections.Generic.IEnumerable{`1})
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  name: UnionWith(IEnumerable<TCollected>)
  nameWithType: DecoratedSet<TCollected>.UnionWith(IEnumerable<TCollected>)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.UnionWith(System.Collections.Generic.IEnumerable<TCollected>)
  nameWithType.vb: DecoratedSet(Of TCollected).UnionWith(IEnumerable(Of TCollected))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).UnionWith(System.Collections.Generic.IEnumerable(Of TCollected))
  name.vb: UnionWith(IEnumerable(Of TCollected))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.UnionWith(System.Collections.Generic.IEnumerable{`1})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.UnionWith(System.Collections.Generic.IEnumerable{`1})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Contains({TCollected})
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.Contains(`1)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(TCollected)
  nameWithType: DecoratedSet<TCollected>.Contains(TCollected)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Contains(TCollected)
  nameWithType.vb: DecoratedSet(Of TCollected).Contains(TCollected)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Contains(TCollected)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.Contains(`1)
    name: Contains
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.Contains(`1)
    name: Contains
  - name: (
  - name: TCollected
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.CopyTo({TCollected}[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet{`1}.CopyTo(`1[],System.Int32)
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TCollected[], int)
  nameWithType: DecoratedSet<TCollected>.CopyTo(TCollected[], int)
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.CopyTo(TCollected[], int)
  nameWithType.vb: DecoratedSet(Of TCollected).CopyTo(TCollected(), Integer)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).CopyTo(TCollected(), Integer)
  name.vb: CopyTo(TCollected(), Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.CopyTo(`1[],System.Int32)
    name: CopyTo
  - name: (
  - name: TCollected
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet{`1}.CopyTo(`1[],System.Int32)
    name: CopyTo
  - name: (
  - name: TCollected
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet{{TCollected}}.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet{`1}.Count
  parent: NMF.Collections.Generic.DecoratedSet{{TCollected}}
  definition: NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<TCollected>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<TCollected>.Count
  nameWithType.vb: DecoratedSet(Of TCollected).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of TCollected).Count
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Collections.Generic.DecoratedSet`1
  commentId: T:NMF.Collections.Generic.DecoratedSet`1
  name: DecoratedSet<T>
  nameWithType: DecoratedSet<T>
  fullName: NMF.Collections.Generic.DecoratedSet<T>
  nameWithType.vb: DecoratedSet(Of T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T)
  name.vb: DecoratedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic
  commentId: N:NMF.Collections.Generic
  name: NMF.Collections.Generic
  nameWithType: NMF.Collections.Generic
  fullName: NMF.Collections.Generic
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.Generic
    name: Generic
- uid: NMF.Collections.Generic.OrderedSet`1
  commentId: T:NMF.Collections.Generic.OrderedSet`1
  name: OrderedSet<T>
  nameWithType: OrderedSet<T>
  fullName: NMF.Collections.Generic.OrderedSet<T>
  nameWithType.vb: OrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T)
  name.vb: OrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1
  commentId: T:NMF.Collections.ObjectModel.ObservableOrderedSet`1
  name: ObservableOrderedSet<T>
  nameWithType: ObservableOrderedSet<T>
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>
  nameWithType.vb: ObservableOrderedSet(Of T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T)
  name.vb: ObservableOrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1
    name: ObservableOrderedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1
    name: ObservableOrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
- uid: NMF.Collections.Generic.IOrderedSetExpression`1
  commentId: T:NMF.Collections.Generic.IOrderedSetExpression`1
  name: IOrderedSetExpression<T>
  nameWithType: IOrderedSetExpression<T>
  fullName: NMF.Collections.Generic.IOrderedSetExpression<T>
  nameWithType.vb: IOrderedSetExpression(Of T)
  fullName.vb: NMF.Collections.Generic.IOrderedSetExpression(Of T)
  name.vb: IOrderedSetExpression(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSetExpression`1
    name: IOrderedSetExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSetExpression`1
    name: IOrderedSetExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IListExpression`1
  commentId: T:NMF.Expressions.IListExpression`1
  name: IListExpression<T>
  nameWithType: IListExpression<T>
  fullName: NMF.Expressions.IListExpression<T>
  nameWithType.vb: IListExpression(Of T)
  fullName.vb: NMF.Expressions.IListExpression(Of T)
  name.vb: IListExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Expressions.ISetExpression`1
  commentId: T:NMF.Expressions.ISetExpression`1
  name: ISetExpression<T>
  nameWithType: ISetExpression<T>
  fullName: NMF.Expressions.ISetExpression<T>
  nameWithType.vb: ISetExpression(Of T)
  fullName.vb: NMF.Expressions.ISetExpression(Of T)
  name.vb: ISetExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.IOrderedSet`1
  commentId: T:NMF.Collections.Generic.IOrderedSet`1
  name: IOrderedSet<T>
  nameWithType: IOrderedSet<T>
  fullName: NMF.Collections.Generic.IOrderedSet<T>
  nameWithType.vb: IOrderedSet(Of T)
  fullName.vb: NMF.Collections.Generic.IOrderedSet(Of T)
  name.vb: IOrderedSet(Of T)
  spec.csharp:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullName.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnPropertyChanged(System.String)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnPropertyChanged(System.String)
  isExternal: true
  name: OnPropertyChanged(string)
  nameWithType: ObservableOrderedSet<T>.OnPropertyChanged(string)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.OnPropertyChanged(string)
  nameWithType.vb: ObservableOrderedSet(Of T).OnPropertyChanged(String)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).OnPropertyChanged(String)
  name.vb: OnPropertyChanged(String)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnPropertyChanged(System.String)
    name: OnPropertyChanged
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableOrderedSet<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableOrderedSet(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableOrderedSet<T>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableOrderedSet(Of T).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableOrderedSet`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableOrderedSet<T>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.CollectionChanged
  nameWithType.vb: ObservableOrderedSet(Of T).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableOrderedSet`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableOrderedSet<T>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.CollectionChanging
  nameWithType.vb: ObservableOrderedSet(Of T).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableOrderedSet`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableOrderedSet<T>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.PropertyChanged
  nameWithType.vb: ObservableOrderedSet(Of T).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableOrderedSet<T>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.AsNotifiable()
  nameWithType.vb: ObservableOrderedSet(Of T).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableOrderedSet<T>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.RequireEvents()
  nameWithType.vb: ObservableOrderedSet(Of T).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentAdd(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentAdd(`0)
  name: SilentAdd(T)
  nameWithType: ObservableOrderedSet<T>.SilentAdd(T)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.SilentAdd(T)
  nameWithType.vb: ObservableOrderedSet(Of T).SilentAdd(T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).SilentAdd(T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentAdd(`0)
    name: SilentAdd
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentAdd(`0)
    name: SilentAdd
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentInsert(System.Int32,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentInsert(System.Int32,`0)
  isExternal: true
  name: SilentInsert(int, T)
  nameWithType: ObservableOrderedSet<T>.SilentInsert(int, T)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.SilentInsert(int, T)
  nameWithType.vb: ObservableOrderedSet(Of T).SilentInsert(Integer, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).SilentInsert(Integer, T)
  name.vb: SilentInsert(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentInsert(System.Int32,`0)
    name: SilentInsert
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentInsert(System.Int32,`0)
    name: SilentInsert
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentClear
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentClear
  name: SilentClear()
  nameWithType: ObservableOrderedSet<T>.SilentClear()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.SilentClear()
  nameWithType.vb: ObservableOrderedSet(Of T).SilentClear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).SilentClear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentClear
    name: SilentClear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentClear
    name: SilentClear
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentRemove(`0,System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentRemove(`0,System.Int32)
  isExternal: true
  name: SilentRemove(T, int)
  nameWithType: ObservableOrderedSet<T>.SilentRemove(T, int)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.SilentRemove(T, int)
  nameWithType.vb: ObservableOrderedSet(Of T).SilentRemove(T, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).SilentRemove(T, Integer)
  name.vb: SilentRemove(T, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentRemove(`0,System.Int32)
    name: SilentRemove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentRemove(`0,System.Int32)
    name: SilentRemove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentReplace(System.Int32,`0,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentReplace(System.Int32,`0,`0)
  isExternal: true
  name: SilentReplace(int, T, T)
  nameWithType: ObservableOrderedSet<T>.SilentReplace(int, T, T)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.SilentReplace(int, T, T)
  nameWithType.vb: ObservableOrderedSet(Of T).SilentReplace(Integer, T, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).SilentReplace(Integer, T, T)
  name.vb: SilentReplace(Integer, T, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentReplace(System.Int32,`0,`0)
    name: SilentReplace
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.SilentReplace(System.Int32,`0,`0)
    name: SilentReplace
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.Remove(`0)
  name: Remove(T)
  nameWithType: OrderedSet<T>.Remove(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.Remove(T)
  nameWithType.vb: OrderedSet(Of T).Remove(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).Remove(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
  commentId: M:NMF.Collections.Generic.OrderedSet`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: OrderedSet<T>.GetEnumerator()
  fullName: NMF.Collections.Generic.OrderedSet<T>.GetEnumerator()
  nameWithType.vb: OrderedSet(Of T).GetEnumerator()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: OrderedSet<T>.IndexOf(T)
  fullName: NMF.Collections.Generic.OrderedSet<T>.IndexOf(T)
  nameWithType.vb: OrderedSet(Of T).IndexOf(T)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).IndexOf(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
    name: IndexOf
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.IndexOf(`0)
    name: IndexOf
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
  commentId: M:NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(int)
  nameWithType: OrderedSet<T>.RemoveAt(int)
  fullName: NMF.Collections.Generic.OrderedSet<T>.RemoveAt(int)
  nameWithType.vb: OrderedSet(Of T).RemoveAt(Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.RemoveAt(System.Int32)
    name: RemoveAt
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
  commentId: P:NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
  isExternal: true
  name: this[int]
  nameWithType: OrderedSet<T>.this[int]
  fullName: NMF.Collections.Generic.OrderedSet<T>.this[int]
  nameWithType.vb: OrderedSet(Of T).this[](Integer)
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.Item(System.Int32)
    name: this[]
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
  commentId: M:NMF.Collections.Generic.OrderedSet`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: OrderedSet<T>.AsReadOnly()
  fullName: NMF.Collections.Generic.OrderedSet<T>.AsReadOnly()
  nameWithType.vb: OrderedSet(Of T).AsReadOnly()
  fullName.vb: NMF.Collections.Generic.OrderedSet(Of T).AsReadOnly()
  spec.csharp:
  - uid: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.OrderedSet`1.AsReadOnly
    name: AsReadOnly
  - name: (
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Items
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Items
  name: Items
  nameWithType: DecoratedSet<T>.Items
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Items
  nameWithType.vb: DecoratedSet(Of T).Items
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Items
- uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: ExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).ExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: ExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IntersectWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IntersectWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
    name: IntersectWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsProperSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSubsetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).IsSupersetOf(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: Overlaps(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.Overlaps(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).Overlaps(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
    name: Overlaps
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SetEquals(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SetEquals(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SetEquals(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).SymmetricExceptWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
    name: SymmetricExceptWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: UnionWith(IEnumerable<T>)
  nameWithType: DecoratedSet<T>.UnionWith(IEnumerable<T>)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: DecoratedSet(Of T).UnionWith(IEnumerable(Of T))
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
    name: UnionWith
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
  name: Contains(T)
  nameWithType: DecoratedSet<T>.Contains(T)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Contains(T)
  nameWithType.vb: DecoratedSet(Of T).Contains(T)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], int)
  nameWithType: DecoratedSet<T>.CopyTo(T[], int)
  fullName: NMF.Collections.Generic.DecoratedSet<T>.CopyTo(T[], int)
  nameWithType.vb: DecoratedSet(Of T).CopyTo(T(), Integer)
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.Generic.DecoratedSet`1.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.Generic.DecoratedSet`1.Count
  commentId: P:NMF.Collections.Generic.DecoratedSet`1.Count
  name: Count
  nameWithType: DecoratedSet<T>.Count
  fullName: NMF.Collections.Generic.DecoratedSet<T>.Count
  nameWithType.vb: DecoratedSet(Of T).Count
  fullName.vb: NMF.Collections.Generic.DecoratedSet(Of T).Count
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Parent*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Parent
  name: Parent
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Parent
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Parent
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Parent
- uid: '{TParent}'
  commentId: '!:TParent'
  definition: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.SetOpposite*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.SetOpposite
  name: SetOpposite
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.SetOpposite
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.SetOpposite
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).SetOpposite
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).SetOpposite
- uid: '{TCollected}'
  commentId: '!:TCollected'
  definition: TCollected
  name: TCollected
  nameWithType: TCollected
  fullName: TCollected
- uid: TCollected
  name: TCollected
  nameWithType: TCollected
  fullName: TCollected
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.#ctor*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.#ctor
  name: ObservableOppositeOrderedSet
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.ObservableOppositeOrderedSet
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.ObservableOppositeOrderedSet
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).New
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).New
  name.vb: New
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Clear
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Clear
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Clear
  name: Clear()
  nameWithType: ObservableOrderedSet<TCollected>.Clear()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.Clear()
  nameWithType.vb: ObservableOrderedSet(Of TCollected).Clear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).Clear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Clear
    name: Clear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Clear
    name: Clear
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Clear*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Clear
  name: Clear
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Clear
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Clear
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Clear
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Clear
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Clear
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.Clear
  name: Clear()
  nameWithType: ObservableOrderedSet<T>.Clear()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.Clear()
  nameWithType.vb: ObservableOrderedSet(Of T).Clear()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).Clear()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Clear
    name: Clear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Clear
    name: Clear
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Add({TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Add(`1)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Add(`0)
  name: Add(TCollected)
  nameWithType: ObservableOrderedSet<TCollected>.Add(TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.Add(TCollected)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).Add(TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).Add(TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Add(`1)
    name: Add
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Add(`1)
    name: Add
  - name: (
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Add*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Add
  name: Add
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Add
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Add
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Add
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Add
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Add(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.Add(`0)
  name: Add(T)
  nameWithType: ObservableOrderedSet<T>.Add(T)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.Add(T)
  nameWithType.vb: ObservableOrderedSet(Of T).Add(T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).Add(T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Insert(System.Int32,{TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Insert(System.Int32,`1)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Insert(System.Int32,`0)
  name: Insert(int, TCollected)
  nameWithType: ObservableOrderedSet<TCollected>.Insert(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.Insert(int, TCollected)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).Insert(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).Insert(Integer, TCollected)
  name.vb: Insert(Integer, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Insert(System.Int32,`1)
    name: Insert
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Insert(System.Int32,`1)
    name: Insert
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Insert*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Insert
  name: Insert
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Insert
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Insert
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Insert
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Insert
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Insert(System.Int32,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(int, T)
  nameWithType: ObservableOrderedSet<T>.Insert(int, T)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.Insert(int, T)
  nameWithType.vb: ObservableOrderedSet(Of T).Insert(Integer, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).Insert(Integer, T)
  name.vb: Insert(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Insert(System.Int32,`0)
    name: Insert
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Insert(System.Int32,`0)
    name: Insert
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Remove({TCollected},System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Remove(`1,System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Remove(`0,System.Int32)
  name: Remove(TCollected, int)
  nameWithType: ObservableOrderedSet<TCollected>.Remove(TCollected, int)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.Remove(TCollected, int)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).Remove(TCollected, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).Remove(TCollected, Integer)
  name.vb: Remove(TCollected, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Remove(`1,System.Int32)
    name: Remove
  - name: (
  - name: TCollected
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Remove(`1,System.Int32)
    name: Remove
  - name: (
  - name: TCollected
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Remove*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Remove
  name: Remove
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Remove
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Remove
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Remove
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Remove
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Remove(`0,System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.Remove(`0,System.Int32)
  isExternal: true
  name: Remove(T, int)
  nameWithType: ObservableOrderedSet<T>.Remove(T, int)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.Remove(T, int)
  nameWithType.vb: ObservableOrderedSet(Of T).Remove(T, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).Remove(T, Integer)
  name.vb: Remove(T, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Remove(`0,System.Int32)
    name: Remove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Remove(`0,System.Int32)
    name: Remove
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.Replace(System.Int32,{TCollected},{TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Replace(System.Int32,`1,`1)
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Replace(System.Int32,`0,`0)
  name: Replace(int, TCollected, TCollected)
  nameWithType: ObservableOrderedSet<TCollected>.Replace(int, TCollected, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.Replace(int, TCollected, TCollected)
  nameWithType.vb: ObservableOrderedSet(Of TCollected).Replace(Integer, TCollected, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).Replace(Integer, TCollected, TCollected)
  name.vb: Replace(Integer, TCollected, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Replace(System.Int32,`1,`1)
    name: Replace
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.Replace(System.Int32,`1,`1)
    name: Replace
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Replace*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.Replace
  name: Replace
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.Replace
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.Replace
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).Replace
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).Replace
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Replace(System.Int32,`0,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.Replace(System.Int32,`0,`0)
  isExternal: true
  name: Replace(int, T, T)
  nameWithType: ObservableOrderedSet<T>.Replace(int, T, T)
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.Replace(int, T, T)
  nameWithType.vb: ObservableOrderedSet(Of T).Replace(Integer, T, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).Replace(Integer, T, T)
  name.vb: Replace(Integer, T, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Replace(System.Int32,`0,`0)
    name: Replace
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.Replace(System.Int32,`0,`0)
    name: Replace
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.ToString
  parent: NMF.Collections.ObjectModel.ObservableOrderedSet{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableOrderedSet`1.ToString
  name: ToString()
  nameWithType: ObservableOrderedSet<TCollected>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<TCollected>.ToString()
  nameWithType.vb: ObservableOrderedSet(Of TCollected).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of TCollected).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet{`1}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.ToString*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2.ToString
  name: ToString
  nameWithType: ObservableOppositeOrderedSet<TParent, TCollected>.ToString
  fullName: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet<TParent, TCollected>.ToString
  nameWithType.vb: ObservableOppositeOrderedSet(Of TParent, TCollected).ToString
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet(Of TParent, TCollected).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableOrderedSet`1.ToString
  name: ToString()
  nameWithType: ObservableOrderedSet<T>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableOrderedSet<T>.ToString()
  nameWithType.vb: ObservableOrderedSet(Of T).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOrderedSet(Of T).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1.ToString
    name: ToString
  - name: (
  - name: )
