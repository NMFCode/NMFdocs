### YamlMime:TableOfContent
- uid: NMF.Collections.Generic
  name: NMF.Collections.Generic
  items:
  - uid: NMF.Collections.Generic.DecoratedSet`1
    name: DecoratedSet<T>
    name.vb: DecoratedSet(Of T)
  - uid: NMF.Collections.Generic.EmptyList`1
    name: EmptyList<T>
    name.vb: EmptyList(Of T)
  - uid: NMF.Collections.Generic.EnumerableDebuggerProxy`1
    name: EnumerableDebuggerProxy<T>
    name.vb: EnumerableDebuggerProxy(Of T)
  - uid: NMF.Collections.Generic.IOrderedSet`1
    name: IOrderedSet<T>
    name.vb: IOrderedSet(Of T)
  - uid: NMF.Collections.Generic.IOrderedSetExpression`1
    name: IOrderedSetExpression<T>
    name.vb: IOrderedSetExpression(Of T)
  - uid: NMF.Collections.Generic.LooselyLinkedList`1
    name: LooselyLinkedList<T>
    name.vb: LooselyLinkedList(Of T)
  - uid: NMF.Collections.Generic.LooselyLinkedList`1.Enumerator
    name: LooselyLinkedList<T>.Enumerator
    name.vb: LooselyLinkedList(Of T).Enumerator
  - uid: NMF.Collections.Generic.LooselyLinkedListNode`1
    name: LooselyLinkedListNode<T>
    name.vb: LooselyLinkedListNode(Of T)
  - uid: NMF.Collections.Generic.OrderedSet`1
    name: OrderedSet<T>
    name.vb: OrderedSet(Of T)
  - uid: NMF.Collections.Generic.ReadOnlyListSelection`2
    name: ReadOnlyListSelection<TSource, T>
    name.vb: ReadOnlyListSelection(Of TSource, T)
  - uid: NMF.Collections.Generic.ReadOnlyOrderedSet`1
    name: ReadOnlyOrderedSet<T>
    name.vb: ReadOnlyOrderedSet(Of T)
- uid: NMF.Collections.ObjectModel
  name: NMF.Collections.ObjectModel
  items:
  - uid: NMF.Collections.ObjectModel.CustomCollection`1
    name: CustomCollection<T>
    name.vb: CustomCollection(Of T)
  - uid: NMF.Collections.ObjectModel.INotifyCollectionChanging
    name: INotifyCollectionChanging
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended<T>
    name.vb: ObservableCollectionExtended(Of T)
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList<T>
    name.vb: ObservableList(Of T)
  - uid: NMF.Collections.ObjectModel.ObservableOppositeList`2
    name: ObservableOppositeList<TParent, TCollected>
    name.vb: ObservableOppositeList(Of TParent, TCollected)
  - uid: NMF.Collections.ObjectModel.ObservableOppositeOrderedSet`2
    name: ObservableOppositeOrderedSet<TParent, TCollected>
    name.vb: ObservableOppositeOrderedSet(Of TParent, TCollected)
  - uid: NMF.Collections.ObjectModel.ObservableOppositeSet`2
    name: ObservableOppositeSet<TParent, TCollected>
    name.vb: ObservableOppositeSet(Of TParent, TCollected)
  - uid: NMF.Collections.ObjectModel.ObservableOrderedSet`1
    name: ObservableOrderedSet<T>
    name.vb: ObservableOrderedSet(Of T)
  - uid: NMF.Collections.ObjectModel.ObservableReadOnlyOrderedSet`1
    name: ObservableReadOnlyOrderedSet<T>
    name.vb: ObservableReadOnlyOrderedSet(Of T)
  - uid: NMF.Collections.ObjectModel.ObservableSet`1
    name: ObservableSet<T>
    name.vb: ObservableSet(Of T)
  - uid: NMF.Collections.ObjectModel.OppositeList`2
    name: OppositeList<TParent, TCollected>
    name.vb: OppositeList(Of TParent, TCollected)
  - uid: NMF.Collections.ObjectModel.OppositeOrderedSet`2
    name: OppositeOrderedSet<TParent, TCollected>
    name.vb: OppositeOrderedSet(Of TParent, TCollected)
  - uid: NMF.Collections.ObjectModel.OppositeSet`2
    name: OppositeSet<TParent, TCollected>
    name.vb: OppositeSet(Of TParent, TCollected)
