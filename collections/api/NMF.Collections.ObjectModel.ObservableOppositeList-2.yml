### YamlMime:ManagedReference
items:
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2
  commentId: T:NMF.Collections.ObjectModel.ObservableOppositeList`2
  id: ObservableOppositeList`2
  parent: NMF.Collections.ObjectModel
  children:
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.#ctor(`0)
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
  - NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
  langs:
  - csharp
  - vb
  name: ObservableOppositeList<TParent, TCollected>
  nameWithType: ObservableOppositeList<TParent, TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>
  type: Class
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableOppositeList
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 300
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: 'public abstract class ObservableOppositeList<TParent, TCollected> : ObservableList<TCollected>, IReadOnlyList<TCollected>, IReadOnlyCollection<TCollected>, IList, ICollection, INotifyCollectionChanging, INotifyPropertyChanged, INotifyCollectionChanged, IListExpression<TCollected>, IList<TCollected>, ICollectionExpression<TCollected>, IEnumerableExpression<TCollected>, IEnumerableExpression, ICollection<TCollected>, IEnumerable<TCollected>, IEnumerable'
    typeParameters:
    - id: TParent
    - id: TCollected
    content.vb: Public MustInherit Class ObservableOppositeList(Of TParent, TCollected) Inherits ObservableList(Of TCollected) Implements IReadOnlyList(Of TCollected), IReadOnlyCollection(Of TCollected), IList, ICollection, INotifyCollectionChanging, INotifyPropertyChanged, INotifyCollectionChanged, IListExpression(Of TCollected), IList(Of TCollected), ICollectionExpression(Of TCollected), IEnumerableExpression(Of TCollected), IEnumerableExpression, ICollection(Of TCollected), IEnumerable(Of TCollected), IEnumerable
  inheritance:
  - System.Object
  - System.Collections.ObjectModel.Collection{{TCollected}}
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  - NMF.Collections.ObjectModel.ObservableList{{TCollected}}
  implements:
  - System.Collections.Generic.IReadOnlyList{{TCollected}}
  - System.Collections.Generic.IReadOnlyCollection{{TCollected}}
  - System.Collections.IList
  - System.Collections.ICollection
  - NMF.Collections.ObjectModel.INotifyCollectionChanging
  - System.ComponentModel.INotifyPropertyChanged
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Expressions.IListExpression{{TCollected}}
  - System.Collections.Generic.IList{{TCollected}}
  - NMF.Expressions.ICollectionExpression{{TCollected}}
  - NMF.Expressions.IEnumerableExpression{{TCollected}}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.Generic.ICollection{{TCollected}}
  - System.Collections.Generic.IEnumerable{{TCollected}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - NMF.Collections.ObjectModel.ObservableList{{TCollected}}.AsNotifiable
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.CollectionChanging
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.CollectionChanged
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.PropertyChanged
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.RequireEvents
  - NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.MoveItem(System.Int32,System.Int32)
  - System.Collections.ObjectModel.Collection{{TCollected}}.Add({TCollected})
  - System.Collections.ObjectModel.Collection{{TCollected}}.Clear
  - System.Collections.ObjectModel.Collection{{TCollected}}.Contains({TCollected})
  - System.Collections.ObjectModel.Collection{{TCollected}}.CopyTo({TCollected}[],System.Int32)
  - System.Collections.ObjectModel.Collection{{TCollected}}.GetEnumerator
  - System.Collections.ObjectModel.Collection{{TCollected}}.IndexOf({TCollected})
  - System.Collections.ObjectModel.Collection{{TCollected}}.Insert(System.Int32,{TCollected})
  - System.Collections.ObjectModel.Collection{{TCollected}}.Remove({TCollected})
  - System.Collections.ObjectModel.Collection{{TCollected}}.RemoveAt(System.Int32)
  - System.Collections.ObjectModel.Collection{{TCollected}}.Count
  - System.Collections.ObjectModel.Collection{{TCollected}}.Item(System.Int32)
  - System.Collections.ObjectModel.Collection{{TCollected}}.Items
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected)
  name.vb: ObservableOppositeList(Of TParent, TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent
  commentId: P:NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent
  id: Parent
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ObservableOppositeList<TParent, TCollected>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.Parent
  type: Property
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Parent
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 302
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public TParent Parent { get; }
    parameters: []
    return:
      type: '{TParent}'
    content.vb: Public Property Parent As TParent
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).Parent
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).Parent
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite(`1,`0)
  id: SetOpposite(`1,`0)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: SetOpposite(TCollected, TParent)
  nameWithType: ObservableOppositeList<TParent, TCollected>.SetOpposite(TCollected, TParent)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.SetOpposite(TCollected, TParent)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetOpposite
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 304
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected abstract void SetOpposite(TCollected item, TParent newParent)
    parameters:
    - id: item
      type: '{TCollected}'
    - id: newParent
      type: '{TParent}'
    content.vb: Protected MustOverride Sub SetOpposite(item As TCollected, newParent As TParent)
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).SetOpposite(TCollected, TParent)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).SetOpposite(TCollected, TParent)
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.#ctor(`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.#ctor(`0)
  id: '#ctor(`0)'
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: ObservableOppositeList(TParent)
  nameWithType: ObservableOppositeList<TParent, TCollected>.ObservableOppositeList(TParent)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ObservableOppositeList(TParent)
  type: Constructor
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 308
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected ObservableOppositeList(TParent parent)
    parameters:
    - id: parent
      type: '{TParent}'
    content.vb: Protected Sub New(parent As TParent)
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.#ctor*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).New(TParent)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).New(TParent)
  name.vb: New(TParent)
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
  id: ClearItems
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: ClearItems()
  nameWithType: ObservableOppositeList<TParent, TCollected>.ClearItems()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ClearItems()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ClearItems
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 315
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected override void ClearItems()
    content.vb: Protected Overrides Sub ClearItems()
  overridden: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.ClearItems
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).ClearItems()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).ClearItems()
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem(System.Int32,`1)
  id: InsertItem(System.Int32,`1)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: InsertItem(int, TCollected)
  nameWithType: ObservableOppositeList<TParent, TCollected>.InsertItem(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.InsertItem(int, TCollected)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InsertItem
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 361
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected override void InsertItem(int index, TCollected item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{TCollected}'
    content.vb: Protected Overrides Sub InsertItem(index As Integer, item As TCollected)
  overridden: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.InsertItem(System.Int32,{TCollected})
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).InsertItem(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).InsertItem(Integer, TCollected)
  name.vb: InsertItem(Integer, TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: RemoveItem(int)
  nameWithType: ObservableOppositeList<TParent, TCollected>.RemoveItem(int)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.RemoveItem(int)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemoveItem
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 399
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected override void RemoveItem(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Protected Overrides Sub RemoveItem(index As Integer)
  overridden: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.RemoveItem(System.Int32)
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).RemoveItem(Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).RemoveItem(Integer)
  name.vb: RemoveItem(Integer)
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem(System.Int32,`1)
  id: SetItem(System.Int32,`1)
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: SetItem(int, TCollected)
  nameWithType: ObservableOppositeList<TParent, TCollected>.SetItem(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.SetItem(int, TCollected)
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetItem
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 438
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: protected override void SetItem(int index, TCollected item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: '{TCollected}'
    content.vb: Protected Overrides Sub SetItem(index As Integer, item As TCollected)
  overridden: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.SetItem(System.Int32,{TCollected})
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).SetItem(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).SetItem(Integer, TCollected)
  name.vb: SetItem(Integer, TCollected)
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
  id: ToString
  parent: NMF.Collections.ObjectModel.ObservableOppositeList`2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ObservableOppositeList<TParent, TCollected>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ToString()
  type: Method
  source:
    remote:
      path: Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToString
    path: src/Collections/Collections/ObjectModel/ObservableOppositeCollection.cs
    startLine: 478
  assemblies:
  - NMF.Collections
  namespace: NMF.Collections.ObjectModel
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: NMF.Collections.ObjectModel.ObservableList{{TCollected}}.ToString
  overload: NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString*
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).ToString()
references:
- uid: NMF.Collections.ObjectModel
  commentId: N:NMF.Collections.ObjectModel
  name: NMF.Collections.ObjectModel
  nameWithType: NMF.Collections.ObjectModel
  fullName: NMF.Collections.ObjectModel
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Collections
    name: Collections
  - name: .
  - uid: NMF.Collections.ObjectModel
    name: ObjectModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.ObjectModel.Collection{{TCollected}}
  commentId: T:System.Collections.ObjectModel.Collection{`1}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<TCollected>
  nameWithType: Collection<TCollected>
  fullName: System.Collections.ObjectModel.Collection<TCollected>
  nameWithType.vb: Collection(Of TCollected)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected)
  name.vb: Collection(Of TCollected)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  commentId: T:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}
  parent: NMF.Collections.ObjectModel
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
  name: ObservableCollectionExtended<TCollected>
  nameWithType: ObservableCollectionExtended<TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>
  nameWithType.vb: ObservableCollectionExtended(Of TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected)
  name.vb: ObservableCollectionExtended(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList{{TCollected}}
  commentId: T:NMF.Collections.ObjectModel.ObservableList{`1}
  parent: NMF.Collections.ObjectModel
  definition: NMF.Collections.ObjectModel.ObservableList`1
  name: ObservableList<TCollected>
  nameWithType: ObservableList<TCollected>
  fullName: NMF.Collections.ObjectModel.ObservableList<TCollected>
  nameWithType.vb: ObservableList(Of TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of TCollected)
  name.vb: ObservableList(Of TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.IReadOnlyList{{TCollected}}
  commentId: T:System.Collections.Generic.IReadOnlyList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<TCollected>
  nameWithType: IReadOnlyList<TCollected>
  fullName: System.Collections.Generic.IReadOnlyList<TCollected>
  nameWithType.vb: IReadOnlyList(Of TCollected)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of TCollected)
  name.vb: IReadOnlyList(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.IReadOnlyCollection{{TCollected}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<TCollected>
  nameWithType: IReadOnlyCollection<TCollected>
  fullName: System.Collections.Generic.IReadOnlyCollection<TCollected>
  nameWithType.vb: IReadOnlyCollection(Of TCollected)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of TCollected)
  name.vb: IReadOnlyCollection(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: NMF.Collections.ObjectModel.INotifyCollectionChanging
  commentId: T:NMF.Collections.ObjectModel.INotifyCollectionChanging
  parent: NMF.Collections.ObjectModel
  name: INotifyCollectionChanging
  nameWithType: INotifyCollectionChanging
  fullName: NMF.Collections.ObjectModel.INotifyCollectionChanging
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Expressions.IListExpression{{TCollected}}
  commentId: T:NMF.Expressions.IListExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IListExpression`1
  name: IListExpression<TCollected>
  nameWithType: IListExpression<TCollected>
  fullName: NMF.Expressions.IListExpression<TCollected>
  nameWithType.vb: IListExpression(Of TCollected)
  fullName.vb: NMF.Expressions.IListExpression(Of TCollected)
  name.vb: IListExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.IList{{TCollected}}
  commentId: T:System.Collections.Generic.IList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TCollected>
  nameWithType: IList<TCollected>
  fullName: System.Collections.Generic.IList<TCollected>
  nameWithType.vb: IList(Of TCollected)
  fullName.vb: System.Collections.Generic.IList(Of TCollected)
  name.vb: IList(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.ICollectionExpression{{TCollected}}
  commentId: T:NMF.Expressions.ICollectionExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<TCollected>
  nameWithType: ICollectionExpression<TCollected>
  fullName: NMF.Expressions.ICollectionExpression<TCollected>
  nameWithType.vb: ICollectionExpression(Of TCollected)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of TCollected)
  name.vb: ICollectionExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.IEnumerableExpression{{TCollected}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TCollected>
  nameWithType: IEnumerableExpression<TCollected>
  fullName: NMF.Expressions.IEnumerableExpression<TCollected>
  nameWithType.vb: IEnumerableExpression(Of TCollected)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TCollected)
  name.vb: IEnumerableExpression(Of TCollected)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.Generic.ICollection{{TCollected}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TCollected>
  nameWithType: ICollection<TCollected>
  fullName: System.Collections.Generic.ICollection<TCollected>
  nameWithType.vb: ICollection(Of TCollected)
  fullName.vb: System.Collections.Generic.ICollection(Of TCollected)
  name.vb: ICollection(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TCollected}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TCollected>
  nameWithType: IEnumerable<TCollected>
  fullName: System.Collections.Generic.IEnumerable<TCollected>
  nameWithType.vb: IEnumerable(Of TCollected)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TCollected)
  name.vb: IEnumerable(Of TCollected)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TCollected
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Collections.ObjectModel.ObservableList{{TCollected}}.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableList{`1}.AsNotifiable
  parent: NMF.Collections.ObjectModel.ObservableList{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableList<TCollected>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableList<TCollected>.AsNotifiable()
  nameWithType.vb: ObservableList(Of TCollected).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of TCollected).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList{`1}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList{`1}.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.CollectionChanging
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableCollectionExtended<TCollected>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.CollectionChanging
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.CollectionChanged
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableCollectionExtended<TCollected>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.CollectionChanged
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.PropertyChanged
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableCollectionExtended<TCollected>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.PropertyChanged
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableCollectionExtended<TCollected>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  nameWithType: ObservableCollectionExtended<TCollected>.OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, bool)
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, Boolean)
  name.vb: OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.RequireEvents
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableCollectionExtended<TCollected>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.RequireEvents()
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.MoveItem(System.Int32,System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.MoveItem(System.Int32,System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
  name: MoveItem(int, int)
  nameWithType: ObservableCollectionExtended<TCollected>.MoveItem(int, int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.MoveItem(int, int)
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).MoveItem(Integer, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).MoveItem(Integer, Integer)
  name.vb: MoveItem(Integer, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Add({TCollected})
  commentId: M:System.Collections.ObjectModel.Collection{`1}.Add(`1)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Add(`0)
  name: Add(TCollected)
  nameWithType: Collection<TCollected>.Add(TCollected)
  fullName: System.Collections.ObjectModel.Collection<TCollected>.Add(TCollected)
  nameWithType.vb: Collection(Of TCollected).Add(TCollected)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).Add(TCollected)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.Add(`1)
    name: Add
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.Add(`1)
    name: Add
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Clear
  commentId: M:System.Collections.ObjectModel.Collection{`1}.Clear
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Clear
  name: Clear()
  nameWithType: Collection<TCollected>.Clear()
  fullName: System.Collections.ObjectModel.Collection<TCollected>.Clear()
  nameWithType.vb: Collection(Of TCollected).Clear()
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Contains({TCollected})
  commentId: M:System.Collections.ObjectModel.Collection{`1}.Contains(`1)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Contains(`0)
  name: Contains(TCollected)
  nameWithType: Collection<TCollected>.Contains(TCollected)
  fullName: System.Collections.ObjectModel.Collection<TCollected>.Contains(TCollected)
  nameWithType.vb: Collection(Of TCollected).Contains(TCollected)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).Contains(TCollected)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.Contains(`1)
    name: Contains
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.Contains(`1)
    name: Contains
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.CopyTo({TCollected}[],System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection{`1}.CopyTo(`1[],System.Int32)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TCollected[], int)
  nameWithType: Collection<TCollected>.CopyTo(TCollected[], int)
  fullName: System.Collections.ObjectModel.Collection<TCollected>.CopyTo(TCollected[], int)
  nameWithType.vb: Collection(Of TCollected).CopyTo(TCollected(), Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).CopyTo(TCollected(), Integer)
  name.vb: CopyTo(TCollected(), Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.CopyTo(`1[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: TCollected
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.CopyTo(`1[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: TCollected
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.GetEnumerator
  commentId: M:System.Collections.ObjectModel.Collection{`1}.GetEnumerator
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: Collection<TCollected>.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<TCollected>.GetEnumerator()
  nameWithType.vb: Collection(Of TCollected).GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.IndexOf({TCollected})
  commentId: M:System.Collections.ObjectModel.Collection{`1}.IndexOf(`1)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  name: IndexOf(TCollected)
  nameWithType: Collection<TCollected>.IndexOf(TCollected)
  fullName: System.Collections.ObjectModel.Collection<TCollected>.IndexOf(TCollected)
  nameWithType.vb: Collection(Of TCollected).IndexOf(TCollected)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).IndexOf(TCollected)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.IndexOf(`1)
    name: IndexOf
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.IndexOf(`1)
    name: IndexOf
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Insert(System.Int32,{TCollected})
  commentId: M:System.Collections.ObjectModel.Collection{`1}.Insert(System.Int32,`1)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  name: Insert(int, TCollected)
  nameWithType: Collection<TCollected>.Insert(int, TCollected)
  fullName: System.Collections.ObjectModel.Collection<TCollected>.Insert(int, TCollected)
  nameWithType.vb: Collection(Of TCollected).Insert(Integer, TCollected)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).Insert(Integer, TCollected)
  name.vb: Insert(Integer, TCollected)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.Insert(System.Int32,`1)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.Insert(System.Int32,`1)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Remove({TCollected})
  commentId: M:System.Collections.ObjectModel.Collection{`1}.Remove(`1)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Remove(`0)
  name: Remove(TCollected)
  nameWithType: Collection<TCollected>.Remove(TCollected)
  fullName: System.Collections.ObjectModel.Collection<TCollected>.Remove(TCollected)
  nameWithType.vb: Collection(Of TCollected).Remove(TCollected)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).Remove(TCollected)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.Remove(`1)
    name: Remove
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.Remove(`1)
    name: Remove
    isExternal: true
  - name: (
  - name: TCollected
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection{`1}.RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  name: RemoveAt(int)
  nameWithType: Collection<TCollected>.RemoveAt(int)
  fullName: System.Collections.ObjectModel.Collection<TCollected>.RemoveAt(int)
  nameWithType.vb: Collection(Of TCollected).RemoveAt(Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection{`1}.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Count
  commentId: P:System.Collections.ObjectModel.Collection{`1}.Count
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Count
  name: Count
  nameWithType: Collection<TCollected>.Count
  fullName: System.Collections.ObjectModel.Collection<TCollected>.Count
  nameWithType.vb: Collection(Of TCollected).Count
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).Count
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.Collection{`1}.Item(System.Int32)
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  name: this[int]
  nameWithType: Collection<TCollected>.this[int]
  fullName: System.Collections.ObjectModel.Collection<TCollected>.this[int]
  nameWithType.vb: Collection(Of TCollected).this[](Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection{`1}.Item(System.Int32)
    name: this[]
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection{{TCollected}}.Items
  commentId: P:System.Collections.ObjectModel.Collection{`1}.Items
  parent: System.Collections.ObjectModel.Collection{{TCollected}}
  definition: System.Collections.ObjectModel.Collection`1.Items
  name: Items
  nameWithType: Collection<TCollected>.Items
  fullName: System.Collections.ObjectModel.Collection<TCollected>.Items
  nameWithType.vb: Collection(Of TCollected).Items
  fullName.vb: System.Collections.ObjectModel.Collection(Of TCollected).Items
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.ObjectModel.Collection`1
  commentId: T:System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  nameWithType.vb: Collection(Of T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T)
  name.vb: Collection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.ObjectModel
    name: ObjectModel
    isExternal: true
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
  commentId: T:NMF.Collections.ObjectModel.ObservableCollectionExtended`1
  name: ObservableCollectionExtended<T>
  nameWithType: ObservableCollectionExtended<T>
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>
  nameWithType.vb: ObservableCollectionExtended(Of T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T)
  name.vb: ObservableCollectionExtended(Of T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1
    name: ObservableCollectionExtended
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList`1
  commentId: T:NMF.Collections.ObjectModel.ObservableList`1
  name: ObservableList<T>
  nameWithType: ObservableList<T>
  fullName: NMF.Collections.ObjectModel.ObservableList<T>
  nameWithType.vb: ObservableList(Of T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of T)
  name.vb: ObservableList(Of T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1
    name: ObservableList
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
- uid: NMF.Expressions.IListExpression`1
  commentId: T:NMF.Expressions.IListExpression`1
  name: IListExpression<T>
  nameWithType: IListExpression<T>
  fullName: NMF.Expressions.IListExpression<T>
  nameWithType.vb: IListExpression(Of T)
  fullName.vb: NMF.Expressions.IListExpression(Of T)
  name.vb: IListExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
  commentId: M:NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: ObservableList<T>.AsNotifiable()
  fullName: NMF.Collections.ObjectModel.ObservableList<T>.AsNotifiable()
  nameWithType.vb: ObservableList(Of T).AsNotifiable()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.AsNotifiable
    name: AsNotifiable
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanging
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanging
  name: CollectionChanging
  nameWithType: ObservableCollectionExtended<T>.CollectionChanging
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.CollectionChanging
  nameWithType.vb: ObservableCollectionExtended(Of T).CollectionChanging
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).CollectionChanging
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableCollectionExtended<T>.CollectionChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.CollectionChanged
  nameWithType.vb: ObservableCollectionExtended(Of T).CollectionChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).CollectionChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.PropertyChanged
  commentId: E:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ObservableCollectionExtended<T>.PropertyChanged
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.PropertyChanged
  nameWithType.vb: ObservableCollectionExtended(Of T).PropertyChanged
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).PropertyChanged
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanging(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableCollectionExtended<T>.OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableCollectionExtended(Of T).OnCollectionChanging(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanging(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanging
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  nameWithType: ObservableCollectionExtended<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs, bool)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, bool)
  nameWithType.vb: ObservableCollectionExtended(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs, Boolean)
  name.vb: OnCollectionChanged(NotifyCollectionChangedEventArgs, Boolean)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Boolean)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
  name: RequireEvents()
  nameWithType: ObservableCollectionExtended<T>.RequireEvents()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.RequireEvents()
  nameWithType.vb: ObservableCollectionExtended(Of T).RequireEvents()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).RequireEvents()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RequireEvents
    name: RequireEvents
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
  isExternal: true
  name: MoveItem(int, int)
  nameWithType: ObservableCollectionExtended<T>.MoveItem(int, int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.MoveItem(int, int)
  nameWithType.vb: ObservableCollectionExtended(Of T).MoveItem(Integer, Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).MoveItem(Integer, Integer)
  name.vb: MoveItem(Integer, Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.MoveItem(System.Int32,System.Int32)
    name: MoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Add(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: Collection<T>.Add(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Add(T)
  nameWithType.vb: Collection(Of T).Add(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Add(`0)
    name: Add
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Clear
  commentId: M:System.Collections.ObjectModel.Collection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: Collection<T>.Clear()
  fullName: System.Collections.ObjectModel.Collection<T>.Clear()
  nameWithType.vb: Collection(Of T).Clear()
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Clear
    name: Clear
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: Collection<T>.Contains(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Contains(T)
  nameWithType.vb: Collection(Of T).Contains(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
    name: Contains
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], int)
  nameWithType: Collection<T>.CopyTo(T[], int)
  fullName: System.Collections.ObjectModel.Collection<T>.CopyTo(T[], int)
  nameWithType.vb: Collection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
  commentId: M:System.Collections.ObjectModel.Collection`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: Collection<T>.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<T>.GetEnumerator()
  nameWithType.vb: Collection(Of T).GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: Collection<T>.IndexOf(T)
  fullName: System.Collections.ObjectModel.Collection<T>.IndexOf(T)
  nameWithType.vb: Collection(Of T).IndexOf(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
    name: IndexOf
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
    name: IndexOf
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(int, T)
  nameWithType: Collection<T>.Insert(int, T)
  fullName: System.Collections.ObjectModel.Collection<T>.Insert(int, T)
  nameWithType.vb: Collection(Of T).Insert(Integer, T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Insert(Integer, T)
  name.vb: Insert(Integer, T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
    name: Insert
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
  commentId: M:System.Collections.ObjectModel.Collection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: Collection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Remove(T)
  nameWithType.vb: Collection(Of T).Remove(T)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
    name: Remove
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(int)
  nameWithType: Collection<T>.RemoveAt(int)
  fullName: System.Collections.ObjectModel.Collection<T>.RemoveAt(int)
  nameWithType.vb: Collection(Of T).RemoveAt(Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).RemoveAt(Integer)
  name.vb: RemoveAt(Integer)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
    name: RemoveAt
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Count
  commentId: P:System.Collections.ObjectModel.Collection`1.Count
  isExternal: true
  name: Count
  nameWithType: Collection<T>.Count
  fullName: System.Collections.ObjectModel.Collection<T>.Count
  nameWithType.vb: Collection(Of T).Count
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Count
- uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  isExternal: true
  name: this[int]
  nameWithType: Collection<T>.this[int]
  fullName: System.Collections.ObjectModel.Collection<T>.this[int]
  nameWithType.vb: Collection(Of T).this[](Integer)
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).this[](Integer)
  name.vb: this[](Integer)
  spec.csharp:
  - name: this
  - name: '['
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
    name: this[]
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Collections.ObjectModel.Collection`1.Items
  commentId: P:System.Collections.ObjectModel.Collection`1.Items
  isExternal: true
  name: Items
  nameWithType: Collection<T>.Items
  fullName: System.Collections.ObjectModel.Collection<T>.Items
  nameWithType.vb: Collection(Of T).Items
  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Items
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.Parent
  name: Parent
  nameWithType: ObservableOppositeList<TParent, TCollected>.Parent
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.Parent
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).Parent
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).Parent
- uid: '{TParent}'
  commentId: '!:TParent'
  definition: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.SetOpposite
  name: SetOpposite
  nameWithType: ObservableOppositeList<TParent, TCollected>.SetOpposite
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.SetOpposite
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).SetOpposite
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).SetOpposite
- uid: '{TCollected}'
  commentId: '!:TCollected'
  definition: TCollected
  name: TCollected
  nameWithType: TCollected
  fullName: TCollected
- uid: TCollected
  name: TCollected
  nameWithType: TCollected
  fullName: TCollected
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.#ctor*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.#ctor
  name: ObservableOppositeList
  nameWithType: ObservableOppositeList<TParent, TCollected>.ObservableOppositeList
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ObservableOppositeList
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).New
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).New
  name.vb: New
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.ClearItems
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.ClearItems
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
  name: ClearItems()
  nameWithType: ObservableCollectionExtended<TCollected>.ClearItems()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.ClearItems()
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).ClearItems()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).ClearItems()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.ClearItems
    name: ClearItems
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.ClearItems
    name: ClearItems
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.ClearItems
  name: ClearItems
  nameWithType: ObservableOppositeList<TParent, TCollected>.ClearItems
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ClearItems
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).ClearItems
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).ClearItems
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
  name: ClearItems()
  nameWithType: ObservableCollectionExtended<T>.ClearItems()
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.ClearItems()
  nameWithType.vb: ObservableCollectionExtended(Of T).ClearItems()
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).ClearItems()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
    name: ClearItems
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.ClearItems
    name: ClearItems
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.InsertItem(System.Int32,{TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.InsertItem(System.Int32,`1)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
  name: InsertItem(int, TCollected)
  nameWithType: ObservableCollectionExtended<TCollected>.InsertItem(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.InsertItem(int, TCollected)
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).InsertItem(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).InsertItem(Integer, TCollected)
  name.vb: InsertItem(Integer, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.InsertItem(System.Int32,`1)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.InsertItem(System.Int32,`1)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.InsertItem
  name: InsertItem
  nameWithType: ObservableOppositeList<TParent, TCollected>.InsertItem
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.InsertItem
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).InsertItem
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).InsertItem
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
  isExternal: true
  name: InsertItem(int, T)
  nameWithType: ObservableCollectionExtended<T>.InsertItem(int, T)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.InsertItem(int, T)
  nameWithType.vb: ObservableCollectionExtended(Of T).InsertItem(Integer, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).InsertItem(Integer, T)
  name.vb: InsertItem(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.InsertItem(System.Int32,`0)
    name: InsertItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.RemoveItem(System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.RemoveItem(System.Int32)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
  name: RemoveItem(int)
  nameWithType: ObservableCollectionExtended<TCollected>.RemoveItem(int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.RemoveItem(int)
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).RemoveItem(Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).RemoveItem(Integer)
  name.vb: RemoveItem(Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.RemoveItem
  name: RemoveItem
  nameWithType: ObservableOppositeList<TParent, TCollected>.RemoveItem
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.RemoveItem
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).RemoveItem
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).RemoveItem
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
  isExternal: true
  name: RemoveItem(int)
  nameWithType: ObservableCollectionExtended<T>.RemoveItem(int)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.RemoveItem(int)
  nameWithType.vb: ObservableCollectionExtended(Of T).RemoveItem(Integer)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).RemoveItem(Integer)
  name.vb: RemoveItem(Integer)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.RemoveItem(System.Int32)
    name: RemoveItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}.SetItem(System.Int32,{TCollected})
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.SetItem(System.Int32,`1)
  parent: NMF.Collections.ObjectModel.ObservableCollectionExtended{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
  name: SetItem(int, TCollected)
  nameWithType: ObservableCollectionExtended<TCollected>.SetItem(int, TCollected)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<TCollected>.SetItem(int, TCollected)
  nameWithType.vb: ObservableCollectionExtended(Of TCollected).SetItem(Integer, TCollected)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of TCollected).SetItem(Integer, TCollected)
  name.vb: SetItem(Integer, TCollected)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.SetItem(System.Int32,`1)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended{`1}.SetItem(System.Int32,`1)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TCollected
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.SetItem
  name: SetItem
  nameWithType: ObservableOppositeList<TParent, TCollected>.SetItem
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.SetItem
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).SetItem
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).SetItem
- uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
  commentId: M:NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
  isExternal: true
  name: SetItem(int, T)
  nameWithType: ObservableCollectionExtended<T>.SetItem(int, T)
  fullName: NMF.Collections.ObjectModel.ObservableCollectionExtended<T>.SetItem(int, T)
  nameWithType.vb: ObservableCollectionExtended(Of T).SetItem(Integer, T)
  fullName.vb: NMF.Collections.ObjectModel.ObservableCollectionExtended(Of T).SetItem(Integer, T)
  name.vb: SetItem(Integer, T)
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableCollectionExtended`1.SetItem(System.Int32,`0)
    name: SetItem
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableList{{TCollected}}.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableList{`1}.ToString
  parent: NMF.Collections.ObjectModel.ObservableList{{TCollected}}
  definition: NMF.Collections.ObjectModel.ObservableList`1.ToString
  name: ToString()
  nameWithType: ObservableList<TCollected>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableList<TCollected>.ToString()
  nameWithType.vb: ObservableList(Of TCollected).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of TCollected).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList{`1}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList{`1}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString*
  commentId: Overload:NMF.Collections.ObjectModel.ObservableOppositeList`2.ToString
  name: ToString
  nameWithType: ObservableOppositeList<TParent, TCollected>.ToString
  fullName: NMF.Collections.ObjectModel.ObservableOppositeList<TParent, TCollected>.ToString
  nameWithType.vb: ObservableOppositeList(Of TParent, TCollected).ToString
  fullName.vb: NMF.Collections.ObjectModel.ObservableOppositeList(Of TParent, TCollected).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.Collections.ObjectModel.ObservableList`1.ToString
  commentId: M:NMF.Collections.ObjectModel.ObservableList`1.ToString
  name: ToString()
  nameWithType: ObservableList<T>.ToString()
  fullName: NMF.Collections.ObjectModel.ObservableList<T>.ToString()
  nameWithType.vb: ObservableList(Of T).ToString()
  fullName.vb: NMF.Collections.ObjectModel.ObservableList(Of T).ToString()
  spec.csharp:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Collections.ObjectModel.ObservableList`1.ToString
    name: ToString
  - name: (
  - name: )
