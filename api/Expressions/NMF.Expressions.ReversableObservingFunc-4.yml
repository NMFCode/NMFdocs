### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ReversableObservingFunc`4
  commentId: T:NMF.Expressions.ReversableObservingFunc`4
  id: ReversableObservingFunc`4
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ReversableObservingFunc`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}},System.Action{`0,`1,`2,`3})
  - NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(`0,`1,`2)
  - NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  - NMF.Expressions.ReversableObservingFunc`4.IsReversable
  - NMF.Expressions.ReversableObservingFunc`4.UpdateHandler
  langs:
  - csharp
  - vb
  name: ReversableObservingFunc<T1, T2, T3, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReversableObservingFunc
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 141
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents an observable expression with 3 input parameters and a custom update handler\n"
  example: []
  syntax:
    content: 'public class ReversableObservingFunc<T1, T2, T3, TResult> : ObservingFunc<T1, T2, T3, TResult>'
    typeParameters:
    - id: T1
      description: The type of the input parameter 1
    - id: T2
      description: The type of the input parameter 2
    - id: T3
      description: The type of the input parameter 3
    - id: TResult
    content.vb: >-
      Public Class ReversableObservingFunc(Of T1, T2, T3, TResult)

          Inherits ObservingFunc(Of T1, T2, T3, TResult)
  inheritance:
  - System.Object
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  inheritedMembers:
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.Evaluate({T1},{T2},{T3})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.Observe({T1},{T2},{T3})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.Observe(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}},NMF.Expressions.INotifyValue{{T3}})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial({T1})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial(NMF.Expressions.INotifyValue{{T1}})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.ObservePartial(NMF.Expressions.INotifyValue{{T1}})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial({T1},{T2})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.ObservePartial(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.InvokeReversable({T1},{T2},{T3})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.InvokeReversable(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}},NMF.Expressions.INotifyValue{{T3}})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.FromExpression(System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}})
  - NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.IsReversable
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, TResult)
- uid: NMF.Expressions.ReversableObservingFunc`4.UpdateHandler
  commentId: P:NMF.Expressions.ReversableObservingFunc`4.UpdateHandler
  id: UpdateHandler
  parent: NMF.Expressions.ReversableObservingFunc`4
  langs:
  - csharp
  - vb
  name: UpdateHandler
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.UpdateHandler
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.UpdateHandler
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UpdateHandler
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 146
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nThe method that handles value updates for this func\n"
  example: []
  syntax:
    content: public Action<T1, T2, T3, TResult> UpdateHandler { get; }
    parameters: []
    return:
      type: System.Action{{T1},{T2},{T3},{TResult}}
    content.vb: Public ReadOnly Property UpdateHandler As Action(Of T1, T2, T3, TResult)
  overload: NMF.Expressions.ReversableObservingFunc`4.UpdateHandler*
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).UpdateHandler
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).UpdateHandler
- uid: NMF.Expressions.ReversableObservingFunc`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}},System.Action{`0,`1,`2,`3})
  commentId: M:NMF.Expressions.ReversableObservingFunc`4.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}},System.Action{`0,`1,`2,`3})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}},System.Action{`0,`1,`2,`3})'
  parent: NMF.Expressions.ReversableObservingFunc`4
  langs:
  - csharp
  - vb
  name: ReversableObservingFunc(Expression<Func<T1, T2, T3, TResult>>, Action<T1, T2, T3, TResult>)
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.ReversableObservingFunc(Expression<Func<T1, T2, T3, TResult>>, Action<T1, T2, T3, TResult>)
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.ReversableObservingFunc(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>, System.Action<T1, T2, T3, TResult>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 152
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new observable expression for the given expression\n"
  example: []
  syntax:
    content: public ReversableObservingFunc(Expression<Func<T1, T2, T3, TResult>> expression, Action<T1, T2, T3, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}}
      description: The expression that is to be observed
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{TResult}}
    content.vb: Public Sub New(expression As Expression(Of Func(Of T1, T2, T3, TResult)), updateHandler As Action(Of T1, T2, T3, TResult))
  overload: NMF.Expressions.ReversableObservingFunc`4.#ctor*
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).ReversableObservingFunc(Expression(Of Func(Of T1, T2, T3, TResult)), Action(Of T1, T2, T3, TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).ReversableObservingFunc(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult)), System.Action(Of T1, T2, T3, TResult))
  name.vb: ReversableObservingFunc(Expression(Of Func(Of T1, T2, T3, TResult)), Action(Of T1, T2, T3, TResult))
- uid: NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(`0,`1,`2)
  commentId: M:NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(`0,`1,`2)
  id: InvokeReversable(`0,`1,`2)
  parent: NMF.Expressions.ReversableObservingFunc`4
  langs:
  - csharp
  - vb
  name: InvokeReversable(T1, T2, T3)
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.InvokeReversable(T1, T2, T3)
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.InvokeReversable(T1, T2, T3)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 167
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public override INotifyReversableValue<TResult> InvokeReversable(T1 in1, T2 in2, T3 in3)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overrides Function InvokeReversable(in1 As T1, in2 As T2, in3 As T3) As INotifyReversableValue(Of TResult)
  overridden: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.InvokeReversable({T1},{T2},{T3})
  overload: NMF.Expressions.ReversableObservingFunc`4.InvokeReversable*
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(T1, T2, T3)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(T1, T2, T3)
- uid: NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  commentId: M:NMF.Expressions.ReversableObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  id: InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  parent: NMF.Expressions.ReversableObservingFunc`4
  langs:
  - csharp
  - vb
  name: InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 185
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public override INotifyReversableValue<TResult> InvokeReversable(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overrides Function InvokeReversable(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3)) As INotifyReversableValue(Of TResult)
  overridden: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.InvokeReversable(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}},NMF.Expressions.INotifyValue{{T3}})
  overload: NMF.Expressions.ReversableObservingFunc`4.InvokeReversable*
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
- uid: NMF.Expressions.ReversableObservingFunc`4.IsReversable
  commentId: P:NMF.Expressions.ReversableObservingFunc`4.IsReversable
  id: IsReversable
  parent: NMF.Expressions.ReversableObservingFunc`4
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.IsReversable
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.IsReversable
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReversable
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 199
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets a value indicating whether this function can be reversed\n"
  example: []
  syntax:
    content: public override bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsReversable As Boolean
  overridden: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.IsReversable
  overload: NMF.Expressions.ReversableObservingFunc`4.IsReversable*
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).IsReversable
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).IsReversable
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`4
  name: ObservingFunc<T1, T2, T3, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.Evaluate({T1},{T2},{T3})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.Evaluate(`0,`1,`2)
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)
  name: Evaluate(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.Evaluate(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Evaluate(T1, T2, T3)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).Evaluate(T1, T2, T3)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Evaluate(T1, T2, T3)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)
    name: Evaluate
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.Evaluate
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)
    name: Evaluate
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).Evaluate
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.Observe({T1},{T2},{T3})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.Observe(`0,`1,`2)
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)
  name: Observe(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe(T1, T2, T3)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).Observe(T1, T2, T3)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe(T1, T2, T3)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)
    name: Observe
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)
    name: Observe
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).Observe
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.Observe(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}},NMF.Expressions.INotifyValue{{T3}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  name: Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: Observe
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: Observe
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).Observe
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial({T1})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.EvaluatePartial(`0)
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)
  name: EvaluatePartial(T1)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial(NMF.Expressions.INotifyValue{{T1}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  name: EvaluatePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: EvaluatePartial(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.ObservePartial(NMF.Expressions.INotifyValue{{T1}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.ObservePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})
  name: ObservePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: ObservePartial(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})
    name: ObservePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})
    name: ObservePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial({T1},{T2})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.EvaluatePartial(`0,`1)
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)
  name: EvaluatePartial(T1, T2)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1, T2)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1, T2)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1, T2)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1, T2)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.EvaluatePartial(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.ObservePartial(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: ObservePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: ObservePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.InvokeReversable({T1},{T2},{T3})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.InvokeReversable(`0,`1,`2)
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)
  name: InvokeReversable(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(T1, T2, T3)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(T1, T2, T3)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(T1, T2, T3)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)
    name: InvokeReversable
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)
    name: InvokeReversable
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.InvokeReversable(NMF.Expressions.INotifyValue{{T1}},NMF.Expressions.INotifyValue{{T2}},NMF.Expressions.INotifyValue{{T3}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  name: InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: InvokeReversable
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: InvokeReversable
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.FromExpression(System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
  name: FromExpression(Expression<Func<T1, T2, T3, TResult>>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.FromExpression(Expression<Func<T1, T2, T3, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).FromExpression(Expression(Of Func(Of T1, T2, T3, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, T2, T3, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
    name: FromExpression
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.FromExpression
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.FromExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
    name: FromExpression
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).FromExpression
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).FromExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc{`0,`1,`2,`3}.IsReversable
  parent: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  definition: NMF.Expressions.ObservingFunc`4.IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).IsReversable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ObservingFunc`4
  commentId: T:NMF.Expressions.ObservingFunc`4
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)
  commentId: M:NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)
  name: Evaluate(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.Evaluate(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Evaluate(T1, T2, T3)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).Evaluate(T1, T2, T3)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Evaluate(T1, T2, T3)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)
    name: Evaluate
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.Evaluate
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.Evaluate(`0,`1,`2)
    name: Evaluate
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).Evaluate
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Evaluate
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)
  commentId: M:NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)
  name: Observe(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe(T1, T2, T3)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).Observe(T1, T2, T3)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe(T1, T2, T3)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)
    name: Observe
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(`0,`1,`2)
    name: Observe
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).Observe
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  commentId: M:NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  name: Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: Observe
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.Observe
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.Observe
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: Observe
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).Observe
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).Observe
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)
  commentId: M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)
  name: EvaluatePartial(T1)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0)
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  name: EvaluatePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: EvaluatePartial(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})
  name: ObservePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: ObservePartial(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})
    name: ObservePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0})
    name: ObservePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)
  commentId: M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)
  name: EvaluatePartial(T1, T2)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1, T2)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(T1, T2)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1, T2)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(T1, T2)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(`0,`1)
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: EvaluatePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: EvaluatePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).EvaluatePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: ObservePartial
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.ObservePartial
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
    name: ObservePartial
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).ObservePartial
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)
  commentId: M:NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)
  name: InvokeReversable(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(T1, T2, T3)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(T1, T2, T3)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(T1, T2, T3)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)
    name: InvokeReversable
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(`0,`1,`2)
    name: InvokeReversable
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  commentId: M:NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  name: InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: InvokeReversable
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
    name: InvokeReversable
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
  commentId: M:NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
  isExternal: true
  name: FromExpression(Expression<Func<T1, T2, T3, TResult>>)
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.FromExpression(Expression<Func<T1, T2, T3, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>)
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).FromExpression(Expression(Of Func(Of T1, T2, T3, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, T2, T3, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
    name: FromExpression
    nameWithType: ObservingFunc<T1, T2, T3, TResult>.FromExpression
    fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.FromExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}})
    name: FromExpression
    nameWithType: ObservingFunc(Of T1, T2, T3, TResult).FromExpression
    fullName: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).FromExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc`4.IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, T3, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult).IsReversable
- uid: NMF.Expressions.ReversableObservingFunc`4.UpdateHandler*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`4.UpdateHandler
  name: UpdateHandler
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.UpdateHandler
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.UpdateHandler
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).UpdateHandler
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).UpdateHandler
- uid: System.Action{{T1},{T2},{T3},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3}
  parent: System
  definition: System.Action`4
  name: Action<T1, T2, T3, TResult>
  nameWithType: Action<T1, T2, T3, TResult>
  fullName: System.Action<T1, T2, T3, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, TResult)
  name.vb: Action(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`4
  commentId: T:System.Action`4
  isExternal: true
  name: Action<T1, T2, T3, T4>
  nameWithType: Action<T1, T2, T3, T4>
  fullName: System.Action<T1, T2, T3, T4>
  nameWithType.vb: Action(Of T1, T2, T3, T4)
  fullName.vb: System.Action(Of T1, T2, T3, T4)
  name.vb: Action(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ReversableObservingFunc`4.#ctor*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`4.#ctor
  name: ReversableObservingFunc
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.ReversableObservingFunc
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.ReversableObservingFunc
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).ReversableObservingFunc
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).ReversableObservingFunc
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T1, T2, T3, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: NMF.Expressions.ReversableObservingFunc`4.InvokeReversable*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`4.InvokeReversable
  name: InvokeReversable
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.InvokeReversable
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.InvokeReversable
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).InvokeReversable
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: NMF.Expressions.INotifyReversableValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TResult>
  nameWithType: INotifyReversableValue<TResult>
  fullName: NMF.Expressions.INotifyReversableValue<TResult>
  nameWithType.vb: INotifyReversableValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TResult)
  name.vb: INotifyReversableValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T1}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T1>
  nameWithType: INotifyValue<T1>
  fullName: NMF.Expressions.INotifyValue<T1>
  nameWithType.vb: INotifyValue(Of T1)
  fullName.vb: NMF.Expressions.INotifyValue(Of T1)
  name.vb: INotifyValue(Of T1)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T2}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T2>
  nameWithType: INotifyValue<T2>
  fullName: NMF.Expressions.INotifyValue<T2>
  nameWithType.vb: INotifyValue(Of T2)
  fullName.vb: NMF.Expressions.INotifyValue(Of T2)
  name.vb: INotifyValue(Of T2)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T3}}
  commentId: T:NMF.Expressions.INotifyValue{`2}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T3>
  nameWithType: INotifyValue<T3>
  fullName: NMF.Expressions.INotifyValue<T3>
  nameWithType.vb: INotifyValue(Of T3)
  fullName.vb: NMF.Expressions.INotifyValue(Of T3)
  name.vb: INotifyValue(Of T3)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ReversableObservingFunc`4.IsReversable*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`4.IsReversable
  name: IsReversable
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>.IsReversable
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>.IsReversable
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult).IsReversable
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
