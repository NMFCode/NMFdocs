### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  id: ExpressionExtensions
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Decimal})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Double})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Int32})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Int64})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Single})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  - NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  - NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  - NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  - NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  - NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  - NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.ICollectionExpression)
  - NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  - NMF.Expressions.Linq.ExpressionExtensions.OfType``2(NMF.Expressions.ICollectionExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  - NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  - NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Decimal})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Double})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Int32})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Int64})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Single})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - NMF.Expressions.Linq.ExpressionExtensions.ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean},System.Action{``0,System.Boolean})
  - NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  langs:
  - csharp
  - vb
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExpressionExtensions
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 14
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public static class ExpressionExtensions
    content.vb: Public Module ExpressionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: All
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 24
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether all items in the given collection match the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAll<>), "CreateExpression", false)]

      public static bool All<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A custom predicate that is applied to all items in the collection
    typeParameters:
    - id: TSource
      description: The type of the elements in the source collection
    return:
      type: System.Boolean
      description: True, if all items in the collection match the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAll(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.All*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.All(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  id: Any``1(NMF.Expressions.IEnumerableExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Any<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Any
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 39
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether there is any item in the source collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAny<>), "CreateExpression", false)]

      public static bool Any<TSource>(this IEnumerableExpression<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The type of the elements in the source collection
    return:
      type: System.Boolean
      description: True, if the collection has an item, otherwise false
    content.vb: >-
      <ObservableProxy(GetType(ObservableAny(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IEnumerableExpression(Of TSource)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.Any*
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Any
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 53
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether there is any item in the source collection that matches the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableLambdaAny<>), "CreateExpression", false)]

      public static bool Any<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A custom predicate that is checked for every item
    typeParameters:
    - id: TSource
      description: The type of the elements in the source collection
    return:
      type: System.Boolean
      description: True, if there is an item that matches the givn criteria, otherwise false
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableLambdaAny(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.Any*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Int32})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Int32})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Int32})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Int32>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Int32>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 67
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableIntAverage), "CreateExpression", false)]

      public static double Average(this IEnumerableExpression<int> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Int32}
      description: A collection of numbers
    return:
      type: System.Double
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableIntAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Integer)) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Int32))
  name.vb: Average(IEnumerableExpression(Of Int32))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Int64})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Int64})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Int64})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Int64>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Int64>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Int64>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 79
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableLongAverage), "CreateExpression", false)]

      public static double Average(this IEnumerableExpression<long> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Int64}
      description: A collection of numbers
    return:
      type: System.Double
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableLongAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Long)) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Int64))
  name.vb: Average(IEnumerableExpression(Of Int64))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Single})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Single})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Single})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Single>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Single>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Single>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 91
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableFloatAverage), "CreateExpression", false)]

      public static float Average(this IEnumerableExpression<float> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Single}
      description: A collection of numbers
    return:
      type: System.Single
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableFloatAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Single)) As Single
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Single))
  name.vb: Average(IEnumerableExpression(Of Single))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Double})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Double})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Double})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Double>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Double>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 103
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableDoubleAverage), "CreateExpression", false)]

      public static double Average(this IEnumerableExpression<double> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Double}
      description: A collection of numbers
    return:
      type: System.Double
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableDoubleAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Double)) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Double))
  name.vb: Average(IEnumerableExpression(Of Double))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Decimal})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Decimal})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Decimal})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Decimal>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Decimal>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Decimal>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 115
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableDecimalAverage), "CreateExpression", false)]

      public static decimal Average(this IEnumerableExpression<decimal> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Decimal}
      description: A collection of numbers
    return:
      type: System.Decimal
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableDecimalAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Decimal)) As Decimal
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Decimal))
  name.vb: Average(IEnumerableExpression(Of Decimal))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Nullable<Int32>>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Nullable<Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 127
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableIntAverage), "CreateExpression", false)]

      public static double? Average(this IEnumerableExpression<int? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableIntAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Integer?)) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Int32)))
  name.vb: Average(IEnumerableExpression(Of Nullable(Of Int32)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Nullable<Int64>>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Nullable<Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 139
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableLongAverage), "CreateExpression", false)]

      public static double? Average(this IEnumerableExpression<long? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableLongAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Long?)) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Int64)))
  name.vb: Average(IEnumerableExpression(Of Nullable(Of Int64)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Nullable<Single>>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Nullable<Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 151
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableFloatAverage), "CreateExpression", false)]

      public static float? Average(this IEnumerableExpression<float? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Single}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableFloatAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Single?)) As Single?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Single)))
  name.vb: Average(IEnumerableExpression(Of Nullable(Of Single)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Nullable<Double>>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Nullable<Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 163
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableDoubleAverage), "CreateExpression", false)]

      public static double? Average(this IEnumerableExpression<double? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableDoubleAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Double?)) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Double)))
  name.vb: Average(IEnumerableExpression(Of Nullable(Of Double)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  id: Average(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average(IEnumerableExpression<Nullable<Decimal>>)
  nameWithType: ExpressionExtensions.Average(IEnumerableExpression<Nullable<Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 175
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableDecimalAverage), "CreateExpression", false)]

      public static decimal? Average(this IEnumerableExpression<decimal? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableDecimalAverage), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(source As IEnumerableExpression(Of Decimal?)) As Decimal?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  nameWithType.vb: ExpressionExtensions.Average(IEnumerableExpression(Of Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(IEnumerableExpression(Of Nullable(Of Decimal)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 188
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateIntExpression", false)]

      public static double Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, int>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Double
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateIntExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Integer))) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 203
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateLongExpression", false)]

      public static double Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, long>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Double
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateLongExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Long))) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 218
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateFloatExpression", false)]

      public static float Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, float>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Single
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateFloatExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Single))) As Single
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 233
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateDoubleExpression", false)]

      public static double Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, double>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Double
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateDoubleExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Double))) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 248
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateDecimalExpression", false)]

      public static decimal Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, decimal>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Decimal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateDecimalExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Decimal))) As Decimal
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 263
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateNullableIntExpression", false)]

      public static double? Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, int? >> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateNullableIntExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Integer?))) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 278
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateNullableLongExpression", false)]

      public static double? Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, long? >> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateNullableLongExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Long?))) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 293
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateNullableFloatExpression", false)]

      public static float? Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, float? >> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Single}
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateNullableFloatExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Single?))) As Single?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 308
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateNullableDoubleExpression", false)]

      public static double? Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, double? >> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateNullableDoubleExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Double?))) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 323
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableAverage), "CreateNullableDecimalExpression", false)]

      public static decimal? Average<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, decimal? >> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Decimal}
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableAverage), "CreateNullableDecimalExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Decimal?))) As Decimal?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Average*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  id: Cast``1(NMF.Expressions.IEnumerableExpression)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Cast<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.Cast<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>(NMF.Expressions.IEnumerableExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Cast
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 338
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nCasts the given notifying enumerable to the given type\n"
  remarks: If any item in the source collection is not of type <code data-dev-comment-type="typeparamref" class="typeparamref">TResult</code>, an exception is thrown. Consider using <xref href="NMF.Expressions.Linq.ExpressionExtensions.OfType%60%601(NMF.Expressions.IEnumerableExpression)" data-throw-if-not-resolved="false"></xref> in this scenario.
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> Cast<TResult>(this IEnumerableExpression source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression
      description: The source collection
    typeParameters:
    - id: TResult
      description: The true type of the items in the collection
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A notifying collection casted to the given type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As IEnumerableExpression) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Cast*
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)(IEnumerableExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: Cast(Of TResult)(IEnumerableExpression)
- uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Concat
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 351
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nConcats the given notifying enumerables\n"
  remarks: The second collection does not have to be a notifying collection, but if it is not, it must not change its contents.
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Concat<TSource>(this IEnumerableExpression<TSource> source, IEnumerable<TSource> source2)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The first source
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The second source
    typeParameters:
    - id: TSource
      description: The type of the items
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The concatenation of both sources
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(source As IEnumerableExpression(Of TSource), source2 As IEnumerable(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Concat*
  nameWithType.vb: ExpressionExtensions.Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  id: Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 364
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nSearches the given collection for the given item\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableContains<>), "CreateExpression", false)]

      public static bool Contains<TSource>(this IEnumerableExpression<TSource> source, TSource item)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: item
      type: '{TSource}'
      description: The item that needs to be checked
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: System.Boolean
      description: True, if the given source collection contains the provided item, otherwise false
    content.vb: >-
      <ObservableProxy(GetType(ObservableContains(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IEnumerableExpression(Of TSource), item As TSource) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.Contains*
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 379
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nSearches the given collection for the given item\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableContains<>), "CreateExpressionWithComparer", false)]

      public static bool Contains<TSource>(this IEnumerableExpression<TSource> source, TSource item, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: item
      type: '{TSource}'
      description: The item that needs to be checked
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: The equality comparer to decide whether items are equal. Can be omitted
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: System.Boolean
      description: True, if the given source collection contains the provided item, otherwise false
    content.vb: >-
      <ObservableProxy(GetType(ObservableContains(Of )), "CreateExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IEnumerableExpression(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.Contains*
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  id: Count``1(NMF.Expressions.IEnumerableExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Count<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 392
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns how many items are in the source collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableCount<>), "CreateExpression", false)]

      public static int Count<TSource>(this IEnumerableExpression<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The type of elements within the source collection
    return:
      type: System.Int32
      description: The amount of elements in the source collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableCount(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IEnumerableExpression(Of TSource)) As Integer
  overload: NMF.Expressions.Linq.ExpressionExtensions.Count*
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 406
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns how many items are in the source collection that match the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableCount<>), "CreateExpressionWithComparer", false)]

      public static int Count<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: The predicate that is to be checked for each item
    typeParameters:
    - id: TSource
      description: The type of elements within the source collection
    return:
      type: System.Int32
      description: The amount of elements in the source collection that match the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableCount(Of )), "CreateExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Integer
  overload: NMF.Expressions.Linq.ExpressionExtensions.Count*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  id: Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Distinct
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 421
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nEliminates duplicates from the given collection\n"
  remarks: This method destroys the original order of the items
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Distinct<TSource>(this IEnumerableExpression<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: A notifying collection with no duplicates
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IEnumerableExpression(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Distinct*
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Distinct
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 434
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nEliminates duplicates from the given collection\n"
  remarks: This method destroys the original order of the items
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Distinct<TSource>(this IEnumerableExpression<TSource> source, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: The comparer to decide whether items match
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: A notifying collection with no duplicates
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IEnumerableExpression(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Distinct*
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Except
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 447
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns the given source collection without the elements from the second collection\n"
  remarks: If the exceptions collection will ever change, it must implement <see cref="!:ICollectionExpressionChanged"></see>, otherwise the implementation will get corrupted.
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Except<TSource>(this IEnumerableExpression<TSource> source, IEnumerable<TSource> exceptions)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: exceptions
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The exceptions. Can be a static collection, but in that case must not change
    typeParameters:
    - id: TSource
      description: The type of the items
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection without the exceptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(source As IEnumerableExpression(Of TSource), exceptions As IEnumerable(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Except*
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Except
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 461
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns the given source collection without the elements from the second collection\n"
  remarks: If the exceptions collection will ever change, it must implement <see cref="!:ICollectionExpressionChanged"></see>, otherwise the implementation will get corrupted.
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Except<TSource>(this IEnumerableExpression<TSource> source, IEnumerable<TSource> exceptions, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: exceptions
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The exceptions. Can be a static collection, but in that case must not change
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: A comparer to decide whether two items match
    typeParameters:
    - id: TSource
      description: The type of the items
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection without the exceptions
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(source As IEnumerableExpression(Of TSource), exceptions As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Except*
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  id: FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FirstOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 473
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the first item of the given source collection or the item type default value, if the collection is empty\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableFirstOrDefault<>), "CreateExpression", false)]

      [SetExpressionRewriter(typeof(ObservableFirstOrDefault<>), "CreateSetExpression")]

      public static TSource FirstOrDefault<TSource>(this IEnumerableExpression<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The first item of the collection or the type default value, if the collection is empty
    content.vb: >-
      <ObservableProxy(GetType(ObservableFirstOrDefault(Of )), "CreateExpression", False)>

      <SetExpressionRewriter(GetType(ObservableFirstOrDefault(Of )), "CreateSetExpression")>

      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IEnumerableExpression(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault*
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FirstOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 488
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the first item of the given source collection that matches the given predicate or the item type default value, if the collection is empty or no item matches the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableFirstOrDefault<>), "CreateExpressionForPredicate", false)]

      [SetExpressionRewriter(typeof(ObservableFirstOrDefault<>), "CreateSetExpressionWithPredicate")]

      public static TSource FirstOrDefault<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: The filter predicate
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The first item of the collection that matches the predicate or the type default value
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableFirstOrDefault(Of )), "CreateExpressionForPredicate", False)>

      <SetExpressionRewriter(GetType(ObservableFirstOrDefault(Of )), "CreateSetExpressionWithPredicate")>

      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 505
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IEnumerableExpression<IGroupingExpression<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    return:
      type: NMF.Expressions.IEnumerableExpression{NMF.Expressions.IGroupingExpression{{TKey},{TSource}}}
      description: A collection of groups
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IEnumerableExpression(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As IEnumerableExpression(Of IGroupingExpression(Of TKey, TSource))
  overload: NMF.Expressions.Linq.ExpressionExtensions.GroupBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 520
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IEnumerableExpression<IGroupingExpression<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TKey>> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer that decides whether items are identical
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    return:
      type: NMF.Expressions.IEnumerableExpression{NMF.Expressions.IGroupingExpression{{TKey},{TSource}}}
      description: A collection of groups
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IEnumerableExpression(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IEqualityComparer(Of TKey)) As IEnumerableExpression(Of IGroupingExpression(Of TKey, TSource))
  overload: NMF.Expressions.Linq.ExpressionExtensions.GroupBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  id: GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 535
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate into the given result\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ParameterDataflow(2, 0, 1)]

      [ParameterDataflow(2, 1, 0)]

      public static IEnumerableExpression<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of groups
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ParameterDataflow(2, 0, 1)>

      <ParameterDataflow(2, 1, 0)>

      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IEnumerableExpression(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.GroupBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 1
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 553
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate into the given result\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ParameterDataflow(2, 0, 1)]

      [ParameterDataflow(2, 1, 0)]

      public static IEnumerableExpression<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer that decides whether items are identical
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of groups
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ParameterDataflow(2, 0, 1)>

      <ParameterDataflow(2, 1, 0)>

      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IEnumerableExpression(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), comparer As IEqualityComparer(Of TKey)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.GroupBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 1
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  id: GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupJoin
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 580
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the given collections based on keys into groups\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(2, 0, 0)]

      [ParameterDataflow(3, 0, 1)]

      [ParameterDataflow(4, 0, 0)]

      [ParameterDataflow(4, 1, 1)]

      public static IEnumerableExpression<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerableExpression<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector)
    parameters:
    - id: outer
      type: NMF.Expressions.IEnumerableExpression{{TOuter}}
      description: The outer collection
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The inner collection
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A predicate that returns the key for each outer item
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A predicate that returns the key for each inner item
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: A function that creates a result for each group of an outer item and a group of inner items
    typeParameters:
    - id: TOuter
      description: The element type of the outer collection
    - id: TInner
      description: The element type of the inner collection
    - id: TKey
      description: The key type to be matched
    - id: TResult
      description: The resulting type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of grouped results
    content.vb: >-
      <ParameterDataflow(2, 0, 0)>

      <ParameterDataflow(3, 0, 1)>

      <ParameterDataflow(4, 0, 0)>

      <ParameterDataflow(4, 1, 1)>

      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IEnumerableExpression(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 3
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 1
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 1
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupJoin
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 603
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the given collections based on keys into groups\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(2, 0, 0)]

      [ParameterDataflow(3, 0, 1)]

      [ParameterDataflow(4, 0, 0)]

      [ParameterDataflow(4, 1, 1)]

      public static IEnumerableExpression<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerableExpression<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type: NMF.Expressions.IEnumerableExpression{{TOuter}}
      description: The outer collection
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The inner collection
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A predicate that returns the key for each outer item
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A predicate that returns the key for each inner item
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: A function that creates a result for each group of an outer item and a group of inner items
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer to decide when two items are equal
    typeParameters:
    - id: TOuter
      description: The element type of the outer collection
    - id: TInner
      description: The element type of the inner collection
    - id: TKey
      description: The key type to be matched
    - id: TResult
      description: The resulting type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of grouped results
    content.vb: >-
      <ParameterDataflow(2, 0, 0)>

      <ParameterDataflow(3, 0, 1)>

      <ParameterDataflow(4, 0, 0)>

      <ParameterDataflow(4, 1, 1)>

      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IEnumerableExpression(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), comparer As IEqualityComparer(Of TKey)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 3
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 1
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 1
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Intersect
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 620
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nIntersects two collections\n"
  remarks: No deduplication is done
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Intersect<TSource>(this IEnumerableExpression<TSource> source, IEnumerable<TSource> source2)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The first collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The second collection
    typeParameters:
    - id: TSource
      description: The element type of the collections
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The intersection of both collections
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(source As IEnumerableExpression(Of TSource), source2 As IEnumerable(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Intersect*
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Intersect
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 634
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nIntersects two collections\n"
  remarks: No deduplication is done
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Intersect<TSource>(this IEnumerableExpression<TSource> source, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The first collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The second collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: A comparer to decide when two items are equal
    typeParameters:
    - id: TSource
      description: The element type of the collections
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The intersection of both collections
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(source As IEnumerableExpression(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Intersect*
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 647
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSubsetOf<>), "CreateExpression", false)]

      public static bool IsProperSubsetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSubsetOf(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function IsProperSubsetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf*
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 662
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSubsetOf<>), "CreateExpressionWithComparer", false)]

      public static bool IsProperSubsetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSubsetOf(Of )), "CreateExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function IsProperSubsetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf*
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 677
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSupersetOf<>), "CreateExpression", false)]

      public static bool IsProperSupersetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSupersetOf(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function IsProperSupersetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf*
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 692
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSupersetOf<>), "CreateExpressionWithComparer", false)]

      public static bool IsProperSupersetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSupersetOf(Of )), "CreateExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function IsProperSupersetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf*
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 707
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSubsetOf<>), "CreateExpression", false)]

      public static bool IsSubsetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSubsetOf(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function IsSubsetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf*
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 722
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSubsetOf<>), "CreateExpressionWithComparer", false)]

      public static bool IsSubsetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSubsetOf(Of )), "CreateExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function IsSubsetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf*
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 737
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSupersetOf<>), "CreateExpression", false)]

      public static bool IsSupersetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSupersetOf(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function IsSupersetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf*
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 752
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSupersetOf<>), "CreateExpressionWithComparer", false)]

      public static bool IsSupersetOf<T>(this IEnumerableExpression<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSupersetOf(Of )), "CreateExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function IsSupersetOf(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf*
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  id: Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Join
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 772
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the current collection with the given other collection\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(2, 0, 0)]

      [ParameterDataflow(3, 0, 1)]

      [ParameterDataflow(4, 0, 0)]

      [ParameterDataflow(4, 1, 1)]

      public static IEnumerableExpression<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerableExpression<TOuter> outerSource, IEnumerable<TInner> innerSource, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector)
    parameters:
    - id: outerSource
      type: NMF.Expressions.IEnumerableExpression{{TOuter}}
      description: The current collection
    - id: innerSource
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The other collection to join with
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A lambda expression to select the key for the current collections items
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A lambda expression to select the key for the given other collections items
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: A lambda expression to select the result for a given pair of elements
    typeParameters:
    - id: TOuter
      description: The element type of the current collection
    - id: TInner
      description: The element type of the other collection
    - id: TKey
      description: The type of the keys for which the collections should be joined
    - id: TResult
      description: The join result type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A joined collection
    content.vb: >-
      <ParameterDataflow(2, 0, 0)>

      <ParameterDataflow(3, 0, 1)>

      <ParameterDataflow(4, 0, 0)>

      <ParameterDataflow(4, 1, 1)>

      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outerSource As IEnumerableExpression(Of TOuter), innerSource As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult))) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Join*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 3
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 1
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 1
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Join
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 795
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the current collection with the given other collection\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(2, 0, 0)]

      [ParameterDataflow(3, 0, 1)]

      [ParameterDataflow(4, 0, 0)]

      [ParameterDataflow(4, 1, 1)]

      public static IEnumerableExpression<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerableExpression<TOuter> outerSource, IEnumerable<TInner> innerSource, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outerSource
      type: NMF.Expressions.IEnumerableExpression{{TOuter}}
      description: The current collection
    - id: innerSource
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The other collection to join with
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A lambda expression to select the key for the current collections items
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A lambda expression to select the key for the given other collections items
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: A lambda expression to select the result for a given pair of elements
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to define when two keys are equivalent
    typeParameters:
    - id: TOuter
      description: The element type of the current collection
    - id: TInner
      description: The element type of the other collection
    - id: TKey
      description: The type of the keys for which the collections should be joined
    - id: TResult
      description: The join result type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A joined collection
    content.vb: >-
      <ParameterDataflow(2, 0, 0)>

      <ParameterDataflow(3, 0, 1)>

      <ParameterDataflow(4, 0, 0)>

      <ParameterDataflow(4, 1, 1)>

      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outerSource As IEnumerableExpression(Of TOuter), innerSource As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult)), comparer As IEqualityComparer(Of TKey)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Join*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 3
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 1
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 4
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 1
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0})
  id: Max``1(NMF.Expressions.IEnumerableExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Max<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 811
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "MaxExpression", false)]

      public static TSource Max<TSource>(this IEnumerableExpression<TSource> source)

          where TSource : IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "MaxExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource As IComparable(Of TSource))(source As IEnumerableExpression(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  nameWithType.vb: ExpressionExtensions.Max(Of TSource)(IEnumerableExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Max(Of TSource)(IEnumerableExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  id: Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 826
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "MaxExpressionWithComparer", false)]

      public static TSource Max<TSource>(this IEnumerableExpression<TSource> source, IComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "MaxExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IEnumerableExpression(Of TSource), comparer As IComparer(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  nameWithType.vb: ExpressionExtensions.Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 861
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaMaxExpression", false)]

      [ExpressionCompileRewriter(typeof(ExpressionExtensions.Rewrites), "LambdaMaxRewrite")]

      public static TResult Max<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult>> selector)

          where TResult : IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: '{TResult}'
      description: An elements feature which is maximal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaMaxExpression", False)>

      <ExpressionCompileRewriter(GetType(ExpressionExtensions.Rewrites), "LambdaMaxRewrite")>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult As IComparable(Of TResult))(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  id: Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 880
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaMaxExpressionCompiled", false)]

      public static TResult Max<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult>> selector, Func<TSource, TResult> selectorCompiled)

          where TResult : IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: selectorCompiled
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: '{TResult}'
      description: An elements feature which is maximal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaMaxExpressionCompiled", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult As IComparable(Of TResult))(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), selectorCompiled As Func(Of TSource, TResult)) As TResult
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 899
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaMaxExpressionWithComparer", false)]

      public static TResult Max<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult>> selector, IComparer<TResult> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: '{TResult}'
      description: An elements feature which is maximal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaMaxExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), comparer As IComparer(Of TResult)) As TResult
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  id: Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerableExpression<Nullable<TSource>>)
  nameWithType: ExpressionExtensions.Max<TSource>(IEnumerableExpression<Nullable<TSource>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>(NMF.Expressions.IEnumerableExpression<System.Nullable<TSource>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 937
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMaxExpression", false)]

      public static TSource? Max<TSource>(this IEnumerableExpression<TSource? > source)

          where TSource : struct, IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{{TSource}}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMaxExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource As {Structure, IComparable(Of TSource)})(source As IEnumerableExpression(Of TSource?)) As TSource?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  nameWithType.vb: ExpressionExtensions.Max(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of TSource)))
  name.vb: Max(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  id: Max``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(IEnumerableExpression<Nullable<TSource>>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Max<TSource>(IEnumerableExpression<Nullable<TSource>>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>(NMF.Expressions.IEnumerableExpression<System.Nullable<TSource>>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 952
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMaxExpressionWithComparer", false)]

      public static TSource? Max<TSource>(this IEnumerableExpression<TSource? > source, IComparer<TSource> comparer)

          where TSource : struct
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{{TSource}}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMaxExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource As Structure)(source As IEnumerableExpression(Of TSource?), comparer As IComparer(Of TSource)) As TSource?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  nameWithType.vb: ExpressionExtensions.Max(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)), IComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of TSource)), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  id: Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 988
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMaxExpression", false)]

      public static TResult? Max<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult? >> selector)

          where TResult : struct, IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is maximal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMaxExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult As {Structure, IComparable(Of TResult)})(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult?))) As TResult?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  id: Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1005
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMaxExpressionWithComparer", false)]

      public static TResult? Max<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult? >> selector, IComparer<TResult> comparer)

          where TResult : struct
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is maximal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMaxExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult As Structure)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), comparer As IComparer(Of TResult)) As TResult?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Max*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0})
  id: Min``1(NMF.Expressions.IEnumerableExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Min<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1046
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "MinExpression", false)]

      public static TSource Min<TSource>(this IEnumerableExpression<TSource> source)

          where TSource : IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "MinExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource As IComparable(Of TSource))(source As IEnumerableExpression(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  nameWithType.vb: ExpressionExtensions.Min(Of TSource)(IEnumerableExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Min(Of TSource)(IEnumerableExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  id: Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1061
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "MinExpressionWithComparer", false)]

      public static TSource Min<TSource>(this IEnumerableExpression<TSource> source, IComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "MinExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IEnumerableExpression(Of TSource), comparer As IComparer(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  nameWithType.vb: ExpressionExtensions.Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1096
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaMinExpression", false)]

      public static TResult Min<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult>> selector)

          where TResult : IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: '{TResult}'
      description: An elements feature which is minimal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaMinExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult As IComparable(Of TResult))(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1114
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaMinExpressionWithComparer", false)]

      public static TResult Min<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult>> selector, IComparer<TResult> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: '{TResult}'
      description: An elements feature which is minimal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaMinExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), comparer As IComparer(Of TResult)) As TResult
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  id: Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerableExpression<Nullable<TSource>>)
  nameWithType: ExpressionExtensions.Min<TSource>(IEnumerableExpression<Nullable<TSource>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>(NMF.Expressions.IEnumerableExpression<System.Nullable<TSource>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1152
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMinExpression", false)]

      public static TSource? Min<TSource>(this IEnumerableExpression<TSource? > source)

          where TSource : struct, IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{{TSource}}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMinExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource As {Structure, IComparable(Of TSource)})(source As IEnumerableExpression(Of TSource?)) As TSource?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  nameWithType.vb: ExpressionExtensions.Min(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of TSource)))
  name.vb: Min(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  id: Min``1(NMF.Expressions.IEnumerableExpression{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(IEnumerableExpression<Nullable<TSource>>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Min<TSource>(IEnumerableExpression<Nullable<TSource>>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>(NMF.Expressions.IEnumerableExpression<System.Nullable<TSource>>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1167
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMinExpressionWithComparer", false)]

      public static TSource? Min<TSource>(this IEnumerableExpression<TSource? > source, IComparer<TSource> comparer)

          where TSource : struct
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{{TSource}}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMinExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource As Structure)(source As IEnumerableExpression(Of TSource?), comparer As IComparer(Of TSource)) As TSource?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  nameWithType.vb: ExpressionExtensions.Min(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)), IComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of TSource)), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(IEnumerableExpression(Of Nullable(Of TSource)), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  id: Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1203
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMinExpression", false)]

      public static TResult? Min<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult? >> selector)

          where TResult : struct, IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is minimal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMinExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult As {Structure, IComparable(Of TResult)})(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult?))) As TResult?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  id: Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1220
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMinExpressionWithComparer", false)]

      public static TResult? Min<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult? >> selector, IComparer<TResult> comparer)

          where TResult : struct
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is minimal
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMinExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult As Structure)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), comparer As IComparer(Of TResult)) As TResult?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Min*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  id: OfType``1(NMF.Expressions.IEnumerableExpression)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OfType<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.IEnumerableExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OfType
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1260
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection for elements of the given type\n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> OfType<TResult>(this IEnumerableExpression source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression
      description: The current collection
    typeParameters:
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection containing the elements of the given type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As IEnumerableExpression) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.OfType*
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(IEnumerableExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: OfType(Of TResult)(IEnumerableExpression)
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``2(NMF.Expressions.ICollectionExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``2(NMF.Expressions.ICollectionExpression{``0})
  id: OfType``2(NMF.Expressions.ICollectionExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OfType<TSource, TResult>(ICollectionExpression<TSource>)
  nameWithType: ExpressionExtensions.OfType<TSource, TResult>(ICollectionExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TSource, TResult>(NMF.Expressions.ICollectionExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OfType
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1272
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection for elements of the given type\n"
  example: []
  syntax:
    content: >-
      public static ICollectionExpression<TResult> OfType<TSource, TResult>(this ICollectionExpression<TSource> source)

          where TResult : TSource
    parameters:
    - id: source
      type: NMF.Expressions.ICollectionExpression{{TSource}}
      description: The current collection
    typeParameters:
    - id: TSource
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ICollectionExpression{{TResult}}
      description: A collection containing the elements of the given type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TSource, TResult As TSource)(source As ICollectionExpression(Of TSource)) As ICollectionExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.OfType*
  nameWithType.vb: ExpressionExtensions.OfType(Of TSource, TResult)(ICollectionExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TSource, TResult)(NMF.Expressions.ICollectionExpression(Of TSource))
  name.vb: OfType(Of TSource, TResult)(ICollectionExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.ICollectionExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.ICollectionExpression)
  id: OfType``1(NMF.Expressions.ICollectionExpression)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OfType<TResult>(ICollectionExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(ICollectionExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.ICollectionExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OfType
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1285
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection for elements of the given type as a collection using the non-generic interface\n"
  remarks: Only use this method if a generic collection interface is for some reason unavailable.
  example: []
  syntax:
    content: public static ICollectionExpression<TResult> OfType<TResult>(this ICollectionExpression source)
    parameters:
    - id: source
      type: NMF.Expressions.ICollectionExpression
      description: The current collection
    typeParameters:
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ICollectionExpression{{TResult}}
      description: A collection containing the elements of the given type
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As ICollectionExpression) As ICollectionExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.OfType*
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(ICollectionExpression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.ICollectionExpression)
  name.vb: OfType(Of TResult)(ICollectionExpression)
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1298
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection ascending by the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> OrderBy<TItem, TKey>(this IEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TItem, TKey)(source As IEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.OrderBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1313
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection ascending by the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> OrderBy<TItem, TKey>(this IEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TItem, TKey)(source As IEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.OrderBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderByDescending
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1327
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection descending by the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> OrderByDescending<TItem, TKey>(this IEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TItem, TKey)(source As IEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderByDescending
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1342
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection descending by the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> OrderByDescending<TItem, TKey>(this IEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TItem, TKey)(source As IEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Select
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1356
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nMaps the current collection to the given lambda expression\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ExpressionCompileRewriter(typeof(ExpressionExtensions.Rewrites), "RewriteSelect")]

      public static IEnumerableExpression<TResult> Select<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The current collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression representing the mapping result for a given item
    typeParameters:
    - id: TSource
      description: The elements type
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection with the mapping results
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExpressionCompileRewriter(GetType(ExpressionExtensions.Rewrites), "RewriteSelect")>

      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Select*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  id: Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Select
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1371
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nMaps the current collection to the given lambda expression\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IEnumerableExpression<TResult> Select<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, TResult>> selector, Func<TSource, TResult> selectorCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The current collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression representing the mapping result for a given item
    - id: selectorCompiled
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
      description: The elements type
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection with the mapping results
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), selectorCompiled As Func(Of TSource, TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Select*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SelectMany
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1387
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFlattens the given collection of collections where the subsequent collections are selected by a predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ParameterDataflow(2, 0, 0)]

      [ParameterDataflow(2, 1, 1)]

      public static IEnumerableExpression<TResult> SelectMany<TSource, TIntermediate, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, IEnumerable<TIntermediate>>> func, Expression<Func<TSource, TIntermediate, TResult>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The current collection
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TIntermediate}}}}
      description: A lambda expression to select subsequent collections
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TIntermediate},{TResult}}}
      description: A lambda expression that determines the result element given the element of the source collection and the element of the subsequent collection
    typeParameters:
    - id: TSource
      description: The source element type
    - id: TIntermediate
      description: The element type of the subsequent collection
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection with the results
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ParameterDataflow(2, 0, 0)>

      <ParameterDataflow(2, 1, 1)>

      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TIntermediate, TResult)(source As IEnumerableExpression(Of TSource), func As Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), selector As Expression(Of Func(Of TSource, TIntermediate, TResult))) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.SelectMany*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 2
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 1
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SelectMany
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1403
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFlattens the given collection of collections where the subsequent collections are selected by a predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IEnumerableExpression<TResult> SelectMany<TSource, TResult>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, IEnumerable<TResult>>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The current collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
    typeParameters:
    - id: TSource
      description: The source element type
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection with the results
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, IEnumerable(Of TResult)))) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ExpressionExtensions.SelectMany*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetEquals
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1417
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the current collection and the given collection contain the same set of elements, regardless of their order\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSetEquals<>), "CreateExpression", false)]

      public static bool SetEquals<T>(this IEnumerableExpression<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The current collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The given other collection
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if both collections contain the same set of elements, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSetEquals(Of )), "CreateExpression", False)>

      <ExtensionAttribute>

      Public Shared Function SetEquals(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.SetEquals*
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetEquals
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1432
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the current collection and the given collection contain the same set of elements, regardless of their order\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSetEquals<>), "CreateExpressionWithComparer", false)]

      public static bool SetEquals<T>(this IEnumerableExpression<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The current collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The given other collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: An equality comparer used to determine equality in the sets
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if both collections contain the same set of elements, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSetEquals(Of )), "CreateExpressionWithComparer", False)>

      <ExtensionAttribute>

      Public Shared Function SetEquals(Of T)(source As IEnumerableExpression(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ExpressionExtensions.SetEquals*
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  id: SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SingleOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1451
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the single item of the given source collection or the item type default value, if the collection is empty\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSingleOrDefault<>), "CreateExpression", false)]

      [SetExpressionRewriter(typeof(ObservableSingleOrDefault<>), "CreateSetExpression")]

      public static TSource SingleOrDefault<TSource>(this IEnumerableExpression<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The single item of the collection or the type default value, if the collection is empty
    content.vb: >-
      <ObservableProxy(GetType(ObservableSingleOrDefault(Of )), "CreateExpression", False)>

      <SetExpressionRewriter(GetType(ObservableSingleOrDefault(Of )), "CreateSetExpression")>

      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IEnumerableExpression(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault*
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SingleOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1466
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the first item of the given source collection that matches the given predicate or the item type default value, if the collection is empty or no item matches the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSingleOrDefault<>), "CreateExpressionForPredicate", false)]

      [SetExpressionRewriter(typeof(ObservableSingleOrDefault<>), "CreateSetExpressionWithPredicate")]

      [ExpressionCompileRewriter(typeof(ExpressionExtensions.Rewrites), "RewriteSingleOrDefault")]

      public static TSource SingleOrDefault<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: The filter predicate
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The first item of the collection that matches the predicate or the type default value
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSingleOrDefault(Of )), "CreateExpressionForPredicate", False)>

      <SetExpressionRewriter(GetType(ObservableSingleOrDefault(Of )), "CreateSetExpressionWithPredicate")>

      <ExpressionCompileRewriter(GetType(ExpressionExtensions.Rewrites), "RewriteSingleOrDefault")>

      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>, Func<TSource, Boolean>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>, Func<TSource, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SingleOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1485
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the first item of the given source collection that matches the given predicate or the item type default value, if the collection is empty or no item matches the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSingleOrDefault<>), "CreateExpressionForPredicate2", false)]

      [SetExpressionRewriter(typeof(ObservableSingleOrDefault<>), "CreateSetExpressionWithPredicate2")]

      public static TSource SingleOrDefault<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, bool>> predicate, Func<TSource, bool> predicateCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: The filter predicate
    - id: predicateCompiled
      type: System.Func{{TSource},System.Boolean}
      description: The filter predicate precompiled
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The first item of the collection that matches the predicate or the type default value
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSingleOrDefault(Of )), "CreateExpressionForPredicate2", False)>

      <SetExpressionRewriter(GetType(ObservableSingleOrDefault(Of )), "CreateSetExpressionWithPredicate2")>

      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IEnumerableExpression(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean)), predicateCompiled As Func(Of TSource, Boolean)) As TSource
  overload: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Int32})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Int32})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Int32})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Int32>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Int32>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Int32>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1501
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumIntExpression", false)]

      public static int Sum(this IEnumerableExpression<int> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Int32}
      description: The collection of numbers
    return:
      type: System.Int32
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumIntExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Integer)) As Integer
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Int32))
  name.vb: Sum(IEnumerableExpression(Of Int32))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Int64})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Int64})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Int64})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Int64>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Int64>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Int64>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1513
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLongExpression", false)]

      public static long Sum(this IEnumerableExpression<long> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Int64}
      description: The collection of numbers
    return:
      type: System.Int64
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLongExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Long)) As Long
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Int64))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Int64))
  name.vb: Sum(IEnumerableExpression(Of Int64))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Single})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Single})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Single})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Single>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Single>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Single>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1525
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumFloatExpression", false)]

      public static float Sum(this IEnumerableExpression<float> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Single}
      description: The collection of numbers
    return:
      type: System.Single
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumFloatExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Single)) As Single
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Single))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Single))
  name.vb: Sum(IEnumerableExpression(Of Single))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Double})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Double})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Double})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Double>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Double>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1537
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumDoubleExpression", false)]

      public static double Sum(this IEnumerableExpression<double> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Double}
      description: The collection of numbers
    return:
      type: System.Double
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumDoubleExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Double)) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Double))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Double))
  name.vb: Sum(IEnumerableExpression(Of Double))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Decimal})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Decimal})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Decimal})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Decimal>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Decimal>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Decimal>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1549
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumDecimalExpression", false)]

      public static decimal Sum(this IEnumerableExpression<decimal> source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Decimal}
      description: The collection of numbers
    return:
      type: System.Decimal
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumDecimalExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Decimal)) As Decimal
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Decimal))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Decimal))
  name.vb: Sum(IEnumerableExpression(Of Decimal))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Nullable<Int32>>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Nullable<Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1561
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableIntExpression", false)]

      public static int? Sum(this IEnumerableExpression<int? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableIntExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Integer?)) As Integer?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Nullable(Of Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(IEnumerableExpression(Of Nullable(Of Int32)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Nullable<Int64>>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Nullable<Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1573
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableLongExpression", false)]

      public static long? Sum(this IEnumerableExpression<long? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableLongExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Long?)) As Long?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Nullable(Of Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(IEnumerableExpression(Of Nullable(Of Int64)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Nullable<Single>>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Nullable<Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1585
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableFloatExpression", false)]

      public static float? Sum(this IEnumerableExpression<float? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Single}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableFloatExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Single?)) As Single?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Nullable(Of Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Single)))
  name.vb: Sum(IEnumerableExpression(Of Nullable(Of Single)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Nullable<Double>>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Nullable<Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1597
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableDoubleExpression", false)]

      public static double? Sum(this IEnumerableExpression<double? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableDoubleExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Double?)) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Nullable(Of Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Double)))
  name.vb: Sum(IEnumerableExpression(Of Nullable(Of Double)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  id: Sum(NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum(IEnumerableExpression<Nullable<Decimal>>)
  nameWithType: ExpressionExtensions.Sum(IEnumerableExpression<Nullable<Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1609
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableDecimalExpression", false)]

      public static decimal? Sum(this IEnumerableExpression<decimal? > source)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableDecimalExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(source As IEnumerableExpression(Of Decimal?)) As Decimal?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  nameWithType.vb: ExpressionExtensions.Sum(IEnumerableExpression(Of Nullable(Of Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(IEnumerableExpression(Of Nullable(Of Decimal)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1622
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaIntExpression", false)]

      public static int Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, int>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaIntExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Integer
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1637
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaLongExpression", false)]

      public static long Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, long>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaLongExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Long
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1652
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaFloatExpression", false)]

      public static float Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, float>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Single
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaFloatExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Single
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1667
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaDoubleExpression", false)]

      public static double Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, double>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Double
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaDoubleExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Double
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1682
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaDecimalExpression", false)]

      public static decimal Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, decimal>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaDecimalExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Decimal
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1697
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableIntExpression", false)]

      public static int? Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, int? >> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableIntExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Integer?))) As Integer?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1712
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableLongExpression", false)]

      public static long? Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, long? >> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableLongExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Long?))) As Long?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1727
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableFloatExpression", false)]

      public static float? Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, float? >> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableFloatExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Single?))) As Single?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1742
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableDoubleExpression", false)]

      public static double? Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, double? >> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableDoubleExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Double?))) As Double?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1757
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableDecimalExpression", false)]

      public static decimal? Sum<TSource>(this IEnumerableExpression<TSource> source, Expression<Func<TSource, decimal? >> selector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableDecimalExpression", False)>

      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IEnumerableExpression(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?))) As Decimal?
  overload: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
- uid: NMF.Expressions.Linq.ExpressionExtensions.ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: ThenBy<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.ThenBy<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.ThenBy<TItem, TKey>(NMF.Expressions.IOrderableEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1773
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate ascending\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> ThenBy<TItem, TKey>(this IOrderableEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TItem, TKey)(source As IOrderableEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.ThenBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.ThenBy(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.ThenBy(Of TItem, TKey)(NMF.Expressions.IOrderableEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: ThenBy(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: ThenBy<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.ThenBy<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.ThenBy<TItem, TKey>(NMF.Expressions.IOrderableEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenBy
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1788
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate ascending\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> ThenBy<TItem, TKey>(this IOrderableEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer to determine comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TItem, TKey)(source As IOrderableEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.ThenBy*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.ThenBy(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.ThenBy(Of TItem, TKey)(NMF.Expressions.IOrderableEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: ThenByDescending<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.ThenByDescending<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending<TItem, TKey>(NMF.Expressions.IOrderableEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenByDescending
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1802
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate descending\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> ThenByDescending<TItem, TKey>(this IOrderableEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TItem, TKey)(source As IOrderableEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.ThenByDescending(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending(Of TItem, TKey)(NMF.Expressions.IOrderableEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: ThenByDescending(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(NMF.Expressions.IOrderableEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: ThenByDescending<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.ThenByDescending<TItem, TKey>(IOrderableEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending<TItem, TKey>(NMF.Expressions.IOrderableEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenByDescending
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1817
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate descending\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IOrderableEnumerableExpression<TItem> ThenByDescending<TItem, TKey>(this IOrderableEnumerableExpression<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer to determine comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TItem, TKey)(source As IOrderableEnumerableExpression(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableEnumerableExpression(Of TItem)
  overload: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.ThenByDescending(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending(Of TItem, TKey)(NMF.Expressions.IOrderableEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TItem, TKey)(IOrderableEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TopX
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1832
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the top x elements of the given collection, ordered by the given feature\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableTopX<, >), "CreateExpressionSelector", false)]

      public static KeyValuePair<TItem, TKey>[] TopX<TItem, TKey>(this IEnumerableExpression<TItem> source, int x, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TItem}}
      description: The element source
    - id: x
      type: System.Int32
      description: A number indicating how many items should be selected
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: An expression to denote the selection of key features
    typeParameters:
    - id: TItem
      description: The item type
    - id: TKey
      description: The key type
    return:
      type: System.Collections.Generic.KeyValuePair{{TItem},{TKey}}[]
      description: An array with the largest entries of the underlying collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableTopX(Of , )), "CreateExpressionSelector", False)>

      <ExtensionAttribute>

      Public Shared Function TopX(Of TItem, TKey)(source As IEnumerableExpression(Of TItem), x As Integer, keySelector As Expression(Of Func(Of TItem, TKey))) As KeyValuePair(Of TItem, TKey)()
  overload: NMF.Expressions.Linq.ExpressionExtensions.TopX*
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TopX
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1848
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the top x elements of the given collection, ordered by the given feature\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableTopX<, >), "CreateExpressionSelectorComparer", false)]

      public static KeyValuePair<TItem, TKey>[] TopX<TItem, TKey>(this IEnumerableExpression<TItem> source, int x, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TItem}}
      description: The element source
    - id: x
      type: System.Int32
      description: A number indicating how many items should be selected
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: An expression to denote the selection of key features
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A custom comparer
    typeParameters:
    - id: TItem
      description: The item type
    - id: TKey
      description: The key type
    return:
      type: System.Collections.Generic.KeyValuePair{{TItem},{TKey}}[]
      description: An array with the largest entries of the underlying collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableTopX(Of , )), "CreateExpressionSelectorComparer", False)>

      <ExtensionAttribute>

      Public Shared Function TopX(Of TItem, TKey)(source As IEnumerableExpression(Of TItem), x As Integer, keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As KeyValuePair(Of TItem, TKey)()
  overload: NMF.Expressions.Linq.ExpressionExtensions.TopX*
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Union
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1887
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nUnions the current collection with the given other collection \n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Union<TSource>(this IEnumerableExpression<TSource> source, IEnumerable<TSource> source2)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The current collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The given other collection
    typeParameters:
    - id: TSource
      description: The elements type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: A collection containing the union of both collections
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(source As IEnumerableExpression(Of TSource), source2 As IEnumerable(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Union*
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Union
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1900
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nUnions the current collection with the given other collection \n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TSource> Union<TSource>(this IEnumerableExpression<TSource> source, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The current collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The given other collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: A comparer to determine equality
    typeParameters:
    - id: TSource
      description: The elements type
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: A collection containing the union of both collections
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(source As IEnumerableExpression(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Union*
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1912
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ExpressionCompileRewriter(typeof(ExpressionExtensions.Rewrites), "RewriteWhereEnumerable")]

      public static IEnumerableExpression<T> Where<T>(this IEnumerableExpression<T> source, Expression<Func<T, bool>> filter)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExpressionCompileRewriter(GetType(ExpressionExtensions.Rewrites), "RewriteWhereEnumerable")>

      <ExtensionAttribute>

      Public Shared Function Where(Of T)(source As IEnumerableExpression(Of T), filter As Expression(Of Func(Of T, Boolean))) As IEnumerableExpression(Of T)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Where*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  id: Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Func<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1927
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static IEnumerableExpression<T> Where<T>(this IEnumerableExpression<T> source, Expression<Func<T, bool>> filter, Func<T, bool> filterCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    - id: filterCompiled
      type: System.Func{{T},System.Boolean}
      description: The filter predicate precompiled
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function Where(Of T)(source As IEnumerableExpression(Of T), filter As Expression(Of Func(Of T, Boolean)), filterCompiled As Func(Of T, Boolean)) As IEnumerableExpression(Of T)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Where*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Func(Of T, System.Boolean))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(ICollectionExpression<T>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.Where<T>(ICollectionExpression<T>, Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.ICollectionExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1940
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      [ExpressionCompileRewriter(typeof(ExpressionExtensions.Rewrites), "RewriteWhereCollection")]

      public static ICollectionExpression<T> Where<T>(this ICollectionExpression<T> source, Expression<Func<T, bool>> filter)
    parameters:
    - id: source
      type: NMF.Expressions.ICollectionExpression{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.ICollectionExpression{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExpressionCompileRewriter(GetType(ExpressionExtensions.Rewrites), "RewriteWhereCollection")>

      <ExtensionAttribute>

      Public Shared Function Where(Of T)(source As ICollectionExpression(Of T), filter As Expression(Of Func(Of T, Boolean))) As ICollectionExpression(Of T)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Where*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Where(Of T)(ICollectionExpression(Of T), Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.ICollectionExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Where(Of T)(ICollectionExpression(Of T), Expression(Of Func(Of T, Boolean)))
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean},System.Action{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean},System.Action{``0,System.Boolean})
  id: Where``1(NMF.Expressions.ICollectionExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean},System.Action{``0,System.Boolean})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(ICollectionExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>, Action<T, Boolean>)
  nameWithType: ExpressionExtensions.Where<T>(ICollectionExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>, Action<T, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.ICollectionExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Func<T, System.Boolean>, System.Action<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ExpressionExtensions.cs
    startLine: 1956
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: >-
      [ParameterDataflow(1, 0, 0)]

      public static ICollectionExpression<T> Where<T>(this ICollectionExpression<T> source, Expression<Func<T, bool>> filter, Func<T, bool> filterGetter, Action<T, bool> filterSetter)
    parameters:
    - id: source
      type: NMF.Expressions.ICollectionExpression{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    - id: filterGetter
      type: System.Func{{T},System.Boolean}
      description: A precompiled filter getter
    - id: filterSetter
      type: System.Action{{T},System.Boolean}
      description: A precompiled filter setter
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.ICollectionExpression{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: >-
      <ParameterDataflow(1, 0, 0)>

      <ExtensionAttribute>

      Public Shared Function Where(Of T)(source As ICollectionExpression(Of T), filter As Expression(Of Func(Of T, Boolean)), filterGetter As Func(Of T, Boolean), filterSetter As Action(Of T, Boolean)) As ICollectionExpression(Of T)
  overload: NMF.Expressions.Linq.ExpressionExtensions.Where*
  attributes:
  - type: NMF.Expressions.ParameterDataflowAttribute
    ctor: NMF.Expressions.ParameterDataflowAttribute.#ctor(System.Int32,System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 1
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 0
  nameWithType.vb: ExpressionExtensions.Where(Of T)(ICollectionExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean), Action(Of T, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.ICollectionExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Func(Of T, System.Boolean), System.Action(Of T, System.Boolean))
  name.vb: Where(Of T)(ICollectionExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean), Action(Of T, Boolean))
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.All*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.All
  name: All
  nameWithType: ExpressionExtensions.All
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All
- uid: NMF.Expressions.IEnumerableExpression{{TSource}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TSource>
  nameWithType: IEnumerableExpression<TSource>
  fullName: NMF.Expressions.IEnumerableExpression<TSource>
  nameWithType.vb: IEnumerableExpression(Of TSource)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TSource)
  name.vb: IEnumerableExpression(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Boolean>>
  nameWithType: Expression<Func<TSource, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TSource, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))
  name.vb: Expression(Of Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Any
  name: Any
  nameWithType: ExpressionExtensions.Any
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Average
  name: Average
  nameWithType: ExpressionExtensions.Average
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average
- uid: NMF.Expressions.IEnumerableExpression{System.Int32}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Int32}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Int32>
  nameWithType: IEnumerableExpression<Int32>
  fullName: NMF.Expressions.IEnumerableExpression<System.Int32>
  nameWithType.vb: IEnumerableExpression(Of Int32)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Int32)
  name.vb: IEnumerableExpression(Of Int32)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: NMF.Expressions.IEnumerableExpression{System.Int64}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Int64}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Int64>
  nameWithType: IEnumerableExpression<Int64>
  fullName: NMF.Expressions.IEnumerableExpression<System.Int64>
  nameWithType.vb: IEnumerableExpression(Of Int64)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Int64)
  name.vb: IEnumerableExpression(Of Int64)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{System.Single}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Single}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Single>
  nameWithType: IEnumerableExpression<Single>
  fullName: NMF.Expressions.IEnumerableExpression<System.Single>
  nameWithType.vb: IEnumerableExpression(Of Single)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Single)
  name.vb: IEnumerableExpression(Of Single)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: NMF.Expressions.IEnumerableExpression{System.Double}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Double}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Double>
  nameWithType: IEnumerableExpression<Double>
  fullName: NMF.Expressions.IEnumerableExpression<System.Double>
  nameWithType.vb: IEnumerableExpression(Of Double)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Double)
  name.vb: IEnumerableExpression(Of Double)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{System.Decimal}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Decimal}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Decimal>
  nameWithType: IEnumerableExpression<Decimal>
  fullName: NMF.Expressions.IEnumerableExpression<System.Decimal>
  nameWithType.vb: IEnumerableExpression(Of Decimal)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Decimal)
  name.vb: IEnumerableExpression(Of Decimal)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int32}}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Nullable<Int32>>
  nameWithType: IEnumerableExpression<Nullable<Int32>>
  fullName: NMF.Expressions.IEnumerableExpression<System.Nullable<System.Int32>>
  nameWithType.vb: IEnumerableExpression(Of Nullable(Of Int32))
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Int32))
  name.vb: IEnumerableExpression(Of Nullable(Of Int32))
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Nullable{System.Int64}}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Nullable<Int64>>
  nameWithType: IEnumerableExpression<Nullable<Int64>>
  fullName: NMF.Expressions.IEnumerableExpression<System.Nullable<System.Int64>>
  nameWithType.vb: IEnumerableExpression(Of Nullable(Of Int64))
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Int64))
  name.vb: IEnumerableExpression(Of Nullable(Of Int64))
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Nullable{System.Single}}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Nullable<Single>>
  nameWithType: IEnumerableExpression<Nullable<Single>>
  fullName: NMF.Expressions.IEnumerableExpression<System.Nullable<System.Single>>
  nameWithType.vb: IEnumerableExpression(Of Nullable(Of Single))
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Single))
  name.vb: IEnumerableExpression(Of Nullable(Of Single))
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  nameWithType.vb: Nullable(Of Single)
  fullName.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Nullable{System.Double}}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Nullable<Double>>
  nameWithType: IEnumerableExpression<Nullable<Double>>
  fullName: NMF.Expressions.IEnumerableExpression<System.Nullable<System.Double>>
  nameWithType.vb: IEnumerableExpression(Of Nullable(Of Double))
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Double))
  name.vb: IEnumerableExpression(Of Nullable(Of Double))
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Nullable{System.Decimal}}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Nullable<Decimal>>
  nameWithType: IEnumerableExpression<Nullable<Decimal>>
  fullName: NMF.Expressions.IEnumerableExpression<System.Nullable<System.Decimal>>
  nameWithType.vb: IEnumerableExpression(Of Nullable(Of Decimal))
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of System.Decimal))
  name.vb: IEnumerableExpression(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  commentId: T:System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  nameWithType: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  nameWithType.vb: Nullable(Of Decimal)
  fullName.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Int32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Int32>>
  nameWithType: Expression<Func<TSource, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>
  nameWithType.vb: Expression(Of Func(Of TSource, Int32))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32))
  name.vb: Expression(Of Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Int64}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Int64>>
  nameWithType: Expression<Func<TSource, Int64>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>
  nameWithType.vb: Expression(Of Func(Of TSource, Int64))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64))
  name.vb: Expression(Of Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Single}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Single>>
  nameWithType: Expression<Func<TSource, Single>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>
  nameWithType.vb: Expression(Of Func(Of TSource, Single))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single))
  name.vb: Expression(Of Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Double}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Double>>
  nameWithType: Expression<Func<TSource, Double>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>
  nameWithType.vb: Expression(Of Func(Of TSource, Double))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double))
  name.vb: Expression(Of Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Decimal>>
  nameWithType: Expression<Func<TSource, Decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>
  nameWithType.vb: Expression(Of Func(Of TSource, Decimal))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal))
  name.vb: Expression(Of Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Int32>>>
  nameWithType: Expression<Func<TSource, Nullable<Int32>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Int32)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Int64>>>
  nameWithType: Expression<Func<TSource, Nullable<Int64>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Int64)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Single>>>
  nameWithType: Expression<Func<TSource, Nullable<Single>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Single)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Double>>>
  nameWithType: Expression<Func<TSource, Nullable<Double>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Double)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<Decimal>>>
  nameWithType: Expression<Func<TSource, Nullable<Decimal>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of Decimal)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: OfType(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType<TResult>
    nameWithType: ExpressionExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType(Of TResult)
    nameWithType: ExpressionExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Cast*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Cast
  name: Cast
  nameWithType: ExpressionExtensions.Cast
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: NMF.Expressions.IEnumerableExpression{{TResult}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TResult>
  nameWithType: IEnumerableExpression<TResult>
  fullName: NMF.Expressions.IEnumerableExpression<TResult>
  nameWithType.vb: IEnumerableExpression(Of TResult)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TResult)
  name.vb: IEnumerableExpression(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Concat*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Concat
  name: Concat
  nameWithType: ExpressionExtensions.Concat
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Contains
  name: Contains
  nameWithType: ExpressionExtensions.Contains
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  nameWithType: IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  nameWithType.vb: IEqualityComparer(Of TSource)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Count
  name: Count
  nameWithType: ExpressionExtensions.Count
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Distinct
  name: Distinct
  nameWithType: ExpressionExtensions.Distinct
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Except
  name: Except
  nameWithType: ExpressionExtensions.Except
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault
  name: FirstOrDefault
  nameWithType: ExpressionExtensions.FirstOrDefault
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.GroupBy
  name: GroupBy
  nameWithType: ExpressionExtensions.GroupBy
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TKey>>
  nameWithType: Expression<Func<TSource, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TKey>>
  nameWithType.vb: Expression(Of Func(Of TSource, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey))
  name.vb: Expression(Of Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{NMF.Expressions.IGroupingExpression{{TKey},{TSource}}}
  commentId: T:NMF.Expressions.IEnumerableExpression{NMF.Expressions.IGroupingExpression{``1,``0}}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<IGroupingExpression<TKey, TSource>>
  nameWithType: IEnumerableExpression<IGroupingExpression<TKey, TSource>>
  fullName: NMF.Expressions.IEnumerableExpression<NMF.Expressions.IGroupingExpression<TKey, TSource>>
  nameWithType.vb: IEnumerableExpression(Of IGroupingExpression(Of TKey, TSource))
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of NMF.Expressions.IGroupingExpression(Of TKey, TSource))
  name.vb: IEnumerableExpression(Of IGroupingExpression(Of TKey, TSource))
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
    nameWithType: IGroupingExpression
    fullName: NMF.Expressions.IGroupingExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
    nameWithType: IGroupingExpression
    fullName: NMF.Expressions.IGroupingExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TKey, IEnumerable<TSource>, TResult>>
  nameWithType: Expression<Func<TKey, IEnumerable<TSource>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>
  nameWithType.vb: Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin
  name: GroupJoin
  nameWithType: ExpressionExtensions.GroupJoin
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin
- uid: NMF.Expressions.IEnumerableExpression{{TOuter}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TOuter>
  nameWithType: IEnumerableExpression<TOuter>
  fullName: NMF.Expressions.IEnumerableExpression<TOuter>
  nameWithType.vb: IEnumerableExpression(Of TOuter)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TOuter)
  name.vb: IEnumerableExpression(Of TOuter)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TInner>
  nameWithType: IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  nameWithType.vb: IEnumerable(Of TInner)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TOuter, TKey>>
  nameWithType: Expression<Func<TOuter, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>
  nameWithType.vb: Expression(Of Func(Of TOuter, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey))
  name.vb: Expression(Of Func(Of TOuter, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TInner, TKey>>
  nameWithType: Expression<Func<TInner, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInner, TKey>>
  nameWithType.vb: Expression(Of Func(Of TInner, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey))
  name.vb: Expression(Of Func(Of TInner, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
  nameWithType: Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>
  nameWithType.vb: Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Intersect
  name: Intersect
  nameWithType: ExpressionExtensions.Intersect
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf
  name: IsProperSubsetOf
  nameWithType: ExpressionExtensions.IsProperSubsetOf
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf
- uid: NMF.Expressions.IEnumerableExpression{{T}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf
  name: IsProperSupersetOf
  nameWithType: ExpressionExtensions.IsProperSupersetOf
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf
  name: IsSubsetOf
  nameWithType: ExpressionExtensions.IsSubsetOf
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf
  name: IsSupersetOf
  nameWithType: ExpressionExtensions.IsSupersetOf
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Join
  name: Join
  nameWithType: ExpressionExtensions.Join
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TOuter, TInner, TResult>>
  nameWithType: Expression<Func<TOuter, TInner, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>
  nameWithType.vb: Expression(Of Func(Of TOuter, TInner, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult))
  name.vb: Expression(Of Func(Of TOuter, TInner, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Max
  name: Max
  nameWithType: ExpressionExtensions.Max
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max
- uid: System.Collections.Generic.IComparer{{TSource}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TSource>
  nameWithType: IComparer<TSource>
  fullName: System.Collections.Generic.IComparer<TSource>
  nameWithType.vb: IComparer(Of TSource)
  fullName.vb: System.Collections.Generic.IComparer(Of TSource)
  name.vb: IComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TResult>>
  nameWithType: Expression<Func<TSource, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult>>
  nameWithType.vb: Expression(Of Func(Of TSource, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))
  name.vb: Expression(Of Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{{TSource},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TResult>
  nameWithType: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  nameWithType.vb: Func(Of TSource, TResult)
  fullName.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TResult}}
  commentId: T:System.Collections.Generic.IComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TResult>
  nameWithType: IComparer<TResult>
  fullName: System.Collections.Generic.IComparer<TResult>
  nameWithType.vb: IComparer(Of TResult)
  fullName.vb: System.Collections.Generic.IComparer(Of TResult)
  name.vb: IComparer(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{System.Nullable{{TSource}}}
  commentId: T:NMF.Expressions.IEnumerableExpression{System.Nullable{``0}}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<Nullable<TSource>>
  nameWithType: IEnumerableExpression<Nullable<TSource>>
  fullName: NMF.Expressions.IEnumerableExpression<System.Nullable<TSource>>
  nameWithType.vb: IEnumerableExpression(Of Nullable(Of TSource))
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of System.Nullable(Of TSource))
  name.vb: IEnumerableExpression(Of Nullable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{{TSource}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TSource>
  nameWithType: Nullable<TSource>
  fullName: System.Nullable<TSource>
  nameWithType.vb: Nullable(Of TSource)
  fullName.vb: System.Nullable(Of TSource)
  name.vb: Nullable(Of TSource)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, Nullable<TResult>>>
  nameWithType: Expression<Func<TSource, Nullable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>
  nameWithType.vb: Expression(Of Func(Of TSource, Nullable(Of TResult)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult)))
  name.vb: Expression(Of Func(Of TSource, Nullable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{{TResult}}
  commentId: T:System.Nullable{``1}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TResult>
  nameWithType: Nullable<TResult>
  fullName: System.Nullable<TResult>
  nameWithType.vb: Nullable(Of TResult)
  fullName.vb: System.Nullable(Of TResult)
  name.vb: Nullable(Of TResult)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Min
  name: Min
  nameWithType: ExpressionExtensions.Min
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.OfType
  name: OfType
  nameWithType: ExpressionExtensions.OfType
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType
- uid: NMF.Expressions.ICollectionExpression{{TSource}}
  commentId: T:NMF.Expressions.ICollectionExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<TSource>
  nameWithType: ICollectionExpression<TSource>
  fullName: NMF.Expressions.ICollectionExpression<TSource>
  nameWithType.vb: ICollectionExpression(Of TSource)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of TSource)
  name.vb: ICollectionExpression(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression{{TResult}}
  commentId: T:NMF.Expressions.ICollectionExpression{``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<TResult>
  nameWithType: ICollectionExpression<TResult>
  fullName: NMF.Expressions.ICollectionExpression<TResult>
  nameWithType.vb: ICollectionExpression(Of TResult)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of TResult)
  name.vb: ICollectionExpression(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression
  commentId: T:NMF.Expressions.ICollectionExpression
  parent: NMF.Expressions
  name: ICollectionExpression
  nameWithType: ICollectionExpression
  fullName: NMF.Expressions.ICollectionExpression
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.OrderBy
  name: OrderBy
  nameWithType: ExpressionExtensions.OrderBy
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy
- uid: NMF.Expressions.IEnumerableExpression{{TItem}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TItem>
  nameWithType: IEnumerableExpression<TItem>
  fullName: NMF.Expressions.IEnumerableExpression<TItem>
  nameWithType.vb: IEnumerableExpression(Of TItem)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TItem)
  name.vb: IEnumerableExpression(Of TItem)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TItem, TKey>>
  nameWithType: Expression<Func<TItem, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TItem, TKey>>
  nameWithType.vb: Expression(Of Func(Of TItem, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey))
  name.vb: Expression(Of Func(Of TItem, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IOrderableEnumerableExpression{{TItem}}
  commentId: T:NMF.Expressions.IOrderableEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IOrderableEnumerableExpression`1
  name: IOrderableEnumerableExpression<TItem>
  nameWithType: IOrderableEnumerableExpression<TItem>
  fullName: NMF.Expressions.IOrderableEnumerableExpression<TItem>
  nameWithType.vb: IOrderableEnumerableExpression(Of TItem)
  fullName.vb: NMF.Expressions.IOrderableEnumerableExpression(Of TItem)
  name.vb: IOrderableEnumerableExpression(Of TItem)
  spec.csharp:
  - uid: NMF.Expressions.IOrderableEnumerableExpression`1
    name: IOrderableEnumerableExpression
    nameWithType: IOrderableEnumerableExpression
    fullName: NMF.Expressions.IOrderableEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IOrderableEnumerableExpression`1
    name: IOrderableEnumerableExpression
    nameWithType: IOrderableEnumerableExpression
    fullName: NMF.Expressions.IOrderableEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IOrderableEnumerableExpression`1
  commentId: T:NMF.Expressions.IOrderableEnumerableExpression`1
  name: IOrderableEnumerableExpression<T>
  nameWithType: IOrderableEnumerableExpression<T>
  fullName: NMF.Expressions.IOrderableEnumerableExpression<T>
  nameWithType.vb: IOrderableEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IOrderableEnumerableExpression(Of T)
  name.vb: IOrderableEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IOrderableEnumerableExpression`1
    name: IOrderableEnumerableExpression
    nameWithType: IOrderableEnumerableExpression
    fullName: NMF.Expressions.IOrderableEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IOrderableEnumerableExpression`1
    name: IOrderableEnumerableExpression
    nameWithType: IOrderableEnumerableExpression
    fullName: NMF.Expressions.IOrderableEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  commentId: T:System.Collections.Generic.IComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  nameWithType: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  nameWithType.vb: IComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending
  name: OrderByDescending
  nameWithType: ExpressionExtensions.OrderByDescending
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Select
  name: Select
  nameWithType: ExpressionExtensions.Select
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.SelectMany
  name: SelectMany
  nameWithType: ExpressionExtensions.SelectMany
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TIntermediate}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, IEnumerable<TIntermediate>>>
  nameWithType: Expression<Func<TSource, IEnumerable<TIntermediate>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>
  nameWithType.vb: Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate)))
  name.vb: Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TIntermediate},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TIntermediate, TResult>>
  nameWithType: Expression<Func<TSource, TIntermediate, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>
  nameWithType.vb: Expression(Of Func(Of TSource, TIntermediate, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult))
  name.vb: Expression(Of Func(Of TSource, TIntermediate, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, IEnumerable<TResult>>>
  nameWithType: Expression<Func<TSource, IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>
  nameWithType.vb: Expression(Of Func(Of TSource, IEnumerable(Of TResult)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: Expression(Of Func(Of TSource, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.SetEquals
  name: SetEquals
  nameWithType: ExpressionExtensions.SetEquals
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault
  name: SingleOrDefault
  nameWithType: ExpressionExtensions.SingleOrDefault
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault
- uid: System.Func{{TSource},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Boolean>
  nameWithType: Func<TSource, Boolean>
  fullName: System.Func<TSource, System.Boolean>
  nameWithType.vb: Func(Of TSource, Boolean)
  fullName.vb: System.Func(Of TSource, System.Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Sum
  name: Sum
  nameWithType: ExpressionExtensions.Sum
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.ThenBy*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.ThenBy
  name: ThenBy
  nameWithType: ExpressionExtensions.ThenBy
  fullName: NMF.Expressions.Linq.ExpressionExtensions.ThenBy
- uid: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending
  name: ThenByDescending
  nameWithType: ExpressionExtensions.ThenByDescending
  fullName: NMF.Expressions.Linq.ExpressionExtensions.ThenByDescending
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.TopX
  name: TopX
  nameWithType: ExpressionExtensions.TopX
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX
- uid: System.Collections.Generic.KeyValuePair{{TItem},{TKey}}[]
  isExternal: true
  name: KeyValuePair<TItem, TKey>[]
  nameWithType: KeyValuePair<TItem, TKey>[]
  fullName: System.Collections.Generic.KeyValuePair<TItem, TKey>[]
  nameWithType.vb: KeyValuePair(Of TItem, TKey)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TItem, TKey)()
  name.vb: KeyValuePair(Of TItem, TKey)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Union
  name: Union
  nameWithType: ExpressionExtensions.Union
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where*
  commentId: Overload:NMF.Expressions.Linq.ExpressionExtensions.Where
  name: Where
  nameWithType: ExpressionExtensions.Where
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionExpression{{T}}
  commentId: T:NMF.Expressions.ICollectionExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: NMF.Expressions.ICollectionExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T},System.Boolean}
  commentId: T:System.Action{``0,System.Boolean}
  parent: System
  definition: System.Action`2
  name: Action<T, Boolean>
  nameWithType: Action<T, Boolean>
  fullName: System.Action<T, System.Boolean>
  nameWithType.vb: Action(Of T, Boolean)
  fullName.vb: System.Action(Of T, System.Boolean)
  name.vb: Action(Of T, Boolean)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
