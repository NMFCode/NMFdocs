### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ObservableAggregate`3
  commentId: T:NMF.Expressions.Linq.ObservableAggregate`3
  id: ObservableAggregate`3
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ObservableAggregate`3.#ctor(NMF.Expressions.INotifyEnumerable{`0},`1)
  - NMF.Expressions.Linq.ObservableAggregate`3.Accumulator
  - NMF.Expressions.Linq.ObservableAggregate`3.AddItem(`0)
  - NMF.Expressions.Linq.ObservableAggregate`3.Dependencies
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Changed
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#FreeReference
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Source
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#NewValue
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#OldValue
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#NewValue
  - NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#OldValue
  - NMF.Expressions.Linq.ObservableAggregate`3.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.Linq.ObservableAggregate`3.RemoveItem(`0)
  - NMF.Expressions.Linq.ObservableAggregate`3.ResetAccumulator
  - NMF.Expressions.Linq.ObservableAggregate`3.Source
  langs:
  - csharp
  - vb
  name: ObservableAggregate<TSource, TAccumulator, TResult>
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableAggregate
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 8
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: 'public abstract class ObservableAggregate<TSource, TAccumulator, TResult> : NotifyValue<TResult>, INotifyValue<TResult>, INotifiable, IDisposable, IValueChangedNotificationResult<TResult>, IValueChangedNotificationResult, INotificationResult'
    typeParameters:
    - id: TSource
    - id: TAccumulator
    - id: TResult
    content.vb: >-
      Public MustInherit Class ObservableAggregate(Of TSource, TAccumulator, TResult)

          Inherits NotifyValue(Of TResult)

          Implements INotifyValue(Of TResult), INotifiable, IDisposable, IValueChangedNotificationResult(Of TResult), IValueChangedNotificationResult, INotificationResult
  inheritance:
  - System.Object
  - NMF.Expressions.NotifyValue{{TResult}}
  implements:
  - NMF.Expressions.INotifyValue{{TResult}}
  - NMF.Expressions.INotifiable
  - System.IDisposable
  - NMF.Expressions.IValueChangedNotificationResult{{TResult}}
  - NMF.Expressions.IValueChangedNotificationResult
  - NMF.Expressions.INotificationResult
  inheritedMembers:
  - NMF.Expressions.NotifyValue{{TResult}}.Value
  - NMF.Expressions.NotifyValue{{TResult}}.Successors
  - NMF.Expressions.NotifyValue{{TResult}}.ExecutionMetaData
  - NMF.Expressions.NotifyValue{{TResult}}.ValueChanged
  - NMF.Expressions.NotifyValue{{TResult}}.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Expressions.NotifyValue{{TResult}}.OnValueChanged({TResult},{TResult})
  - NMF.Expressions.NotifyValue{{TResult}}.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult)
  name.vb: ObservableAggregate(Of TSource, TAccumulator, TResult)
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Accumulator
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.Accumulator
  id: Accumulator
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: Accumulator
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Accumulator
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Accumulator
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Accumulator
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 13
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected TAccumulator Accumulator { get; set; }
    parameters: []
    return:
      type: '{TAccumulator}'
    content.vb: Protected Property Accumulator As TAccumulator
  overload: NMF.Expressions.Linq.ObservableAggregate`3.Accumulator*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Accumulator
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Accumulator
- uid: NMF.Expressions.Linq.ObservableAggregate`3.#ctor(NMF.Expressions.INotifyEnumerable{`0},`1)
  commentId: M:NMF.Expressions.Linq.ObservableAggregate`3.#ctor(NMF.Expressions.INotifyEnumerable{`0},`1)
  id: '#ctor(NMF.Expressions.INotifyEnumerable{`0},`1)'
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: ObservableAggregate(INotifyEnumerable<TSource>, TAccumulator)
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.ObservableAggregate(INotifyEnumerable<TSource>, TAccumulator)
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.ObservableAggregate(NMF.Expressions.INotifyEnumerable<TSource>, TAccumulator)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 15
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected ObservableAggregate(INotifyEnumerable<TSource> source, TAccumulator accumulator)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
    - id: accumulator
      type: '{TAccumulator}'
    content.vb: Protected Sub New(source As INotifyEnumerable(Of TSource), accumulator As TAccumulator)
  overload: NMF.Expressions.Linq.ObservableAggregate`3.#ctor*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).ObservableAggregate(INotifyEnumerable(Of TSource), TAccumulator)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).ObservableAggregate(NMF.Expressions.INotifyEnumerable(Of TSource), TAccumulator)
  name.vb: ObservableAggregate(INotifyEnumerable(Of TSource), TAccumulator)
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Source
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.Source
  id: Source
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Source
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Source
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Source
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 25
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected INotifyEnumerable<TSource> Source { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
    content.vb: Protected ReadOnly Property Source As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableAggregate`3.Source*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Source
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Source
- uid: NMF.Expressions.Linq.ObservableAggregate`3.ResetAccumulator
  commentId: M:NMF.Expressions.Linq.ObservableAggregate`3.ResetAccumulator
  id: ResetAccumulator
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: ResetAccumulator()
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.ResetAccumulator()
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.ResetAccumulator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResetAccumulator
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 30
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected abstract void ResetAccumulator()
    content.vb: Protected MustOverride Sub ResetAccumulator
  overload: NMF.Expressions.Linq.ObservableAggregate`3.ResetAccumulator*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).ResetAccumulator()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).ResetAccumulator()
- uid: NMF.Expressions.Linq.ObservableAggregate`3.RemoveItem(`0)
  commentId: M:NMF.Expressions.Linq.ObservableAggregate`3.RemoveItem(`0)
  id: RemoveItem(`0)
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: RemoveItem(TSource)
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.RemoveItem(TSource)
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.RemoveItem(TSource)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemoveItem
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 32
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected abstract void RemoveItem(TSource item)
    parameters:
    - id: item
      type: '{TSource}'
    content.vb: Protected MustOverride Sub RemoveItem(item As TSource)
  overload: NMF.Expressions.Linq.ObservableAggregate`3.RemoveItem*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).RemoveItem(TSource)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).RemoveItem(TSource)
- uid: NMF.Expressions.Linq.ObservableAggregate`3.AddItem(`0)
  commentId: M:NMF.Expressions.Linq.ObservableAggregate`3.AddItem(`0)
  id: AddItem(`0)
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: AddItem(TSource)
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.AddItem(TSource)
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.AddItem(TSource)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AddItem
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 34
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected abstract void AddItem(TSource item)
    parameters:
    - id: item
      type: '{TSource}'
    content.vb: Protected MustOverride Sub AddItem(item As TSource)
  overload: NMF.Expressions.Linq.ObservableAggregate`3.AddItem*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).AddItem(TSource)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).AddItem(TSource)
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.ObservableAggregate`3.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 53
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public override INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public Overrides Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overridden: NMF.Expressions.NotifyValue{{TResult}}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  overload: NMF.Expressions.Linq.ObservableAggregate`3.Notify*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Notify(IList(Of INotificationResult))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Dependencies
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.Dependencies
  id: Dependencies
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 93
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public override IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public Overrides ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overridden: NMF.Expressions.NotifyValue{{TResult}}.Dependencies
  overload: NMF.Expressions.Linq.ObservableAggregate`3.Dependencies*
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Dependencies
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Dependencies
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#OldValue
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#OldValue
  id: NMF#Expressions#IValueChangedNotificationResult{TResult}#OldValue
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: IValueChangedNotificationResult<TResult>.OldValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult<TResult>.OldValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 96
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: TResult IValueChangedNotificationResult<TResult>.OldValue { get; }
    parameters: []
    return:
      type: '{TResult}'
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue As TResult Implements IValueChangedNotificationResult(Of TResult).OldValue
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#OldValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult{{TResult}}.OldValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#NewValue
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#NewValue
  id: NMF#Expressions#IValueChangedNotificationResult{TResult}#NewValue
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: IValueChangedNotificationResult<TResult>.NewValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult<TResult>.NewValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 98
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: TResult IValueChangedNotificationResult<TResult>.NewValue { get; }
    parameters: []
    return:
      type: '{TResult}'
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue As TResult Implements IValueChangedNotificationResult(Of TResult).NewValue
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#NewValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult{{TResult}}.NewValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#OldValue
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#OldValue
  id: NMF#Expressions#IValueChangedNotificationResult#OldValue
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: IValueChangedNotificationResult.OldValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult.OldValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult.OldValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IValueChangedNotificationResult.OldValue
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 100
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: object IValueChangedNotificationResult.OldValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.IValueChangedNotificationResult.OldValue As Object Implements IValueChangedNotificationResult.OldValue
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#OldValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult.OldValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.OldValue
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.OldValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.OldValue
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#NewValue
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#NewValue
  id: NMF#Expressions#IValueChangedNotificationResult#NewValue
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: IValueChangedNotificationResult.NewValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult.NewValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult.NewValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IValueChangedNotificationResult.NewValue
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 102
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: object IValueChangedNotificationResult.NewValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.IValueChangedNotificationResult.NewValue As Object Implements IValueChangedNotificationResult.NewValue
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#NewValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult.NewValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.NewValue
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.NewValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.NewValue
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Source
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Source
  id: NMF#Expressions#INotificationResult#Source
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: INotificationResult.Source
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.Source
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.Source
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.INotificationResult.Source
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 104
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: INotifiable INotificationResult.Source { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifiable
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.INotificationResult.Source As INotifiable Implements INotificationResult.Source
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Source*
  implements:
  - NMF.Expressions.INotificationResult.Source
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Source
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Source
  name.vb: NMF.Expressions.INotificationResult.Source
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Changed
  commentId: P:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Changed
  id: NMF#Expressions#INotificationResult#Changed
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: INotificationResult.Changed
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.Changed
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.Changed
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.INotificationResult.Changed
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 106
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: bool INotificationResult.Changed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.INotificationResult.Changed As Boolean Implements INotificationResult.Changed
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Changed*
  implements:
  - NMF.Expressions.INotificationResult.Changed
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Changed
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Changed
  name.vb: NMF.Expressions.INotificationResult.Changed
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  id: NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: INotificationResult.IncreaseReferences(Int32)
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.IncreaseReferences(Int32)
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.INotificationResult.IncreaseReferences
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 108
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: void INotificationResult.IncreaseReferences(int references)
    parameters:
    - id: references
      type: System.Int32
    content.vb: Sub NMF.Expressions.INotificationResult.IncreaseReferences(references As Integer) Implements INotificationResult.IncreaseReferences
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#IncreaseReferences*
  implements:
  - NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.IncreaseReferences(Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  name.vb: NMF.Expressions.INotificationResult.IncreaseReferences(Int32)
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#FreeReference
  commentId: M:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#FreeReference
  id: NMF#Expressions#INotificationResult#FreeReference
  isEii: true
  parent: NMF.Expressions.Linq.ObservableAggregate`3
  langs:
  - csharp
  - vb
  name: INotificationResult.FreeReference()
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.FreeReference()
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.FreeReference()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.INotificationResult.FreeReference
    path: src/Expressions/Expressions.Linq/Linq/ObservableAggregate.cs
    startLine: 110
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: void INotificationResult.FreeReference()
    content.vb: Sub NMF.Expressions.INotificationResult.FreeReference Implements INotificationResult.FreeReference
  overload: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#FreeReference*
  implements:
  - NMF.Expressions.INotificationResult.FreeReference
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.FreeReference()
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.FreeReference()
  name.vb: NMF.Expressions.INotificationResult.FreeReference()
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.NotifyValue{{TResult}}
  commentId: T:NMF.Expressions.NotifyValue{`2}
  parent: NMF.Expressions
  definition: NMF.Expressions.NotifyValue`1
  name: NotifyValue<TResult>
  nameWithType: NotifyValue<TResult>
  fullName: NMF.Expressions.NotifyValue<TResult>
  nameWithType.vb: NotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult)
  name.vb: NotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1
    name: NotifyValue
    nameWithType: NotifyValue
    fullName: NMF.Expressions.NotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1
    name: NotifyValue
    nameWithType: NotifyValue
    fullName: NMF.Expressions.NotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Expressions.IValueChangedNotificationResult{{TResult}}
  commentId: T:NMF.Expressions.IValueChangedNotificationResult{`2}
  parent: NMF.Expressions
  definition: NMF.Expressions.IValueChangedNotificationResult`1
  name: IValueChangedNotificationResult<TResult>
  nameWithType: IValueChangedNotificationResult<TResult>
  fullName: NMF.Expressions.IValueChangedNotificationResult<TResult>
  nameWithType.vb: IValueChangedNotificationResult(Of TResult)
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of TResult)
  name.vb: IValueChangedNotificationResult(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IValueChangedNotificationResult
  commentId: T:NMF.Expressions.IValueChangedNotificationResult
  parent: NMF.Expressions
  name: IValueChangedNotificationResult
  nameWithType: IValueChangedNotificationResult
  fullName: NMF.Expressions.IValueChangedNotificationResult
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: NMF.Expressions.NotifyValue{{TResult}}.Value
  commentId: P:NMF.Expressions.NotifyValue{`2}.Value
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.Value
  name: Value
  nameWithType: NotifyValue<TResult>.Value
  fullName: NMF.Expressions.NotifyValue<TResult>.Value
  nameWithType.vb: NotifyValue(Of TResult).Value
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).Value
- uid: NMF.Expressions.NotifyValue{{TResult}}.Successors
  commentId: P:NMF.Expressions.NotifyValue{`2}.Successors
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.Successors
  name: Successors
  nameWithType: NotifyValue<TResult>.Successors
  fullName: NMF.Expressions.NotifyValue<TResult>.Successors
  nameWithType.vb: NotifyValue(Of TResult).Successors
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).Successors
- uid: NMF.Expressions.NotifyValue{{TResult}}.ExecutionMetaData
  commentId: P:NMF.Expressions.NotifyValue{`2}.ExecutionMetaData
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: NotifyValue<TResult>.ExecutionMetaData
  fullName: NMF.Expressions.NotifyValue<TResult>.ExecutionMetaData
  nameWithType.vb: NotifyValue(Of TResult).ExecutionMetaData
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).ExecutionMetaData
- uid: NMF.Expressions.NotifyValue{{TResult}}.ValueChanged
  commentId: E:NMF.Expressions.NotifyValue{`2}.ValueChanged
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: NotifyValue<TResult>.ValueChanged
  fullName: NMF.Expressions.NotifyValue<TResult>.ValueChanged
  nameWithType.vb: NotifyValue(Of TResult).ValueChanged
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).ValueChanged
- uid: NMF.Expressions.NotifyValue{{TResult}}.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Expressions.NotifyValue{`2}.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  name: OnValueChanged(ValueChangedEventArgs)
  nameWithType: NotifyValue<TResult>.OnValueChanged(ValueChangedEventArgs)
  fullName: NMF.Expressions.NotifyValue<TResult>.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  nameWithType.vb: NotifyValue(Of TResult).OnValueChanged(ValueChangedEventArgs)
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
    name: OnValueChanged
    nameWithType: NotifyValue<TResult>.OnValueChanged
    fullName: NMF.Expressions.NotifyValue<TResult>.OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
    name: OnValueChanged
    nameWithType: NotifyValue(Of TResult).OnValueChanged
    fullName: NMF.Expressions.NotifyValue(Of TResult).OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue{{TResult}}.OnValueChanged({TResult},{TResult})
  commentId: M:NMF.Expressions.NotifyValue{`2}.OnValueChanged(`2,`2)
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
  name: OnValueChanged(TResult, TResult)
  nameWithType: NotifyValue<TResult>.OnValueChanged(TResult, TResult)
  fullName: NMF.Expressions.NotifyValue<TResult>.OnValueChanged(TResult, TResult)
  nameWithType.vb: NotifyValue(Of TResult).OnValueChanged(TResult, TResult)
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).OnValueChanged(TResult, TResult)
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
    name: OnValueChanged
    nameWithType: NotifyValue<TResult>.OnValueChanged
    fullName: NMF.Expressions.NotifyValue<TResult>.OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
    name: OnValueChanged
    nameWithType: NotifyValue(Of TResult).OnValueChanged
    fullName: NMF.Expressions.NotifyValue(Of TResult).OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue{{TResult}}.Dispose
  commentId: M:NMF.Expressions.NotifyValue{`2}.Dispose
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.Dispose
  name: Dispose()
  nameWithType: NotifyValue<TResult>.Dispose()
  fullName: NMF.Expressions.NotifyValue<TResult>.Dispose()
  nameWithType.vb: NotifyValue(Of TResult).Dispose()
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).Dispose()
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.Dispose
    name: Dispose
    nameWithType: NotifyValue<TResult>.Dispose
    fullName: NMF.Expressions.NotifyValue<TResult>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.Dispose
    name: Dispose
    nameWithType: NotifyValue(Of TResult).Dispose
    fullName: NMF.Expressions.NotifyValue(Of TResult).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.NotifyValue`1
  commentId: T:NMF.Expressions.NotifyValue`1
  name: NotifyValue<T>
  nameWithType: NotifyValue<T>
  fullName: NMF.Expressions.NotifyValue<T>
  nameWithType.vb: NotifyValue(Of T)
  fullName.vb: NMF.Expressions.NotifyValue(Of T)
  name.vb: NotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1
    name: NotifyValue
    nameWithType: NotifyValue
    fullName: NMF.Expressions.NotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1
    name: NotifyValue
    nameWithType: NotifyValue
    fullName: NMF.Expressions.NotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IValueChangedNotificationResult`1
  commentId: T:NMF.Expressions.IValueChangedNotificationResult`1
  name: IValueChangedNotificationResult<T>
  nameWithType: IValueChangedNotificationResult<T>
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>
  nameWithType.vb: IValueChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T)
  name.vb: IValueChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue`1.Value
  commentId: P:NMF.Expressions.NotifyValue`1.Value
  name: Value
  nameWithType: NotifyValue<T>.Value
  fullName: NMF.Expressions.NotifyValue<T>.Value
  nameWithType.vb: NotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Value
- uid: NMF.Expressions.NotifyValue`1.Successors
  commentId: P:NMF.Expressions.NotifyValue`1.Successors
  name: Successors
  nameWithType: NotifyValue<T>.Successors
  fullName: NMF.Expressions.NotifyValue<T>.Successors
  nameWithType.vb: NotifyValue(Of T).Successors
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Successors
- uid: NMF.Expressions.NotifyValue`1.ExecutionMetaData
  commentId: P:NMF.Expressions.NotifyValue`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: NotifyValue<T>.ExecutionMetaData
  fullName: NMF.Expressions.NotifyValue<T>.ExecutionMetaData
  nameWithType.vb: NotifyValue(Of T).ExecutionMetaData
  fullName.vb: NMF.Expressions.NotifyValue(Of T).ExecutionMetaData
- uid: NMF.Expressions.NotifyValue`1.ValueChanged
  commentId: E:NMF.Expressions.NotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: NotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.NotifyValue<T>.ValueChanged
  nameWithType.vb: NotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.NotifyValue(Of T).ValueChanged
- uid: NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  name: OnValueChanged(ValueChangedEventArgs)
  nameWithType: NotifyValue<T>.OnValueChanged(ValueChangedEventArgs)
  fullName: NMF.Expressions.NotifyValue<T>.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  nameWithType.vb: NotifyValue(Of T).OnValueChanged(ValueChangedEventArgs)
  fullName.vb: NMF.Expressions.NotifyValue(Of T).OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
    name: OnValueChanged
    nameWithType: NotifyValue<T>.OnValueChanged
    fullName: NMF.Expressions.NotifyValue<T>.OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
    name: OnValueChanged
    nameWithType: NotifyValue(Of T).OnValueChanged
    fullName: NMF.Expressions.NotifyValue(Of T).OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
  commentId: M:NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
  name: OnValueChanged(T, T)
  nameWithType: NotifyValue<T>.OnValueChanged(T, T)
  fullName: NMF.Expressions.NotifyValue<T>.OnValueChanged(T, T)
  nameWithType.vb: NotifyValue(Of T).OnValueChanged(T, T)
  fullName.vb: NMF.Expressions.NotifyValue(Of T).OnValueChanged(T, T)
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
    name: OnValueChanged
    nameWithType: NotifyValue<T>.OnValueChanged
    fullName: NMF.Expressions.NotifyValue<T>.OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
    name: OnValueChanged
    nameWithType: NotifyValue(Of T).OnValueChanged
    fullName: NMF.Expressions.NotifyValue(Of T).OnValueChanged
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue`1.Dispose
  commentId: M:NMF.Expressions.NotifyValue`1.Dispose
  name: Dispose()
  nameWithType: NotifyValue<T>.Dispose()
  fullName: NMF.Expressions.NotifyValue<T>.Dispose()
  nameWithType.vb: NotifyValue(Of T).Dispose()
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Dispose()
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.Dispose
    name: Dispose
    nameWithType: NotifyValue<T>.Dispose
    fullName: NMF.Expressions.NotifyValue<T>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.Dispose
    name: Dispose
    nameWithType: NotifyValue(Of T).Dispose
    fullName: NMF.Expressions.NotifyValue(Of T).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Accumulator*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.Accumulator
  name: Accumulator
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Accumulator
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Accumulator
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Accumulator
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Accumulator
- uid: '{TAccumulator}'
  commentId: '!:TAccumulator'
  definition: TAccumulator
  name: TAccumulator
  nameWithType: TAccumulator
  fullName: TAccumulator
- uid: TAccumulator
  name: TAccumulator
  nameWithType: TAccumulator
  fullName: TAccumulator
- uid: NMF.Expressions.Linq.ObservableAggregate`3.#ctor*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.#ctor
  name: ObservableAggregate
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.ObservableAggregate
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.ObservableAggregate
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).ObservableAggregate
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).ObservableAggregate
- uid: NMF.Expressions.INotifyEnumerable{{TSource}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TSource>
  nameWithType: INotifyEnumerable<TSource>
  fullName: NMF.Expressions.INotifyEnumerable<TSource>
  nameWithType.vb: INotifyEnumerable(Of TSource)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TSource)
  name.vb: INotifyEnumerable(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Source*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.Source
  name: Source
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Source
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Source
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Source
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Source
- uid: NMF.Expressions.Linq.ObservableAggregate`3.ResetAccumulator*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.ResetAccumulator
  name: ResetAccumulator
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.ResetAccumulator
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.ResetAccumulator
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).ResetAccumulator
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).ResetAccumulator
- uid: NMF.Expressions.Linq.ObservableAggregate`3.RemoveItem*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.RemoveItem
  name: RemoveItem
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.RemoveItem
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.RemoveItem
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).RemoveItem
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).RemoveItem
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: NMF.Expressions.Linq.ObservableAggregate`3.AddItem*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.AddItem
  name: AddItem
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.AddItem
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.AddItem
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).AddItem
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).AddItem
- uid: NMF.Expressions.NotifyValue{{TResult}}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.NotifyValue{`2}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  name: Notify(IList<INotificationResult>)
  nameWithType: NotifyValue<TResult>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.NotifyValue<TResult>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: NotifyValue(Of TResult).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: NotifyValue<TResult>.Notify
    fullName: NMF.Expressions.NotifyValue<TResult>.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: NotifyValue(Of TResult).Notify
    fullName: NMF.Expressions.NotifyValue(Of TResult).Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Notify*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.Notify
  name: Notify
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Notify
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Notify
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Notify
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Notify
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: NotifyValue<T>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.NotifyValue<T>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: NotifyValue(Of T).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: NotifyValue<T>.Notify
    fullName: NMF.Expressions.NotifyValue<T>.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: NotifyValue(Of T).Notify
    fullName: NMF.Expressions.NotifyValue(Of T).Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.NotifyValue{{TResult}}.Dependencies
  commentId: P:NMF.Expressions.NotifyValue{`2}.Dependencies
  parent: NMF.Expressions.NotifyValue{{TResult}}
  definition: NMF.Expressions.NotifyValue`1.Dependencies
  name: Dependencies
  nameWithType: NotifyValue<TResult>.Dependencies
  fullName: NMF.Expressions.NotifyValue<TResult>.Dependencies
  nameWithType.vb: NotifyValue(Of TResult).Dependencies
  fullName.vb: NMF.Expressions.NotifyValue(Of TResult).Dependencies
- uid: NMF.Expressions.Linq.ObservableAggregate`3.Dependencies*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.Dependencies
  name: Dependencies
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.Dependencies
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).Dependencies
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue`1.Dependencies
  commentId: P:NMF.Expressions.NotifyValue`1.Dependencies
  name: Dependencies
  nameWithType: NotifyValue<T>.Dependencies
  fullName: NMF.Expressions.NotifyValue<T>.Dependencies
  nameWithType.vb: NotifyValue(Of T).Dependencies
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Dependencies
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#OldValue*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#OldValue
  name: IValueChangedNotificationResult<TResult>.OldValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult<TResult>.OldValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
- uid: NMF.Expressions.IValueChangedNotificationResult{{TResult}}.OldValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult{`2}.OldValue
  parent: NMF.Expressions.IValueChangedNotificationResult{{TResult}}
  definition: NMF.Expressions.IValueChangedNotificationResult`1.OldValue
  name: OldValue
  nameWithType: IValueChangedNotificationResult<TResult>.OldValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<TResult>.OldValue
  nameWithType.vb: IValueChangedNotificationResult(Of TResult).OldValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of TResult).OldValue
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.IValueChangedNotificationResult`1.OldValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult`1.OldValue
  name: OldValue
  nameWithType: IValueChangedNotificationResult<T>.OldValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>.OldValue
  nameWithType.vb: IValueChangedNotificationResult(Of T).OldValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T).OldValue
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#NewValue*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult{TResult}#NewValue
  name: IValueChangedNotificationResult<TResult>.NewValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult<TResult>.NewValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
- uid: NMF.Expressions.IValueChangedNotificationResult{{TResult}}.NewValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult{`2}.NewValue
  parent: NMF.Expressions.IValueChangedNotificationResult{{TResult}}
  definition: NMF.Expressions.IValueChangedNotificationResult`1.NewValue
  name: NewValue
  nameWithType: IValueChangedNotificationResult<TResult>.NewValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<TResult>.NewValue
  nameWithType.vb: IValueChangedNotificationResult(Of TResult).NewValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of TResult).NewValue
- uid: NMF.Expressions.IValueChangedNotificationResult`1.NewValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult`1.NewValue
  name: NewValue
  nameWithType: IValueChangedNotificationResult<T>.NewValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>.NewValue
  nameWithType.vb: IValueChangedNotificationResult(Of T).NewValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T).NewValue
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#OldValue*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#OldValue
  name: IValueChangedNotificationResult.OldValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult.OldValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult.OldValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.OldValue
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.OldValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.OldValue
- uid: NMF.Expressions.IValueChangedNotificationResult.OldValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult.OldValue
  parent: NMF.Expressions.IValueChangedNotificationResult
  name: OldValue
  nameWithType: IValueChangedNotificationResult.OldValue
  fullName: NMF.Expressions.IValueChangedNotificationResult.OldValue
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#NewValue*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#IValueChangedNotificationResult#NewValue
  name: IValueChangedNotificationResult.NewValue
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.IValueChangedNotificationResult.NewValue
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.IValueChangedNotificationResult.NewValue
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.NewValue
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.IValueChangedNotificationResult.NewValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.NewValue
- uid: NMF.Expressions.IValueChangedNotificationResult.NewValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult.NewValue
  parent: NMF.Expressions.IValueChangedNotificationResult
  name: NewValue
  nameWithType: IValueChangedNotificationResult.NewValue
  fullName: NMF.Expressions.IValueChangedNotificationResult.NewValue
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Source*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Source
  name: INotificationResult.Source
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.Source
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.Source
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Source
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Source
  name.vb: NMF.Expressions.INotificationResult.Source
- uid: NMF.Expressions.INotificationResult.Source
  commentId: P:NMF.Expressions.INotificationResult.Source
  parent: NMF.Expressions.INotificationResult
  name: Source
  nameWithType: INotificationResult.Source
  fullName: NMF.Expressions.INotificationResult.Source
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Changed*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#Changed
  name: INotificationResult.Changed
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.Changed
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.Changed
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Changed
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.Changed
  name.vb: NMF.Expressions.INotificationResult.Changed
- uid: NMF.Expressions.INotificationResult.Changed
  commentId: P:NMF.Expressions.INotificationResult.Changed
  parent: NMF.Expressions.INotificationResult
  name: Changed
  nameWithType: INotificationResult.Changed
  fullName: NMF.Expressions.INotificationResult.Changed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#IncreaseReferences*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#IncreaseReferences
  name: INotificationResult.IncreaseReferences
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.IncreaseReferences
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.IncreaseReferences
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.IncreaseReferences
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.IncreaseReferences
  name.vb: NMF.Expressions.INotificationResult.IncreaseReferences
- uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  parent: NMF.Expressions.INotificationResult
  isExternal: true
  name: IncreaseReferences(Int32)
  nameWithType: INotificationResult.IncreaseReferences(Int32)
  fullName: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#FreeReference*
  commentId: Overload:NMF.Expressions.Linq.ObservableAggregate`3.NMF#Expressions#INotificationResult#FreeReference
  name: INotificationResult.FreeReference
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>.INotificationResult.FreeReference
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>.NMF.Expressions.INotificationResult.FreeReference
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.FreeReference
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult).NMF.Expressions.INotificationResult.FreeReference
  name.vb: NMF.Expressions.INotificationResult.FreeReference
- uid: NMF.Expressions.INotificationResult.FreeReference
  commentId: M:NMF.Expressions.INotificationResult.FreeReference
  parent: NMF.Expressions.INotificationResult
  name: FreeReference()
  nameWithType: INotificationResult.FreeReference()
  fullName: NMF.Expressions.INotificationResult.FreeReference()
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
