### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  id: INotifyValue`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.INotifyValue`1.Value
  - NMF.Expressions.INotifyValue`1.ValueChanged
  langs:
  - csharp
  - vb
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions/Public/INotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: INotifyValue
    path: src/Expressions/Expressions/Public/INotifyValue.cs
    startLine: 8
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents a simple incremental value\n"
  example: []
  syntax:
    content: 'public interface INotifyValue<out T> : INotifiable, IDisposable'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Interface INotifyValue(Of Out T)

          Inherits INotifiable
  inheritedMembers:
  - NMF.Expressions.INotifiable.Successors
  - NMF.Expressions.INotifiable.Dependencies
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.INotifiable.ExecutionMetaData
  - System.IDisposable.Dispose
  extensionMethods:
  - NMF.Expressions.INotifyValue`1.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  nameWithType.vb: INotifyValue(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
- uid: NMF.Expressions.INotifyValue`1.Value
  commentId: P:NMF.Expressions.INotifyValue`1.Value
  id: Value
  parent: NMF.Expressions.INotifyValue`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: INotifyValue<T>.Value
  fullName: NMF.Expressions.INotifyValue<T>.Value
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/INotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Expressions/Expressions/Public/INotifyValue.cs
    startLine: 13
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets the current value\n"
  example: []
  syntax:
    content: T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: ReadOnly Property Value As T
  overload: NMF.Expressions.INotifyValue`1.Value*
  nameWithType.vb: INotifyValue(Of T).Value
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.INotifyValue(Of T).Value
- uid: NMF.Expressions.INotifyValue`1.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue`1.ValueChanged
  id: ValueChanged
  parent: NMF.Expressions.INotifyValue`1
  langs:
  - csharp
  - vb
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  type: Event
  source:
    remote:
      path: Expressions/Expressions/Public/INotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChanged
    path: src/Expressions/Expressions/Public/INotifyValue.cs
    startLine: 18
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets fired when the value changed\n"
  example: []
  syntax:
    content: event EventHandler<ValueChangedEventArgs> ValueChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Event ValueChanged As EventHandler(Of ValueChangedEventArgs)
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  parent: NMF.Expressions.ReversableExtensions
  definition: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  name: AsReversable<T>(Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(System.Action(Of T))
  name.vb: AsReversable(Of T)(Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{``0})
    name: AsReversable<T>
    nameWithType: ReversableExtensions.AsReversable<T>
    fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{``0})
    name: AsReversable(Of T)
    nameWithType: ReversableExtensions.AsReversable(Of T)
    fullName: NMF.Expressions.ReversableExtensions.AsReversable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  isExternal: true
  name: AsReversable<T>(INotifyValue<T>, Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(INotifyValue<T>, Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(NMF.Expressions.INotifyValue<T>, System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(NMF.Expressions.INotifyValue(Of T), System.Action(Of T))
  name.vb: AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable<T>
    nameWithType: ReversableExtensions.AsReversable<T>
    fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable(Of T)
    nameWithType: ReversableExtensions.AsReversable(Of T)
    fullName: NMF.Expressions.ReversableExtensions.AsReversable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ReversableExtensions
  commentId: T:NMF.Expressions.ReversableExtensions
  parent: NMF.Expressions
  name: ReversableExtensions
  nameWithType: ReversableExtensions
  fullName: NMF.Expressions.ReversableExtensions
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.INotifyValue`1.Value*
  commentId: Overload:NMF.Expressions.INotifyValue`1.Value
  name: Value
  nameWithType: INotifyValue<T>.Value
  fullName: NMF.Expressions.INotifyValue<T>.Value
  nameWithType.vb: INotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyValue(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  commentId: T:System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<NMF.Expressions.ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Expressions.ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
