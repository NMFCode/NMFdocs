### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.SynchronizationComputation`2
  commentId: T:NMF.Synchronizations.SynchronizationComputation`2
  id: SynchronizationComputation`2
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.SynchronizationComputation`2.#ctor(TransformationRuleBase{`0,`1},TransformationRuleBase{`1,`0},IComputationContext,`0)
  - NMF.Synchronizations.SynchronizationComputation`2.AcceptNewOutput(`1)
  - NMF.Synchronizations.SynchronizationComputation`2.Dependencies
  - NMF.Synchronizations.SynchronizationComputation`2.Dispose
  - NMF.Synchronizations.SynchronizationComputation`2.DoWhenOutputIsAvailable(System.Action{`0,`1})
  - NMF.Synchronizations.SynchronizationComputation`2.ExecutionMetaData
  - NMF.Synchronizations.SynchronizationComputation`2.GetInput(System.Int32)
  - NMF.Synchronizations.SynchronizationComputation`2.Input
  - NMF.Synchronizations.SynchronizationComputation`2.IsOriginalComputation
  - NMF.Synchronizations.SynchronizationComputation`2.Notify(System.Collections.Generic.IList{INotificationResult})
  - NMF.Synchronizations.SynchronizationComputation`2.OmitCandidateSearch
  - NMF.Synchronizations.SynchronizationComputation`2.OnOutputChanged(ValueChangedEventArgs)
  - NMF.Synchronizations.SynchronizationComputation`2.Opposite
  - NMF.Synchronizations.SynchronizationComputation`2.OutputChanged
  - NMF.Synchronizations.SynchronizationComputation`2.OutputCore
  - NMF.Synchronizations.SynchronizationComputation`2.Successors
  - NMF.Synchronizations.SynchronizationComputation`2.SynchronizationContext
  - NMF.Synchronizations.SynchronizationComputation`2.SynchronizationRule
  langs:
  - csharp
  - vb
  name: SynchronizationComputation<TIn, TOut>
  nameWithType: SynchronizationComputation<TIn, TOut>
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationComputation
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 16
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: 'public abstract class SynchronizationComputation<TIn, TOut> : Computation, INotifyValue<TOut>, IOutputAccept<TOut> where TIn : class where TOut : class'
    typeParameters:
    - id: TIn
    - id: TOut
    content.vb: >-
      Public MustInherit Class SynchronizationComputation(Of TIn As Class, TOut As Class)
          Inherits Computation
          Implements INotifyValue(Of TOut), IOutputAccept(Of TOut)
  inheritance:
  - System.Object
  implements:
  - INotifyValue{{TOut}}
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut)
  name.vb: SynchronizationComputation(Of TIn, TOut)
- uid: NMF.Synchronizations.SynchronizationComputation`2.OutputChanged
  commentId: E:NMF.Synchronizations.SynchronizationComputation`2.OutputChanged
  id: OutputChanged
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: OutputChanged
  nameWithType: SynchronizationComputation<TIn, TOut>.OutputChanged
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.OutputChanged
  type: Event
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OutputChanged
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 22
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> OutputChanged
    return:
      type: System.EventHandler{ValueChangedEventArgs}
    content.vb: Public Event OutputChanged As EventHandler(Of ValueChangedEventArgs)
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).OutputChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).OutputChanged
- uid: NMF.Synchronizations.SynchronizationComputation`2.OmitCandidateSearch
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.OmitCandidateSearch
  id: OmitCandidateSearch
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: OmitCandidateSearch
  nameWithType: SynchronizationComputation<TIn, TOut>.OmitCandidateSearch
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.OmitCandidateSearch
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OmitCandidateSearch
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 24
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public bool OmitCandidateSearch { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property OmitCandidateSearch As Boolean
  overload: NMF.Synchronizations.SynchronizationComputation`2.OmitCandidateSearch*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).OmitCandidateSearch
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).OmitCandidateSearch
- uid: NMF.Synchronizations.SynchronizationComputation`2.OnOutputChanged(ValueChangedEventArgs)
  commentId: M:NMF.Synchronizations.SynchronizationComputation`2.OnOutputChanged(ValueChangedEventArgs)
  id: OnOutputChanged(ValueChangedEventArgs)
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: OnOutputChanged(ValueChangedEventArgs)
  nameWithType: SynchronizationComputation<TIn, TOut>.OnOutputChanged(ValueChangedEventArgs)
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.OnOutputChanged(ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnOutputChanged
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 30
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected virtual void OnOutputChanged(ValueChangedEventArgs e)
    parameters:
    - id: e
      type: ValueChangedEventArgs
    content.vb: Protected Overridable Sub OnOutputChanged(e As ValueChangedEventArgs)
  overload: NMF.Synchronizations.SynchronizationComputation`2.OnOutputChanged*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).OnOutputChanged(ValueChangedEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).OnOutputChanged(ValueChangedEventArgs)
- uid: NMF.Synchronizations.SynchronizationComputation`2.Input
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.Input
  id: Input
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: Input
  nameWithType: SynchronizationComputation<TIn, TOut>.Input
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Input
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Input
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 35
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public TIn Input { get; set; }
    parameters: []
    return:
      type: '{TIn}'
    content.vb: Public Property Input As TIn
  overload: NMF.Synchronizations.SynchronizationComputation`2.Input*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Input
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Input
- uid: NMF.Synchronizations.SynchronizationComputation`2.Opposite
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.Opposite
  id: Opposite
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: Opposite
  nameWithType: SynchronizationComputation<TIn, TOut>.Opposite
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Opposite
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Opposite
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 66
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public SynchronizationComputation<TOut, TIn> Opposite { get; }
    parameters: []
    return:
      type: NMF.Synchronizations.SynchronizationComputation{{TOut},{TIn}}
    content.vb: Public ReadOnly Property Opposite As SynchronizationComputation(Of TOut, TIn)
  overload: NMF.Synchronizations.SynchronizationComputation`2.Opposite*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Opposite
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Opposite
- uid: NMF.Synchronizations.SynchronizationComputation`2.#ctor(TransformationRuleBase{`0,`1},TransformationRuleBase{`1,`0},IComputationContext,`0)
  commentId: M:NMF.Synchronizations.SynchronizationComputation`2.#ctor(TransformationRuleBase{`0,`1},TransformationRuleBase{`1,`0},IComputationContext,`0)
  id: '#ctor(TransformationRuleBase{`0,`1},TransformationRuleBase{`1,`0},IComputationContext,`0)'
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: SynchronizationComputation(TransformationRuleBase<TIn, TOut>, TransformationRuleBase<TOut, TIn>, IComputationContext, TIn)
  nameWithType: SynchronizationComputation<TIn, TOut>.SynchronizationComputation(TransformationRuleBase<TIn, TOut>, TransformationRuleBase<TOut, TIn>, IComputationContext, TIn)
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.SynchronizationComputation(TransformationRuleBase<TIn, TOut>, TransformationRuleBase<TOut, TIn>, IComputationContext, TIn)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 68
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public SynchronizationComputation(TransformationRuleBase<TIn, TOut> rule, TransformationRuleBase<TOut, TIn> reverseRule, IComputationContext context, TIn input)
    parameters:
    - id: rule
      type: TransformationRuleBase{{TIn},{TOut}}
    - id: reverseRule
      type: TransformationRuleBase{{TOut},{TIn}}
    - id: context
      type: IComputationContext
    - id: input
      type: '{TIn}'
    content.vb: Public Sub New(rule As TransformationRuleBase(Of TIn, TOut), reverseRule As TransformationRuleBase(Of TOut, TIn), context As IComputationContext, input As TIn)
  overload: NMF.Synchronizations.SynchronizationComputation`2.#ctor*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).SynchronizationComputation(TransformationRuleBase(Of TIn, TOut), TransformationRuleBase(Of TOut, TIn), IComputationContext, TIn)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).SynchronizationComputation(TransformationRuleBase(Of TIn, TOut), TransformationRuleBase(Of TOut, TIn), IComputationContext, TIn)
  name.vb: SynchronizationComputation(TransformationRuleBase(Of TIn, TOut), TransformationRuleBase(Of TOut, TIn), IComputationContext, TIn)
- uid: NMF.Synchronizations.SynchronizationComputation`2.GetInput(System.Int32)
  commentId: M:NMF.Synchronizations.SynchronizationComputation`2.GetInput(System.Int32)
  id: GetInput(System.Int32)
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: GetInput(Int32)
  nameWithType: SynchronizationComputation<TIn, TOut>.GetInput(Int32)
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.GetInput(System.Int32)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetInput
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 94
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public override object GetInput(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: Public Overrides Function GetInput(index As Integer) As Object
  overload: NMF.Synchronizations.SynchronizationComputation`2.GetInput*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).GetInput(Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).GetInput(System.Int32)
- uid: NMF.Synchronizations.SynchronizationComputation`2.DoWhenOutputIsAvailable(System.Action{`0,`1})
  commentId: M:NMF.Synchronizations.SynchronizationComputation`2.DoWhenOutputIsAvailable(System.Action{`0,`1})
  id: DoWhenOutputIsAvailable(System.Action{`0,`1})
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: DoWhenOutputIsAvailable(Action<TIn, TOut>)
  nameWithType: SynchronizationComputation<TIn, TOut>.DoWhenOutputIsAvailable(Action<TIn, TOut>)
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.DoWhenOutputIsAvailable(System.Action<TIn, TOut>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DoWhenOutputIsAvailable
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 106
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void DoWhenOutputIsAvailable(Action<TIn, TOut> toPerform)
    parameters:
    - id: toPerform
      type: System.Action{{TIn},{TOut}}
    content.vb: Public Sub DoWhenOutputIsAvailable(toPerform As Action(Of TIn, TOut))
  overload: NMF.Synchronizations.SynchronizationComputation`2.DoWhenOutputIsAvailable*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).DoWhenOutputIsAvailable(Action(Of TIn, TOut))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).DoWhenOutputIsAvailable(System.Action(Of TIn, TOut))
  name.vb: DoWhenOutputIsAvailable(Action(Of TIn, TOut))
- uid: NMF.Synchronizations.SynchronizationComputation`2.AcceptNewOutput(`1)
  commentId: M:NMF.Synchronizations.SynchronizationComputation`2.AcceptNewOutput(`1)
  id: AcceptNewOutput(`1)
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: AcceptNewOutput(TOut)
  nameWithType: SynchronizationComputation<TIn, TOut>.AcceptNewOutput(TOut)
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.AcceptNewOutput(TOut)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AcceptNewOutput
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 119
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void AcceptNewOutput(TOut value)
    parameters:
    - id: value
      type: '{TOut}'
    content.vb: Public Sub AcceptNewOutput(value As TOut)
  overload: NMF.Synchronizations.SynchronizationComputation`2.AcceptNewOutput*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).AcceptNewOutput(TOut)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).AcceptNewOutput(TOut)
- uid: NMF.Synchronizations.SynchronizationComputation`2.OutputCore
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.OutputCore
  id: OutputCore
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: OutputCore
  nameWithType: SynchronizationComputation<TIn, TOut>.OutputCore
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.OutputCore
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OutputCore
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 124
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected override sealed object OutputCore { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Protected NotOverridable Overrides Property OutputCore As Object
  overload: NMF.Synchronizations.SynchronizationComputation`2.OutputCore*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).OutputCore
  modifiers.csharp:
  - protected
  - override
  - sealed
  - get
  - set
  modifiers.vb:
  - Protected
  - Overrides
  - NotOverridable
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).OutputCore
- uid: NMF.Synchronizations.SynchronizationComputation`2.SynchronizationContext
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.SynchronizationContext
  id: SynchronizationContext
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: SynchronizationContext
  nameWithType: SynchronizationComputation<TIn, TOut>.SynchronizationContext
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.SynchronizationContext
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationContext
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 136
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public ISynchronizationContext SynchronizationContext { get; }
    parameters: []
    return:
      type: NMF.Synchronizations.ISynchronizationContext
    content.vb: Public ReadOnly Property SynchronizationContext As ISynchronizationContext
  overload: NMF.Synchronizations.SynchronizationComputation`2.SynchronizationContext*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).SynchronizationContext
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).SynchronizationContext
- uid: NMF.Synchronizations.SynchronizationComputation`2.IsOriginalComputation
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.IsOriginalComputation
  id: IsOriginalComputation
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: IsOriginalComputation
  nameWithType: SynchronizationComputation<TIn, TOut>.IsOriginalComputation
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.IsOriginalComputation
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsOriginalComputation
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 144
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public virtual bool IsOriginalComputation { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsOriginalComputation As Boolean
  overload: NMF.Synchronizations.SynchronizationComputation`2.IsOriginalComputation*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).IsOriginalComputation
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).IsOriginalComputation
- uid: NMF.Synchronizations.SynchronizationComputation`2.SynchronizationRule
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.SynchronizationRule
  id: SynchronizationRule
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: SynchronizationRule
  nameWithType: SynchronizationComputation<TIn, TOut>.SynchronizationRule
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.SynchronizationRule
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationRule
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 152
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public SynchronizationRuleBase SynchronizationRule { get; }
    parameters: []
    return:
      type: NMF.Synchronizations.SynchronizationRuleBase
    content.vb: Public ReadOnly Property SynchronizationRule As SynchronizationRuleBase
  overload: NMF.Synchronizations.SynchronizationComputation`2.SynchronizationRule*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).SynchronizationRule
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).SynchronizationRule
- uid: NMF.Synchronizations.SynchronizationComputation`2.Dependencies
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.Dependencies
  id: Dependencies
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: SynchronizationComputation<TIn, TOut>.Dependencies
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Dependencies
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 168
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public virtual ICollection<IDisposable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.IDisposable}
    content.vb: Public Overridable ReadOnly Property Dependencies As ICollection(Of IDisposable)
  overload: NMF.Synchronizations.SynchronizationComputation`2.Dependencies*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Dependencies
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Dependencies
- uid: NMF.Synchronizations.SynchronizationComputation`2.Successors
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.Successors
  id: Successors
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: SynchronizationComputation<TIn, TOut>.Successors
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Successors
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 177
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Synchronizations.SynchronizationComputation`2.Successors*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Successors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Successors
- uid: NMF.Synchronizations.SynchronizationComputation`2.ExecutionMetaData
  commentId: P:NMF.Synchronizations.SynchronizationComputation`2.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: SynchronizationComputation<TIn, TOut>.ExecutionMetaData
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 181
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Synchronizations.SynchronizationComputation`2.ExecutionMetaData*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).ExecutionMetaData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).ExecutionMetaData
- uid: NMF.Synchronizations.SynchronizationComputation`2.Notify(System.Collections.Generic.IList{INotificationResult})
  commentId: M:NMF.Synchronizations.SynchronizationComputation`2.Notify(System.Collections.Generic.IList{INotificationResult})
  id: Notify(System.Collections.Generic.IList{INotificationResult})
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: SynchronizationComputation<TIn, TOut>.Notify(IList<INotificationResult>)
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Notify(System.Collections.Generic.IList<INotificationResult>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 183
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{INotificationResult}
    return:
      type: INotificationResult
    content.vb: Public Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Synchronizations.SynchronizationComputation`2.Notify*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Notify(IList(Of INotificationResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Notify(System.Collections.Generic.IList(Of INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Synchronizations.SynchronizationComputation`2.Dispose
  commentId: M:NMF.Synchronizations.SynchronizationComputation`2.Dispose
  id: Dispose
  parent: NMF.Synchronizations.SynchronizationComputation`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SynchronizationComputation<TIn, TOut>.Dispose()
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Dispose()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Synchronizations/Synchronizations/SynchronizationComputation.cs
    startLine: 188
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Synchronizations.SynchronizationComputation`2.Dispose*
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Dispose()
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: INotifyValue{{TOut}}
  commentId: '!:INotifyValue{`1}'
  definition: INotifyValue`1
  name: INotifyValue<TOut>
  nameWithType: INotifyValue<TOut>
  fullName: INotifyValue<TOut>
  nameWithType.vb: INotifyValue(Of TOut)
  fullName.vb: INotifyValue(Of TOut)
  name.vb: INotifyValue(Of TOut)
  spec.csharp:
  - uid: INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: INotifyValue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: INotifyValue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: INotifyValue`1
  isExternal: true
  name: INotifyValue<>
  nameWithType: INotifyValue<>
  fullName: INotifyValue<>
  nameWithType.vb: INotifyValue(Of )
  fullName.vb: INotifyValue(Of )
  name.vb: INotifyValue(Of )
  spec.csharp:
  - uid: INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: INotifyValue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: INotifyValue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{ValueChangedEventArgs}
  commentId: T:System.EventHandler{ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: ValueChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2.OmitCandidateSearch*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.OmitCandidateSearch
  name: OmitCandidateSearch
  nameWithType: SynchronizationComputation<TIn, TOut>.OmitCandidateSearch
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.OmitCandidateSearch
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).OmitCandidateSearch
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).OmitCandidateSearch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Synchronizations.SynchronizationComputation`2.OnOutputChanged*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.OnOutputChanged
  name: OnOutputChanged
  nameWithType: SynchronizationComputation<TIn, TOut>.OnOutputChanged
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.OnOutputChanged
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).OnOutputChanged
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).OnOutputChanged
- uid: ValueChangedEventArgs
  commentId: '!:ValueChangedEventArgs'
  isExternal: true
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: ValueChangedEventArgs
- uid: NMF.Synchronizations.SynchronizationComputation`2.Input*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.Input
  name: Input
  nameWithType: SynchronizationComputation<TIn, TOut>.Input
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Input
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Input
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Input
- uid: '{TIn}'
  commentId: '!:TIn'
  definition: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: NMF.Synchronizations.SynchronizationComputation`2.Opposite*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.Opposite
  name: Opposite
  nameWithType: SynchronizationComputation<TIn, TOut>.Opposite
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Opposite
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Opposite
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Opposite
- uid: NMF.Synchronizations.SynchronizationComputation{{TOut},{TIn}}
  commentId: T:NMF.Synchronizations.SynchronizationComputation{`1,`0}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TOut, TIn>
  nameWithType: SynchronizationComputation<TOut, TIn>
  fullName: NMF.Synchronizations.SynchronizationComputation<TOut, TIn>
  nameWithType.vb: SynchronizationComputation(Of TOut, TIn)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TOut, TIn)
  name.vb: SynchronizationComputation(Of TOut, TIn)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2
  commentId: T:NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TIn, TOut>
  nameWithType: SynchronizationComputation<TIn, TOut>
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut)
  name.vb: SynchronizationComputation(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2.#ctor*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.#ctor
  name: SynchronizationComputation
  nameWithType: SynchronizationComputation<TIn, TOut>.SynchronizationComputation
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.SynchronizationComputation
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).SynchronizationComputation
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).SynchronizationComputation
- uid: TransformationRuleBase{{TIn},{TOut}}
  commentId: '!:TransformationRuleBase{`0,`1}'
  definition: TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: TransformationRuleBase{{TOut},{TIn}}
  commentId: '!:TransformationRuleBase{`1,`0}'
  definition: TransformationRuleBase`2
  name: TransformationRuleBase<TOut, TIn>
  nameWithType: TransformationRuleBase<TOut, TIn>
  fullName: TransformationRuleBase<TOut, TIn>
  nameWithType.vb: TransformationRuleBase(Of TOut, TIn)
  fullName.vb: TransformationRuleBase(Of TOut, TIn)
  name.vb: TransformationRuleBase(Of TOut, TIn)
  spec.csharp:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: IComputationContext
  commentId: '!:IComputationContext'
  isExternal: true
  name: IComputationContext
  nameWithType: IComputationContext
  fullName: IComputationContext
- uid: TransformationRuleBase`2
  isExternal: true
  name: TransformationRuleBase<, >
  nameWithType: TransformationRuleBase<, >
  fullName: TransformationRuleBase<, >
  nameWithType.vb: TransformationRuleBase(Of , )
  fullName.vb: TransformationRuleBase(Of , )
  name.vb: TransformationRuleBase(Of , )
  spec.csharp:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2.GetInput*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.GetInput
  name: GetInput
  nameWithType: SynchronizationComputation<TIn, TOut>.GetInput
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.GetInput
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).GetInput
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).GetInput
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Synchronizations.SynchronizationComputation`2.DoWhenOutputIsAvailable*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.DoWhenOutputIsAvailable
  name: DoWhenOutputIsAvailable
  nameWithType: SynchronizationComputation<TIn, TOut>.DoWhenOutputIsAvailable
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.DoWhenOutputIsAvailable
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).DoWhenOutputIsAvailable
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).DoWhenOutputIsAvailable
- uid: System.Action{{TIn},{TOut}}
  commentId: T:System.Action{`0,`1}
  parent: System
  definition: System.Action`2
  name: Action<TIn, TOut>
  nameWithType: Action<TIn, TOut>
  fullName: System.Action<TIn, TOut>
  nameWithType.vb: Action(Of TIn, TOut)
  fullName.vb: System.Action(Of TIn, TOut)
  name.vb: Action(Of TIn, TOut)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2.AcceptNewOutput*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.AcceptNewOutput
  name: AcceptNewOutput
  nameWithType: SynchronizationComputation<TIn, TOut>.AcceptNewOutput
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.AcceptNewOutput
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).AcceptNewOutput
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).AcceptNewOutput
- uid: '{TOut}'
  commentId: '!:TOut'
  definition: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: TOut
  commentId: '!:TOut'
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: NMF.Synchronizations.SynchronizationComputation`2.OutputCore*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.OutputCore
  name: OutputCore
  nameWithType: SynchronizationComputation<TIn, TOut>.OutputCore
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.OutputCore
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).OutputCore
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).OutputCore
- uid: NMF.Synchronizations.SynchronizationComputation`2.SynchronizationContext*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.SynchronizationContext
  name: SynchronizationContext
  nameWithType: SynchronizationComputation<TIn, TOut>.SynchronizationContext
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.SynchronizationContext
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).SynchronizationContext
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).SynchronizationContext
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: NMF.Synchronizations.SynchronizationComputation`2.IsOriginalComputation*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.IsOriginalComputation
  name: IsOriginalComputation
  nameWithType: SynchronizationComputation<TIn, TOut>.IsOriginalComputation
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.IsOriginalComputation
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).IsOriginalComputation
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).IsOriginalComputation
- uid: NMF.Synchronizations.SynchronizationComputation`2.SynchronizationRule*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.SynchronizationRule
  name: SynchronizationRule
  nameWithType: SynchronizationComputation<TIn, TOut>.SynchronizationRule
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.SynchronizationRule
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).SynchronizationRule
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).SynchronizationRule
- uid: NMF.Synchronizations.SynchronizationRuleBase
  commentId: T:NMF.Synchronizations.SynchronizationRuleBase
  parent: NMF.Synchronizations
  name: SynchronizationRuleBase
  nameWithType: SynchronizationRuleBase
  fullName: NMF.Synchronizations.SynchronizationRuleBase
- uid: NMF.Synchronizations.SynchronizationComputation`2.Dependencies*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.Dependencies
  name: Dependencies
  nameWithType: SynchronizationComputation<TIn, TOut>.Dependencies
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Dependencies
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Dependencies
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Dependencies
- uid: System.Collections.Generic.ICollection{System.IDisposable}
  commentId: T:System.Collections.Generic.ICollection{System.IDisposable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IDisposable>
  nameWithType: ICollection<IDisposable>
  fullName: System.Collections.Generic.ICollection<System.IDisposable>
  nameWithType.vb: ICollection(Of IDisposable)
  fullName.vb: System.Collections.Generic.ICollection(Of System.IDisposable)
  name.vb: ICollection(Of IDisposable)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Synchronizations.SynchronizationComputation`2.Successors*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.Successors
  name: Successors
  nameWithType: SynchronizationComputation<TIn, TOut>.Successors
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Successors
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Successors
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Successors
- uid: ISuccessorList
  commentId: '!:ISuccessorList'
  isExternal: true
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: ISuccessorList
- uid: NMF.Synchronizations.SynchronizationComputation`2.ExecutionMetaData*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: SynchronizationComputation<TIn, TOut>.ExecutionMetaData
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.ExecutionMetaData
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).ExecutionMetaData
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).ExecutionMetaData
- uid: ExecutionMetaData
  commentId: '!:ExecutionMetaData'
  isExternal: true
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: ExecutionMetaData
- uid: NMF.Synchronizations.SynchronizationComputation`2.Notify*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.Notify
  name: Notify
  nameWithType: SynchronizationComputation<TIn, TOut>.Notify
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Notify
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Notify
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Notify
- uid: System.Collections.Generic.IList{INotificationResult}
  commentId: T:System.Collections.Generic.IList{INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: INotificationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: INotificationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: INotificationResult
  commentId: '!:INotificationResult'
  isExternal: true
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2.Dispose*
  commentId: Overload:NMF.Synchronizations.SynchronizationComputation`2.Dispose
  name: Dispose
  nameWithType: SynchronizationComputation<TIn, TOut>.Dispose
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>.Dispose
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut).Dispose
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut).Dispose
