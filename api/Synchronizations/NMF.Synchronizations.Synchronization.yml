### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.Synchronization
  commentId: T:NMF.Synchronizations.Synchronization
  id: Synchronization
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
  - NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  - NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
  - NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  - NMF.Synchronizations.Synchronization.RegisterRules
  - NMF.Synchronizations.Synchronization.SynchronizationRules
  - NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  - NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  - NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  langs:
  - csharp
  - vb
  name: Synchronization
  nameWithType: Synchronization
  fullName: NMF.Synchronizations.Synchronization
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronization
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 12
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: 'public abstract class Synchronization : Transformation'
    content.vb: >-
      Public MustInherit Class Synchronization
          Inherits Transformation
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Synchronizations.ReflectiveSynchronization
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: NMF.Synchronizations.Synchronization.SynchronizationRules
  commentId: P:NMF.Synchronizations.Synchronization.SynchronizationRules
  id: SynchronizationRules
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: SynchronizationRules
  nameWithType: Synchronization.SynchronizationRules
  fullName: NMF.Synchronizations.Synchronization.SynchronizationRules
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationRules
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 14
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public abstract IEnumerable<SynchronizationRuleBase> SynchronizationRules { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
    content.vb: Public MustOverride ReadOnly Property SynchronizationRules As IEnumerable(Of SynchronizationRuleBase)
  overload: NMF.Synchronizations.Synchronization.SynchronizationRules*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: NMF.Synchronizations.Synchronization.RegisterRules
  commentId: M:NMF.Synchronizations.Synchronization.RegisterRules
  id: RegisterRules
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: RegisterRules()
  nameWithType: Synchronization.RegisterRules()
  fullName: NMF.Synchronizations.Synchronization.RegisterRules()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterRules
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 16
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public override void RegisterRules()
    content.vb: Public Overrides Sub RegisterRules
  overload: NMF.Synchronizations.Synchronization.RegisterRules*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  id: GetSynchronizationRuleForType(System.Type)
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: GetSynchronizationRuleForType(Type)
  nameWithType: Synchronization.GetSynchronizationRuleForType(Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetSynchronizationRuleForType
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 38
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public virtual SynchronizationRuleBase GetSynchronizationRuleForType(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: NMF.Synchronizations.SynchronizationRuleBase
    content.vb: Public Overridable Function GetSynchronizationRuleForType(type As Type) As SynchronizationRuleBase
  overload: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  id: GetSynchronizationRulesForType(System.Type)
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: GetSynchronizationRulesForType(Type)
  nameWithType: Synchronization.GetSynchronizationRulesForType(Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetSynchronizationRulesForType
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 44
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public virtual IEnumerable<SynchronizationRuleBase> GetSynchronizationRulesForType(Type type)
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
    content.vb: Public Overridable Function GetSynchronizationRulesForType(type As Type) As IEnumerable(Of SynchronizationRuleBase)
  overload: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
  id: GetSynchronizationRuleForSignature(System.Type,System.Type)
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: GetSynchronizationRuleForSignature(Type, Type)
  nameWithType: Synchronization.GetSynchronizationRuleForSignature(Type, Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetSynchronizationRuleForSignature
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 50
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public virtual SynchronizationRuleBase GetSynchronizationRuleForSignature(Type left, Type right)
    parameters:
    - id: left
      type: System.Type
    - id: right
      type: System.Type
    return:
      type: NMF.Synchronizations.SynchronizationRuleBase
    content.vb: Public Overridable Function GetSynchronizationRuleForSignature(left As Type, right As Type) As SynchronizationRuleBase
  overload: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
  id: GetSynchronizationRulesForSignature(System.Type,System.Type)
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: GetSynchronizationRulesForSignature(Type, Type)
  nameWithType: Synchronization.GetSynchronizationRulesForSignature(Type, Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetSynchronizationRulesForSignature
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 57
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public virtual IEnumerable<SynchronizationRuleBase> GetSynchronizationRulesForSignature(Type left, Type right)
    parameters:
    - id: left
      type: System.Type
    - id: right
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
    content.vb: Public Overridable Function GetSynchronizationRulesForSignature(left As Type, right As Type) As IEnumerable(Of SynchronizationRuleBase)
  overload: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  id: Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: Synchronize<TLeft, TRight>(ref TLeft, ref TRight, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(ref TLeft, ref TRight, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(ref TLeft, ref TRight, NMF.Synchronizations.SynchronizationDirection, ChangePropagationMode)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 62
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public ISynchronizationContext Synchronize<TLeft, TRight>(ref TLeft left, ref TRight right, SynchronizationDirection direction, ChangePropagationMode changePropagation)
          where TLeft : class where TRight : class
    parameters:
    - id: left
      type: '{TLeft}'
    - id: right
      type: '{TRight}'
    - id: direction
      type: NMF.Synchronizations.SynchronizationDirection
    - id: changePropagation
      type: ChangePropagationMode
    typeParameters:
    - id: TLeft
    - id: TRight
    return:
      type: NMF.Synchronizations.ISynchronizationContext
    content.vb: Public Function Synchronize(Of TLeft As Class, TRight As Class)(ByRef left As TLeft, ByRef right As TRight, direction As SynchronizationDirection, changePropagation As ChangePropagationMode) As ISynchronizationContext
  overload: NMF.Synchronizations.Synchronization.Synchronize*
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(ByRef TLeft, ByRef TRight, SynchronizationDirection, ChangePropagationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(ByRef TLeft, ByRef TRight, NMF.Synchronizations.SynchronizationDirection, ChangePropagationMode)
  name.vb: Synchronize(Of TLeft, TRight)(ByRef TLeft, ByRef TRight, SynchronizationDirection, ChangePropagationMode)
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ref TLeft, ref TRight, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ref TLeft, ref TRight, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, ref TLeft, ref TRight, NMF.Synchronizations.SynchronizationDirection, ChangePropagationMode)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 69
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public ISynchronizationContext Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight> startRule, ref TLeft left, ref TRight right, SynchronizationDirection direction, ChangePropagationMode changePropagation)
          where TLeft : class where TRight : class
    parameters:
    - id: startRule
      type: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
    - id: left
      type: '{TLeft}'
    - id: right
      type: '{TRight}'
    - id: direction
      type: NMF.Synchronizations.SynchronizationDirection
    - id: changePropagation
      type: ChangePropagationMode
    typeParameters:
    - id: TLeft
    - id: TRight
    return:
      type: NMF.Synchronizations.ISynchronizationContext
    content.vb: Public Function Synchronize(Of TLeft As Class, TRight As Class)(startRule As SynchronizationRule(Of TLeft, TRight), ByRef left As TLeft, ByRef right As TRight, direction As SynchronizationDirection, changePropagation As ChangePropagationMode) As ISynchronizationContext
  overload: NMF.Synchronizations.Synchronization.Synchronize*
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ByRef TLeft, ByRef TRight, SynchronizationDirection, ChangePropagationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), ByRef TLeft, ByRef TRight, NMF.Synchronizations.SynchronizationDirection, ChangePropagationMode)
  name.vb: Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ByRef TLeft, ByRef TRight, SynchronizationDirection, ChangePropagationMode)
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  id: SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,ChangePropagationMode)
  parent: NMF.Synchronizations.Synchronization
  langs:
  - csharp
  - vb
  name: SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.SynchronizationDirection, ChangePropagationMode)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Synchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeMany
    path: src/Synchronizations/Synchronizations/Synchronization.cs
    startLine: 98
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public ISynchronizationContext SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight> startRule, ICollection<TLeft> lefts, ICollection<TRight> rights, SynchronizationDirection direction, ChangePropagationMode changePropagation)
          where TLeft : class where TRight : class
    parameters:
    - id: startRule
      type: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
    - id: lefts
      type: System.Collections.Generic.ICollection{{TLeft}}
    - id: rights
      type: System.Collections.Generic.ICollection{{TRight}}
    - id: direction
      type: NMF.Synchronizations.SynchronizationDirection
    - id: changePropagation
      type: ChangePropagationMode
    typeParameters:
    - id: TLeft
    - id: TRight
    return:
      type: NMF.Synchronizations.ISynchronizationContext
    content.vb: Public Function SynchronizeMany(Of TLeft As Class, TRight As Class)(startRule As SynchronizationRule(Of TLeft, TRight), lefts As ICollection(Of TLeft), rights As ICollection(Of TRight), direction As SynchronizationDirection, changePropagation As ChangePropagationMode) As ISynchronizationContext
  overload: NMF.Synchronizations.Synchronization.SynchronizeMany*
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.SynchronizationDirection, ChangePropagationMode)
  name.vb: SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.Synchronization.SynchronizationRules*
  commentId: Overload:NMF.Synchronizations.Synchronization.SynchronizationRules
  name: SynchronizationRules
  nameWithType: Synchronization.SynchronizationRules
  fullName: NMF.Synchronizations.Synchronization.SynchronizationRules
- uid: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SynchronizationRuleBase>
  nameWithType: IEnumerable<SynchronizationRuleBase>
  fullName: System.Collections.Generic.IEnumerable<NMF.Synchronizations.SynchronizationRuleBase>
  nameWithType.vb: IEnumerable(Of SynchronizationRuleBase)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Synchronizations.SynchronizationRuleBase)
  name.vb: IEnumerable(Of SynchronizationRuleBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
    nameWithType: SynchronizationRuleBase
    fullName: NMF.Synchronizations.SynchronizationRuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
    nameWithType: SynchronizationRuleBase
    fullName: NMF.Synchronizations.SynchronizationRuleBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Synchronizations.Synchronization.RegisterRules*
  commentId: Overload:NMF.Synchronizations.Synchronization.RegisterRules
  name: RegisterRules
  nameWithType: Synchronization.RegisterRules
  fullName: NMF.Synchronizations.Synchronization.RegisterRules
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType*
  commentId: Overload:NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType
  name: GetSynchronizationRuleForType
  nameWithType: Synchronization.GetSynchronizationRuleForType
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Synchronizations.SynchronizationRuleBase
  commentId: T:NMF.Synchronizations.SynchronizationRuleBase
  parent: NMF.Synchronizations
  name: SynchronizationRuleBase
  nameWithType: SynchronizationRuleBase
  fullName: NMF.Synchronizations.SynchronizationRuleBase
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType*
  commentId: Overload:NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType
  name: GetSynchronizationRulesForType
  nameWithType: Synchronization.GetSynchronizationRulesForType
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature*
  commentId: Overload:NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature
  name: GetSynchronizationRuleForSignature
  nameWithType: Synchronization.GetSynchronizationRuleForSignature
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature*
  commentId: Overload:NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature
  name: GetSynchronizationRulesForSignature
  nameWithType: Synchronization.GetSynchronizationRulesForSignature
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature
- uid: NMF.Synchronizations.Synchronization.Synchronize*
  commentId: Overload:NMF.Synchronizations.Synchronization.Synchronize
  name: Synchronize
  nameWithType: Synchronization.Synchronize
  fullName: NMF.Synchronizations.Synchronization.Synchronize
- uid: '{TLeft}'
  commentId: '!:TLeft'
  definition: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: '{TRight}'
  commentId: '!:TRight'
  definition: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.SynchronizationDirection
  commentId: T:NMF.Synchronizations.SynchronizationDirection
  parent: NMF.Synchronizations
  name: SynchronizationDirection
  nameWithType: SynchronizationDirection
  fullName: NMF.Synchronizations.SynchronizationDirection
- uid: ChangePropagationMode
  isExternal: true
  name: ChangePropagationMode
  nameWithType: ChangePropagationMode
  fullName: ChangePropagationMode
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.SynchronizationRule{``0,``1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2
  commentId: T:NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany*
  commentId: Overload:NMF.Synchronizations.Synchronization.SynchronizeMany
  name: SynchronizeMany
  nameWithType: Synchronization.SynchronizeMany
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany
- uid: System.Collections.Generic.ICollection{{TLeft}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TLeft>
  nameWithType: ICollection<TLeft>
  fullName: System.Collections.Generic.ICollection<TLeft>
  nameWithType.vb: ICollection(Of TLeft)
  fullName.vb: System.Collections.Generic.ICollection(Of TLeft)
  name.vb: ICollection(Of TLeft)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TRight}}
  commentId: T:System.Collections.Generic.ICollection{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TRight>
  nameWithType: ICollection<TRight>
  fullName: System.Collections.Generic.ICollection<TRight>
  nameWithType.vb: ICollection(Of TRight)
  fullName.vb: System.Collections.Generic.ICollection(Of TRight)
  name.vb: ICollection(Of TRight)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
