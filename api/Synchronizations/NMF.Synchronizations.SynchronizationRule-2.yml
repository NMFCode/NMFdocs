### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.SynchronizationRule`2
  commentId: T:NMF.Synchronizations.SynchronizationRule`2
  id: SynchronizationRule`2
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.SynchronizationRule`2.#ctor
  - NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  - NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  - NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  - NMF.Synchronizations.SynchronizationRule`2.LeftType
  - NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  - NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  - NMF.Synchronizations.SynchronizationRule`2.RightType
  - NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,IEnumerableExpression{``1}}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  - NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  langs:
  - csharp
  - vb
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationRule
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 14
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: 'public abstract class SynchronizationRule<TLeft, TRight> : SynchronizationRuleBase where TLeft : class where TRight : class'
    typeParameters:
    - id: TLeft
    - id: TRight
    content.vb: >-
      Public MustInherit Class SynchronizationRule(Of TLeft As Class, TRight As Class)
          Inherits SynchronizationRuleBase
  inheritance:
  - System.Object
  - NMF.Synchronizations.SynchronizationRuleBase
  inheritedMembers:
  - NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  - NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  - NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  - NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  id: SynchronizationJobs
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizationJobs
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationJobs
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 18
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public ICollection<ISynchronizationJob<TLeft, TRight>> SynchronizationJobs { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}}
    content.vb: Public ReadOnly Property SynchronizationJobs As ICollection(Of ISynchronizationJob(Of TLeft, TRight))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
- uid: NMF.Synchronizations.SynchronizationRule`2.#ctor
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.#ctor
  id: '#ctor'
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizationRule()
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationRule()
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationRule()
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 20
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public SynchronizationRule()
    content.vb: Public Sub New
  overload: NMF.Synchronizations.SynchronizationRule`2.#ctor*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationRule()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationRule()
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  id: LeftToRight
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: LeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftToRight
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftToRight
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 27
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public TransformationRuleBase<TLeft, TRight> LeftToRight { get; }
    parameters: []
    return:
      type: TransformationRuleBase{{TLeft},{TRight}}
    content.vb: Public ReadOnly Property LeftToRight As TransformationRuleBase(Of TLeft, TRight)
  overload: NMF.Synchronizations.SynchronizationRule`2.LeftToRight*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftToRight
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftToRight
- uid: NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  id: RightToLeft
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: RightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.RightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightToLeft
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightToLeft
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 29
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public TransformationRuleBase<TRight, TLeft> RightToLeft { get; }
    parameters: []
    return:
      type: TransformationRuleBase{{TRight},{TLeft}}
    content.vb: Public ReadOnly Property RightToLeft As TransformationRuleBase(Of TRight, TLeft)
  overload: NMF.Synchronizations.SynchronizationRule`2.RightToLeft*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightToLeft
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightToLeft
- uid: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  id: TransformationDelayLevel
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: TransformationDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationDelayLevel
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 60
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public byte TransformationDelayLevel { get; set; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Property TransformationDelayLevel As Byte
  overload: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  id: OutputDelayLevel
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: OutputDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OutputDelayLevel
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 73
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public byte OutputDelayLevel { get; set; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Property OutputDelayLevel As Byte
  overload: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  id: ShouldCorrespond(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  nameWithType: SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ShouldCorrespond
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 113
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public virtual bool ShouldCorrespond(TLeft left, TRight right, ISynchronizationContext context)
    parameters:
    - id: left
      type: '{TLeft}'
    - id: right
      type: '{TRight}'
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ShouldCorrespond(left As TLeft, right As TRight, context As ISynchronizationContext) As Boolean
  overload: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, ISynchronizationContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).ShouldCorrespond(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftType
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.LeftType
  id: LeftType
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: LeftType
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftType
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftType
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 118
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public override sealed Type LeftType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public NotOverridable Overrides ReadOnly Property LeftType As Type
  overridden: NMF.Synchronizations.SynchronizationRuleBase.LeftType
  overload: NMF.Synchronizations.SynchronizationRule`2.LeftType*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftType
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftType
- uid: NMF.Synchronizations.SynchronizationRule`2.RightType
  commentId: P:NMF.Synchronizations.SynchronizationRule`2.RightType
  id: RightType
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: RightType
  nameWithType: SynchronizationRule<TLeft, TRight>.RightType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightType
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightType
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 123
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public override sealed Type RightType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public NotOverridable Overrides ReadOnly Property RightType As Type
  overridden: NMF.Synchronizations.SynchronizationRuleBase.RightType
  overload: NMF.Synchronizations.SynchronizationRule`2.RightType*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightType
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightType
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 128
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard = null)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, System.Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 142
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Action<TLeft, TDepLeft> leftSetter, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard = null)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
    - id: leftSetter
      type: System.Action{{TLeft},{TDepLeft}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), leftSetter As Action(Of TLeft, TDepLeft), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, System.Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 156
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Action<TRight, TDepRight> rightSetter, Expression<Func<TLeft, TRight, bool>> guard = null)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
    - id: rightSetter
      type: System.Action{{TRight},{TDepRight}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), rightSetter As Action(Of TRight, TDepRight), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, System.Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Action{`1,``1},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Action<TLeft, TDepLeft>, Expression<Func<TRight, TDepRight>>, Action<TRight, TDepRight>, Expression<Func<TLeft, TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Action<TLeft, TDepLeft>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Action<TRight, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 170
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void Synchronize<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Action<TLeft, TDepLeft> leftSetter, Expression<Func<TRight, TDepRight>> rightSelector, Action<TRight, TDepRight> rightSetter, Expression<Func<TLeft, TRight, bool>> guard = null)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
    - id: leftSetter
      type: System.Action{{TLeft},{TDepLeft}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
    - id: rightSetter
      type: System.Action{{TRight},{TDepRight}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub Synchronize(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), leftSetter As Action(Of TLeft, TDepLeft), rightSelector As Expression(Of Func(Of TRight, TDepRight)), rightSetter As Action(Of TRight, TDepRight), guard As Expression(Of Func(Of TLeft, TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Action(Of TLeft, TDepLeft), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Action(Of TRight, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, System.Boolean)))
  name.vb: Synchronize(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Action(Of TLeft, TDepLeft), Expression(Of Func(Of TRight, TDepRight)), Action(Of TRight, TDepRight), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TLeft, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TLeft, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 184
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void SynchronizeLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TLeft, bool>> guard = null)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TLeft, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, TDepLeft>>, Expression<Func<TRight, TDepRight>>, Expression<Func<TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>, System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 197
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void SynchronizeRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, TDepLeft>> leftSelector, Expression<Func<TRight, TDepRight>> rightSelector, Expression<Func<TRight, bool>> guard = null)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, TDepLeft)), rightSelector As Expression(Of Func(Of TRight, TDepRight)), guard As Expression(Of Func(Of TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, TDepLeft)), Expression(Of Func(Of TRight, TDepRight)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{``1}}})
  id: SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, ICollectionExpression<TDepRight>>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeMany
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 210
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void SynchronizeMany<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>> leftSelector, Expression<Func<TRight, ICollectionExpression<TDepRight>>> rightSelector)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},ICollectionExpression{{TDepLeft}}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},ICollectionExpression{{TDepRight}}}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub SynchronizeMany(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizeMany(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  id: SynchronizeManyLeftToRightOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,IEnumerableExpression{``0}}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>, Expression<Func<TRight, ICollection<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, IEnumerableExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Collections.Generic.ICollection<TDepRight>>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeManyLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 223
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void SynchronizeManyLeftToRightOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>> leftSelector, Expression<Func<TRight, ICollection<TDepRight>>> rightSelector)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},IEnumerableExpression{{TDepLeft}}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Collections.Generic.ICollection{{TDepRight}}}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub SynchronizeManyLeftToRightOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Collections.Generic.ICollection(Of TDepRight))))
  name.vb: SynchronizeManyLeftToRightOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollection(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,IEnumerableExpression{``1}}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,IEnumerableExpression{``1}}})
  id: SynchronizeManyRightToLeftOnly``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}},System.Linq.Expressions.Expression{System.Func{`1,IEnumerableExpression{``1}}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollection<TDepLeft>>>, Expression<Func<TRight, IEnumerableExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, System.Collections.Generic.ICollection<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, IEnumerableExpression<TDepRight>>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeManyRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 235
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public void SynchronizeManyRightToLeftOnly<TDepLeft, TDepRight>(SynchronizationRule<TDepLeft, TDepRight> rule, Expression<Func<TLeft, ICollection<TDepLeft>>> leftSelector, Expression<Func<TRight, IEnumerableExpression<TDepRight>>> rightSelector)
          where TDepLeft : class where TDepRight : class
    parameters:
    - id: rule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Collections.Generic.ICollection{{TDepLeft}}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},IEnumerableExpression{{TDepRight}}}}
    typeParameters:
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Sub SynchronizeManyRightToLeftOnly(Of TDepLeft As Class, TDepRight As Class)(rule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, IEnumerableExpression(Of TDepRight))))
  name.vb: SynchronizeManyRightToLeftOnly(Of TDepLeft, TDepRight)(SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollection(Of TDepLeft))), Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLate``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLate<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLate
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 247
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLate<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLate(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLate(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLate(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  id: Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 252
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void Synchronize<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TLeft, TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub Synchronize(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TLeft, TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, System.Boolean)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: Synchronize``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Synchronize
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 265
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void Synchronize<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub Synchronize(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: Synchronize(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 270
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 281
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Action<TRight, TValue> rightSetter)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSetter
      type: System.Action{{TRight},{TValue}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSetter As Action(Of TRight, TValue))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLateLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 289
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLateLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  id: SynchronizeLateLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLateLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 300
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLateLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Action<TRight, TValue> rightSetter)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSetter
      type: System.Action{{TRight},{TValue}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLateLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSetter As Action(Of TRight, TValue))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue))
  name.vb: SynchronizeLateLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TLeft, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TLeft, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 308
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: SynchronizeLeftToRightOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`1,``0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>>, Action<TRight, TValue>, Expression<Func<TLeft, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Action<TRight, TValue>, System.Linq.Expressions.Expression<System.Func<TLeft, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLeftToRightOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 319
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLeftToRightOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Action<TRight, TValue> rightSetter, Expression<Func<TLeft, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSetter
      type: System.Action{{TRight},{TValue}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLeftToRightOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSetter As Action(Of TRight, TValue), guard As Expression(Of Func(Of TLeft, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Action(Of TRight, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Boolean)))
  name.vb: SynchronizeLeftToRightOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Action(Of TRight, TValue), Expression(Of Func(Of TLeft, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 338
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 349
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue> leftSetter, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},{TValue}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, TValue), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLateRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLateRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 357
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLateRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLateRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  id: SynchronizeLateRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLateRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 368
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeLateRightToLeftOnly<TValue>(Action<TLeft, TValue> leftSetter, Expression<Func<TRight, TValue>> rightSelector)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},{TValue}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeLateRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, TValue), rightSelector As Expression(Of Func(Of TRight, TValue)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)))
  name.vb: SynchronizeLateRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 376
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Expression<Func<TLeft, TValue>> leftSelector, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSelector As Expression(Of Func(Of TLeft, TValue)), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Expression(Of Func(Of TLeft, TValue)), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: SynchronizeRightToLeftOnly``1(System.Action{`0,``0},System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue>, Expression<Func<TRight, TValue>>, Expression<Func<TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly<TValue>(System.Action<TLeft, TValue>, System.Linq.Expressions.Expression<System.Func<TRight, TValue>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeRightToLeftOnly
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 387
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeRightToLeftOnly<TValue>(Action<TLeft, TValue> leftSetter, Expression<Func<TRight, TValue>> rightSelector, Expression<Func<TRight, bool>> guard)
    parameters:
    - id: leftSetter
      type: System.Action{{TLeft},{TValue}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
    - id: guard
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
    typeParameters:
    - id: TValue
    content.vb: Public Sub SynchronizeRightToLeftOnly(Of TValue)(leftSetter As Action(Of TLeft, TValue), rightSelector As Expression(Of Func(Of TRight, TValue)), guard As Expression(Of Func(Of TRight, Boolean)))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly(Of TValue)(System.Action(Of TLeft, TValue), System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Boolean)))
  name.vb: SynchronizeRightToLeftOnly(Of TValue)(Action(Of TLeft, TValue), Expression(Of Func(Of TRight, TValue)), Expression(Of Func(Of TRight, Boolean)))
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})
  id: SynchronizeOpaque(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque(System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeOpaque
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 406
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void SynchronizeOpaque(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable> action)
    parameters:
    - id: action
      type: System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
    content.vb: Public Sub SynchronizeOpaque(action As Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable))
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque(System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable))
  name.vb: SynchronizeOpaque(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable))
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  id: CreateRightOutput(`0,System.Collections.Generic.IEnumerable{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out Boolean)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, IEnumerable<TRight>, ISynchronizationContext, out Boolean)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable<TRight>, NMF.Synchronizations.ISynchronizationContext, out System.Boolean)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateRightOutput
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 431
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected virtual TRight CreateRightOutput(TLeft input, IEnumerable<TRight> candidates, ISynchronizationContext context, out bool existing)
    parameters:
    - id: input
      type: '{TLeft}'
    - id: candidates
      type: System.Collections.Generic.IEnumerable{{TRight}}
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    - id: existing
      type: System.Boolean
    return:
      type: '{TRight}'
    content.vb: Protected Overridable Function CreateRightOutput(input As TLeft, candidates As IEnumerable(Of TRight), context As ISynchronizationContext, ByRef existing As Boolean) As TRight
  overload: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, ByRef Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateRightOutput(TLeft, System.Collections.Generic.IEnumerable(Of TRight), NMF.Synchronizations.ISynchronizationContext, ByRef System.Boolean)
  name.vb: CreateRightOutput(TLeft, IEnumerable(Of TRight), ISynchronizationContext, ByRef Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  id: CreateLeftOutput(`1,System.Collections.Generic.IEnumerable{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean@)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out Boolean)
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, IEnumerable<TLeft>, ISynchronizationContext, out Boolean)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable<TLeft>, NMF.Synchronizations.ISynchronizationContext, out System.Boolean)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateLeftOutput
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 467
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected virtual TLeft CreateLeftOutput(TRight input, IEnumerable<TLeft> candidates, ISynchronizationContext context, out bool existing)
    parameters:
    - id: input
      type: '{TRight}'
    - id: candidates
      type: System.Collections.Generic.IEnumerable{{TLeft}}
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    - id: existing
      type: System.Boolean
    return:
      type: '{TLeft}'
    content.vb: Protected Overridable Function CreateLeftOutput(input As TRight, candidates As IEnumerable(Of TLeft), context As ISynchronizationContext, ByRef existing As Boolean) As TLeft
  overload: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, ByRef Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateLeftOutput(TRight, System.Collections.Generic.IEnumerable(Of TLeft), NMF.Synchronizations.ISynchronizationContext, ByRef System.Boolean)
  name.vb: CreateLeftOutput(TRight, IEnumerable(Of TLeft), ISynchronizationContext, ByRef Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  id: SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{`1},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, Boolean)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext, Boolean)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeCollectionsRightToLeft
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 489
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected virtual void SynchronizeCollectionsRightToLeft(ICollection<TLeft> lefts, ICollection<TRight> rights, ISynchronizationContext context, bool ignoreCandidates)
    parameters:
    - id: lefts
      type: System.Collections.Generic.ICollection{{TLeft}}
    - id: rights
      type: System.Collections.Generic.ICollection{{TRight}}
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    - id: ignoreCandidates
      type: System.Boolean
    content.vb: Protected Overridable Sub SynchronizeCollectionsRightToLeft(lefts As ICollection(Of TLeft), rights As ICollection(Of TRight), context As ISynchronizationContext, ignoreCandidates As Boolean)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  name.vb: SynchronizeCollectionsRightToLeft(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  id: SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection{`1},System.Collections.Generic.ICollection{`0},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, Boolean)
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(ICollection<TRight>, ICollection<TLeft>, ISynchronizationContext, Boolean)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection<TRight>, System.Collections.Generic.ICollection<TLeft>, NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeCollectionsLeftToRight
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 540
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected virtual void SynchronizeCollectionsLeftToRight(ICollection<TRight> rights, ICollection<TLeft> lefts, ISynchronizationContext context, bool ignoreCandidates)
    parameters:
    - id: rights
      type: System.Collections.Generic.ICollection{{TRight}}
    - id: lefts
      type: System.Collections.Generic.ICollection{{TLeft}}
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    - id: ignoreCandidates
      type: System.Boolean
    content.vb: Protected Overridable Sub SynchronizeCollectionsLeftToRight(rights As ICollection(Of TRight), lefts As ICollection(Of TLeft), context As ISynchronizationContext, ignoreCandidates As Boolean)
  overload: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight(System.Collections.Generic.ICollection(Of TRight), System.Collections.Generic.ICollection(Of TLeft), NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  name.vb: SynchronizeCollectionsLeftToRight(ICollection(Of TRight), ICollection(Of TLeft), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  commentId: M:NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  id: MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
  parent: NMF.Synchronizations.SynchronizationRule`2
  langs:
  - csharp
  - vb
  name: MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, Boolean>>, Expression<Func<TRight, Boolean>>)
  nameWithType: SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(SynchronizationRuleBase, Expression<Func<TLeft, Boolean>>, Expression<Func<TRight, Boolean>>)
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression<System.Func<TLeft, System.Boolean>>, System.Linq.Expressions.Expression<System.Func<TRight, System.Boolean>>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MarkInstantiatingFor
    path: src/Synchronizations/Synchronizations/SynchronizationRule.cs
    startLine: 604
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void MarkInstantiatingFor(SynchronizationRuleBase synchronizationRule, Expression<Func<TLeft, bool>> leftPredicate = null, Expression<Func<TRight, bool>> rightPredicate = null)
    parameters:
    - id: synchronizationRule
      type: NMF.Synchronizations.SynchronizationRuleBase
    - id: leftPredicate
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
    - id: rightPredicate
      type: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
    content.vb: Public Sub MarkInstantiatingFor(synchronizationRule As SynchronizationRuleBase, leftPredicate As Expression(Of Func(Of TLeft, Boolean)) = Nothing, rightPredicate As Expression(Of Func(Of TRight, Boolean)) = Nothing)
  overload: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor*
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor(NMF.Synchronizations.SynchronizationRuleBase, System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Boolean)), System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Boolean)))
  name.vb: MarkInstantiatingFor(SynchronizationRuleBase, Expression(Of Func(Of TLeft, Boolean)), Expression(Of Func(Of TRight, Boolean)))
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Synchronizations.SynchronizationRuleBase
  commentId: T:NMF.Synchronizations.SynchronizationRuleBase
  parent: NMF.Synchronizations
  name: SynchronizationRuleBase
  nameWithType: SynchronizationRuleBase
  fullName: NMF.Synchronizations.SynchronizationRuleBase
- uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: DeclareSynchronization()
  nameWithType: SynchronizationRuleBase.DeclareSynchronization()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
    name: DeclareSynchronization
    nameWithType: SynchronizationRuleBase.DeclareSynchronization
    fullName: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
    name: DeclareSynchronization
    nameWithType: SynchronizationRuleBase.DeclareSynchronization
    fullName: NMF.Synchronizations.SynchronizationRuleBase.DeclareSynchronization
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.Synchronization
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: Synchronization
  nameWithType: SynchronizationRuleBase.Synchronization
  fullName: NMF.Synchronizations.SynchronizationRuleBase.Synchronization
- uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: SyncRule<TRule>()
  nameWithType: SynchronizationRuleBase.SyncRule<TRule>()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.SyncRule<TRule>()
  nameWithType.vb: SynchronizationRuleBase.SyncRule(Of TRule)()
  fullName.vb: NMF.Synchronizations.SynchronizationRuleBase.SyncRule(Of TRule)()
  name.vb: SyncRule(Of TRule)()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
    name: SyncRule<TRule>
    nameWithType: SynchronizationRuleBase.SyncRule<TRule>
    fullName: NMF.Synchronizations.SynchronizationRuleBase.SyncRule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.SyncRule``1
    name: SyncRule(Of TRule)
    nameWithType: SynchronizationRuleBase.SyncRule(Of TRule)
    fullName: NMF.Synchronizations.SynchronizationRuleBase.SyncRule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  commentId: M:NMF.Synchronizations.SynchronizationRuleBase.Rule``1
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: Rule<TRule>()
  nameWithType: SynchronizationRuleBase.Rule<TRule>()
  fullName: NMF.Synchronizations.SynchronizationRuleBase.Rule<TRule>()
  nameWithType.vb: SynchronizationRuleBase.Rule(Of TRule)()
  fullName.vb: NMF.Synchronizations.SynchronizationRuleBase.Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
    name: Rule<TRule>
    nameWithType: SynchronizationRuleBase.Rule<TRule>
    fullName: NMF.Synchronizations.SynchronizationRuleBase.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRuleBase.Rule``1
    name: Rule(Of TRule)
    nameWithType: SynchronizationRuleBase.Rule(Of TRule)
    fullName: NMF.Synchronizations.SynchronizationRuleBase.Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizationJobs
  name: SynchronizationJobs
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationJobs
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationJobs
- uid: System.Collections.Generic.ICollection{NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}}
  commentId: T:System.Collections.Generic.ICollection{NMF.Synchronizations.ISynchronizationJob{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ISynchronizationJob<TLeft, TRight>>
  nameWithType: ICollection<ISynchronizationJob<TLeft, TRight>>
  fullName: System.Collections.Generic.ICollection<NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>>
  nameWithType.vb: ICollection(Of ISynchronizationJob(Of TLeft, TRight))
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight))
  name.vb: ICollection(Of ISynchronizationJob(Of TLeft, TRight))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Synchronizations.SynchronizationRule`2.#ctor*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.#ctor
  name: SynchronizationRule
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizationRule
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizationRule
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizationRule
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizationRule
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftToRight*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.LeftToRight
  name: LeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftToRight
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftToRight
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftToRight
- uid: TransformationRuleBase{{TLeft},{TRight}}
  commentId: '!:TransformationRuleBase{`0,`1}'
  definition: TransformationRuleBase`2
  name: TransformationRuleBase<TLeft, TRight>
  nameWithType: TransformationRuleBase<TLeft, TRight>
  fullName: TransformationRuleBase<TLeft, TRight>
  nameWithType.vb: TransformationRuleBase(Of TLeft, TRight)
  fullName.vb: TransformationRuleBase(Of TLeft, TRight)
  name.vb: TransformationRuleBase(Of TLeft, TRight)
  spec.csharp:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: TransformationRuleBase`2
  isExternal: true
  name: TransformationRuleBase<, >
  nameWithType: TransformationRuleBase<, >
  fullName: TransformationRuleBase<, >
  nameWithType.vb: TransformationRuleBase(Of , )
  fullName.vb: TransformationRuleBase(Of , )
  name.vb: TransformationRuleBase(Of , )
  spec.csharp:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.RightToLeft*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.RightToLeft
  name: RightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.RightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightToLeft
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightToLeft
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightToLeft
- uid: TransformationRuleBase{{TRight},{TLeft}}
  commentId: '!:TransformationRuleBase{`1,`0}'
  definition: TransformationRuleBase`2
  name: TransformationRuleBase<TRight, TLeft>
  nameWithType: TransformationRuleBase<TRight, TLeft>
  fullName: TransformationRuleBase<TRight, TLeft>
  nameWithType.vb: TransformationRuleBase(Of TRight, TLeft)
  fullName.vb: TransformationRuleBase(Of TRight, TLeft)
  name.vb: TransformationRuleBase(Of TRight, TLeft)
  spec.csharp:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: TransformationRuleBase
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.TransformationDelayLevel
  name: TransformationDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.TransformationDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).TransformationDelayLevel
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.OutputDelayLevel
  name: OutputDelayLevel
  nameWithType: SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.OutputDelayLevel
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).OutputDelayLevel
- uid: NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.ShouldCorrespond
  name: ShouldCorrespond
  nameWithType: SynchronizationRule<TLeft, TRight>.ShouldCorrespond
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.ShouldCorrespond
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).ShouldCorrespond
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).ShouldCorrespond
- uid: '{TLeft}'
  commentId: '!:TLeft'
  definition: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: '{TRight}'
  commentId: '!:TRight'
  definition: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.SynchronizationRuleBase.LeftType
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.LeftType
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: LeftType
  nameWithType: SynchronizationRuleBase.LeftType
  fullName: NMF.Synchronizations.SynchronizationRuleBase.LeftType
- uid: NMF.Synchronizations.SynchronizationRule`2.LeftType*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.LeftType
  name: LeftType
  nameWithType: SynchronizationRule<TLeft, TRight>.LeftType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.LeftType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).LeftType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).LeftType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Synchronizations.SynchronizationRuleBase.RightType
  commentId: P:NMF.Synchronizations.SynchronizationRuleBase.RightType
  parent: NMF.Synchronizations.SynchronizationRuleBase
  name: RightType
  nameWithType: SynchronizationRuleBase.RightType
  fullName: NMF.Synchronizations.SynchronizationRuleBase.RightType
- uid: NMF.Synchronizations.SynchronizationRule`2.RightType*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.RightType
  name: RightType
  nameWithType: SynchronizationRule<TLeft, TRight>.RightType
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.RightType
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).RightType
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).RightType
- uid: NMF.Synchronizations.SynchronizationRule`2.Synchronize*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.Synchronize
  name: Synchronize
  nameWithType: SynchronizationRule<TLeft, TRight>.Synchronize
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.Synchronize
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).Synchronize
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).Synchronize
- uid: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
  commentId: T:NMF.Synchronizations.SynchronizationRule{`2,`3}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TDepLeft, TDepRight>
  nameWithType: SynchronizationRule<TDepLeft, TDepRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>
  nameWithType.vb: SynchronizationRule(Of TDepLeft, TDepRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight)
  name.vb: SynchronizationRule(Of TDepLeft, TDepRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},{TDepLeft}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, TDepLeft>>
  nameWithType: Expression<Func<TLeft, TDepLeft>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, TDepLeft>>
  nameWithType.vb: Expression(Of Func(Of TLeft, TDepLeft))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TDepLeft))
  name.vb: Expression(Of Func(Of TLeft, TDepLeft))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},{TDepRight}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRight, TDepRight>>
  nameWithType: Expression<Func<TRight, TDepRight>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, TDepRight>>
  nameWithType.vb: Expression(Of Func(Of TRight, TDepRight))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, TDepRight))
  name.vb: Expression(Of Func(Of TRight, TDepRight))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},{TRight},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, TRight, Boolean>>
  nameWithType: Expression<Func<TLeft, TRight, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, TRight, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TLeft, TRight, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TRight, System.Boolean))
  name.vb: Expression(Of Func(Of TLeft, TRight, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2
  commentId: T:NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Action{{TLeft},{TDepLeft}}
  commentId: T:System.Action{`0,``0}
  parent: System
  definition: System.Action`2
  name: Action<TLeft, TDepLeft>
  nameWithType: Action<TLeft, TDepLeft>
  fullName: System.Action<TLeft, TDepLeft>
  nameWithType.vb: Action(Of TLeft, TDepLeft)
  fullName.vb: System.Action(Of TLeft, TDepLeft)
  name.vb: Action(Of TLeft, TDepLeft)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TRight},{TDepRight}}
  commentId: T:System.Action{`1,``1}
  parent: System
  definition: System.Action`2
  name: Action<TRight, TDepRight>
  nameWithType: Action<TRight, TDepRight>
  fullName: System.Action<TRight, TDepRight>
  nameWithType.vb: Action(Of TRight, TDepRight)
  fullName.vb: System.Action(Of TRight, TDepRight)
  name.vb: Action(Of TRight, TDepRight)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLeftToRightOnly
  name: SynchronizeLeftToRightOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLeftToRightOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLeftToRightOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, Boolean>>
  nameWithType: Expression<Func<TLeft, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TLeft, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Boolean))
  name.vb: Expression(Of Func(Of TLeft, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeRightToLeftOnly
  name: SynchronizeRightToLeftOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeRightToLeftOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeRightToLeftOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRight, Boolean>>
  nameWithType: Expression<Func<TRight, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TRight, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Boolean))
  name.vb: Expression(Of Func(Of TRight, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeMany
  name: SynchronizeMany
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeMany
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeMany
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeMany
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeMany
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},ICollectionExpression{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{`2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, ICollectionExpression<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},ICollectionExpression{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{`3}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRight, ICollectionExpression<TDepRight>>>
  nameWithType: Expression<Func<TRight, ICollectionExpression<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, ICollectionExpression<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, ICollectionExpression(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyLeftToRightOnly
  name: SynchronizeManyLeftToRightOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyLeftToRightOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyLeftToRightOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},IEnumerableExpression{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,IEnumerableExpression{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, IEnumerableExpression<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, IEnumerableExpression<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, IEnumerableExpression(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, IEnumerableExpression(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},System.Collections.Generic.ICollection{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRight, ICollection<TDepRight>>>
  nameWithType: Expression<Func<TRight, ICollection<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, System.Collections.Generic.ICollection<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ICollection(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, System.Collections.Generic.ICollection(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ICollection(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeManyRightToLeftOnly
  name: SynchronizeManyRightToLeftOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeManyRightToLeftOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeManyRightToLeftOnly
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},System.Collections.Generic.ICollection{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, ICollection<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ICollection<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, System.Collections.Generic.ICollection<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ICollection(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, System.Collections.Generic.ICollection(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ICollection(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},IEnumerableExpression{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,IEnumerableExpression{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRight, IEnumerableExpression<TDepRight>>>
  nameWithType: Expression<Func<TRight, IEnumerableExpression<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, IEnumerableExpression<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, IEnumerableExpression(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, IEnumerableExpression(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: IEnumerableExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLate
  name: SynchronizeLate
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLate
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLate
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLate
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLate
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, TValue>>
  nameWithType: Expression<Func<TLeft, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, TValue>>
  nameWithType.vb: Expression(Of Func(Of TLeft, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, TValue))
  name.vb: Expression(Of Func(Of TLeft, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,`2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRight, TValue>>
  nameWithType: Expression<Func<TRight, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, TValue>>
  nameWithType.vb: Expression(Of Func(Of TRight, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, TValue))
  name.vb: Expression(Of Func(Of TRight, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TRight},{TValue}}
  commentId: T:System.Action{`1,``0}
  parent: System
  definition: System.Action`2
  name: Action<TRight, TValue>
  nameWithType: Action<TRight, TValue>
  fullName: System.Action<TRight, TValue>
  nameWithType.vb: Action(Of TRight, TValue)
  fullName.vb: System.Action(Of TRight, TValue)
  name.vb: Action(Of TRight, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateLeftToRightOnly
  name: SynchronizeLateLeftToRightOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateLeftToRightOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateLeftToRightOnly
- uid: System.Action{{TLeft},{TValue}}
  commentId: T:System.Action{`0,``0}
  parent: System
  definition: System.Action`2
  name: Action<TLeft, TValue>
  nameWithType: Action<TLeft, TValue>
  fullName: System.Action<TLeft, TValue>
  nameWithType.vb: Action(Of TLeft, TValue)
  fullName.vb: System.Action(Of TLeft, TValue)
  name.vb: Action(Of TLeft, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeLateRightToLeftOnly
  name: SynchronizeLateRightToLeftOnly
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeLateRightToLeftOnly
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeLateRightToLeftOnly
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeOpaque
  name: SynchronizeOpaque
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeOpaque
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeOpaque
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeOpaque
- uid: System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
  commentId: T:System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
  parent: System
  definition: System.Func`5
  name: Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>
  nameWithType: Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>
  fullName: System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>
  nameWithType.vb: Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable)
  fullName.vb: System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable)
  name.vb: Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.CreateRightOutput
  name: CreateRightOutput
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateRightOutput
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateRightOutput
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateRightOutput
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateRightOutput
- uid: System.Collections.Generic.IEnumerable{{TRight}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TRight>
  nameWithType: IEnumerable<TRight>
  fullName: System.Collections.Generic.IEnumerable<TRight>
  nameWithType.vb: IEnumerable(Of TRight)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TRight)
  name.vb: IEnumerable(Of TRight)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.CreateLeftOutput
  name: CreateLeftOutput
  nameWithType: SynchronizationRule<TLeft, TRight>.CreateLeftOutput
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.CreateLeftOutput
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).CreateLeftOutput
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).CreateLeftOutput
- uid: System.Collections.Generic.IEnumerable{{TLeft}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TLeft>
  nameWithType: IEnumerable<TLeft>
  fullName: System.Collections.Generic.IEnumerable<TLeft>
  nameWithType.vb: IEnumerable(Of TLeft)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TLeft)
  name.vb: IEnumerable(Of TLeft)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsRightToLeft
  name: SynchronizeCollectionsRightToLeft
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsRightToLeft
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsRightToLeft
- uid: System.Collections.Generic.ICollection{{TLeft}}
  commentId: T:System.Collections.Generic.ICollection{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TLeft>
  nameWithType: ICollection<TLeft>
  fullName: System.Collections.Generic.ICollection<TLeft>
  nameWithType.vb: ICollection(Of TLeft)
  fullName.vb: System.Collections.Generic.ICollection(Of TLeft)
  name.vb: ICollection(Of TLeft)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TRight}}
  commentId: T:System.Collections.Generic.ICollection{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TRight>
  nameWithType: ICollection<TRight>
  fullName: System.Collections.Generic.ICollection<TRight>
  nameWithType.vb: ICollection(Of TRight)
  fullName.vb: System.Collections.Generic.ICollection(Of TRight)
  name.vb: ICollection(Of TRight)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.SynchronizeCollectionsLeftToRight
  name: SynchronizeCollectionsLeftToRight
  nameWithType: SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.SynchronizeCollectionsLeftToRight
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).SynchronizeCollectionsLeftToRight
- uid: NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor*
  commentId: Overload:NMF.Synchronizations.SynchronizationRule`2.MarkInstantiatingFor
  name: MarkInstantiatingFor
  nameWithType: SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>.MarkInstantiatingFor
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight).MarkInstantiatingFor
