### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  id: GeneralTransformationRule
  parent: NMF.Transformations.Core
  children:
  - NMF.Transformations.Core.GeneralTransformationRule.#ctor
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.InputType
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.OutputType
  - NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  langs:
  - csharp
  - vb
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
  type: Class
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GeneralTransformationRule
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 15
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nThis class represents the base class for a transformation rule\n"
  example: []
  syntax:
    content: public abstract class GeneralTransformationRule
    content.vb: Public MustInherit Class GeneralTransformationRule
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Transformations.GeneralTransformationRule`1
  - NMF.Transformations.GeneralTransformationRule`2
  - NMF.Transformations.InPlaceTransformationRuleBase
  - NMF.Transformations.TransformationRuleBase`1
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: NMF.Transformations.Core.GeneralTransformationRule.#ctor
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.#ctor
  id: '#ctor'
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: GeneralTransformationRule()
  nameWithType: GeneralTransformationRule.GeneralTransformationRule()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.GeneralTransformationRule()
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 21
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nCreates a new transformation rule\n"
  example: []
  syntax:
    content: protected GeneralTransformationRule()
    content.vb: Protected Sub New
  overload: NMF.Transformations.Core.GeneralTransformationRule.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  id: RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterDependencies
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 34
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nRegisters all the dependencies (both calling and non-calling) and additional configuration\n"
  remarks: This method is called during initialization of the entire transformation and is independent of any transformation contexts. However, this method may rely on the <xref href="NMF.Transformations.Core.GeneralTransformationRule.Transformation" data-throw-if-not-resolved="false"></xref>-property.
  example: []
  syntax:
    content: public virtual void RegisterDependencies()
    content.vb: Public Overridable Sub RegisterDependencies
  overload: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: NMF.Transformations.Core.GeneralTransformationRule.InputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.InputType
  id: InputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: InputType
  nameWithType: GeneralTransformationRule.InputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.InputType
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InputType
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 39
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets the type signature of the input arguments of this transformation rule\n"
  example: []
  syntax:
    content: public abstract Type[] InputType { get; }
    parameters: []
    return:
      type: System.Type[]
    content.vb: Public MustOverride ReadOnly Property InputType As Type()
  overload: NMF.Transformations.Core.GeneralTransformationRule.InputType*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  id: OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OutputType
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 45
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets the type signature of the output type of this transformation\n"
  example: []
  syntax:
    content: public abstract Type OutputType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public MustOverride ReadOnly Property OutputType As Type
  overload: NMF.Transformations.Core.GeneralTransformationRule.OutputType*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  id: CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateComputation
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 53
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nCreates a new Computation instance for this transformation rule or the given input \n"
  example: []
  syntax:
    content: public abstract Computation CreateComputation(object[] input, IComputationContext context)
    parameters:
    - id: input
      type: System.Object[]
      description: The input arguments for this computation
    - id: context
      type: NMF.Transformations.Core.IComputationContext
      description: The context for this computation
    return:
      type: NMF.Transformations.Core.Computation
      description: A computation object
    content.vb: Public MustOverride Function CreateComputation(input As Object(), context As IComputationContext) As Computation
  overload: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation*
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  id: NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NeedDependenciesForOutputCreation
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 59
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets a value indicating whether the output for all dependencies must have been created before this rule creates the output\n"
  example: []
  syntax:
    content: public virtual bool NeedDependenciesForOutputCreation { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property NeedDependenciesForOutputCreation As Boolean
  overload: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  id: Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transformation
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 71
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets the transformation, that this rule is assigned to\n"
  example: []
  syntax:
    content: public Transformation Transformation { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.Transformation
    content.vb: Public ReadOnly Property Transformation As Transformation
  overload: NMF.Transformations.Core.GeneralTransformationRule.Transformation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  id: Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 76
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets a collection of dependencies for this transformation rule\n"
  example: []
  syntax:
    content: public IList<ITransformationRuleDependency> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{NMF.Transformations.Core.ITransformationRuleDependency}
    content.vb: Public ReadOnly Property Dependencies As IList(Of ITransformationRuleDependency)
  overload: NMF.Transformations.Core.GeneralTransformationRule.Dependencies*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  id: OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OutputDelayLevel
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 82
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets or sets the output delay level\n"
  remarks: The default delay level is 0. The delay level has an influence on the availability of the trace data during output creation.
  example: []
  syntax:
    content: public byte OutputDelayLevel { get; protected set; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Property OutputDelayLevel As Byte
  overload: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  id: TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationDelayLevel
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 89
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets or sets the transformation delay level\n"
  remarks: The default transformation delay level is 0. The delay has an influence when computations are made
  example: []
  syntax:
    content: public byte TransformationDelayLevel { get; protected set; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Property TransformationDelayLevel As Byte
  overload: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  id: IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsUnique
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 95
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets or sets a value indicating whether this transformation rule is unique per input and context\n"
  example: []
  syntax:
    content: public bool IsUnique { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsUnique As Boolean
  overload: NMF.Transformations.Core.GeneralTransformationRule.IsUnique*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  id: BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: BaseRule
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 106
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets the base rule, i.e. the rule the current rule can instantiate\n"
  example: []
  syntax:
    content: public GeneralTransformationRule BaseRule { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.GeneralTransformationRule
    content.vb: Public ReadOnly Property BaseRule As GeneralTransformationRule
  overload: NMF.Transformations.Core.GeneralTransformationRule.BaseRule*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  id: IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsInstantiating
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 198
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nDetermines whether the current transformation rule can instantiate the output of the given computation\n"
  example: []
  syntax:
    content: public bool IsInstantiating(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation that may be instantiated by the current rule
    return:
      type: System.Boolean
      description: True, if the computation instantiates the given computation, otherwise false
    content.vb: Public Function IsInstantiating(computation As Computation) As Boolean
  overload: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  id: HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HasCompliantInput
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 218
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets a value indicating whether the given computation has a compliant input to be instantiated by the current transformation rule\n"
  example: []
  syntax:
    content: public bool HasCompliantInput(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation that is a candidate for instantiation
    return:
      type: System.Boolean
      description: True, if the input arguments match the input types of the current transformation rule, otherwise false
    content.vb: Public Function HasCompliantInput(computation As Computation) As Boolean
  overload: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  id: Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Require
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 240
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nRequires the given transformation rule\n"
  remarks: This version Always takes the input parameter as input for the dependent transformations. Thus, this method will throw an exception, if the types do not match
  example: []
  syntax:
    content: public void Require(GeneralTransformationRule rule)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule that should be required
    content.vb: Public Sub Require(rule As GeneralTransformationRule)
  overload: NMF.Transformations.Core.GeneralTransformationRule.Require*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  id: Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Call
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 258
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nRequires the given transformation rule\n"
  remarks: This version Always takes the input parameter as input for the dependent transformations. Thus, this method will throw an exception, if the types do not match
  example: []
  syntax:
    content: public void Call(GeneralTransformationRule rule)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule that should be required
    content.vb: Public Sub Call(rule As GeneralTransformationRule)
  overload: NMF.Transformations.Core.GeneralTransformationRule.Call*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  id: MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MarkInstantiatingFor
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 275
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nMarks the current transformation rule instantiating for the specified rule\n"
  example: []
  syntax:
    content: public void MarkInstantiatingFor(GeneralTransformationRule rule)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The base transformation rule
    content.vb: Public Sub MarkInstantiatingFor(rule As GeneralTransformationRule)
  overload: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  id: MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  langs:
  - csharp
  - vb
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MarkInstantiatingFor
    path: src/Transformations/Transformations.Core/Core/GeneralTransformationRule.cs
    startLine: 294
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nMarks the current transformation rule instantiating for the specified rule\n"
  remarks: Note that in this version, the filter method is also responsible for checking the types!
  example: []
  syntax:
    content: public void MarkInstantiatingFor(GeneralTransformationRule rule, Predicate<Computation> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The base transformation rule
    - id: filter
      type: System.Predicate{NMF.Transformations.Core.Computation}
      description: A method that filters the possible computations
    content.vb: Public Sub MarkInstantiatingFor(rule As GeneralTransformationRule, filter As Predicate(Of Computation))
  overload: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor*
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
references:
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core.GeneralTransformationRule.#ctor*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.#ctor
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule.GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.GeneralTransformationRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  name: RegisterDependencies
  nameWithType: GeneralTransformationRule.RegisterDependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.InputType*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.InputType
  name: InputType
  nameWithType: GeneralTransformationRule.InputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.InputType
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  name: CreateComputation
  nameWithType: GeneralTransformationRule.CreateComputation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NMF.Transformations.Core.IComputationContext
  commentId: T:NMF.Transformations.Core.IComputationContext
  parent: NMF.Transformations.Core
  name: IComputationContext
  nameWithType: IComputationContext
  fullName: NMF.Transformations.Core.IComputationContext
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  parent: NMF.Transformations.Core
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: System.Collections.Generic.IList{NMF.Transformations.Core.ITransformationRuleDependency}
  commentId: T:System.Collections.Generic.IList{NMF.Transformations.Core.ITransformationRuleDependency}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ITransformationRuleDependency>
  nameWithType: IList<ITransformationRuleDependency>
  fullName: System.Collections.Generic.IList<NMF.Transformations.Core.ITransformationRuleDependency>
  nameWithType.vb: IList(Of ITransformationRuleDependency)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Transformations.Core.ITransformationRuleDependency)
  name.vb: IList(Of ITransformationRuleDependency)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationRuleDependency
    name: ITransformationRuleDependency
    nameWithType: ITransformationRuleDependency
    fullName: NMF.Transformations.Core.ITransformationRuleDependency
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationRuleDependency
    name: ITransformationRuleDependency
    nameWithType: ITransformationRuleDependency
    fullName: NMF.Transformations.Core.ITransformationRuleDependency
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  name: IsInstantiating
  nameWithType: GeneralTransformationRule.IsInstantiating
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  name: HasCompliantInput
  nameWithType: GeneralTransformationRule.HasCompliantInput
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.Require
  name: Require
  nameWithType: GeneralTransformationRule.Require
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.Call
  name: Call
  nameWithType: GeneralTransformationRule.Call
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor*
  commentId: Overload:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  name: MarkInstantiatingFor
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
- uid: System.Predicate{NMF.Transformations.Core.Computation}
  commentId: T:System.Predicate{NMF.Transformations.Core.Computation}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Computation>
  nameWithType: Predicate<Computation>
  fullName: System.Predicate<NMF.Transformations.Core.Computation>
  nameWithType.vb: Predicate(Of Computation)
  fullName.vb: System.Predicate(Of NMF.Transformations.Core.Computation)
  name.vb: Predicate(Of Computation)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
