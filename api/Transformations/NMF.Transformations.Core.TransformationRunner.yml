### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Core.TransformationRunner
  commentId: T:NMF.Transformations.Core.TransformationRunner
  id: TransformationRunner
  parent: NMF.Transformations.Core
  children:
  - NMF.Transformations.Core.TransformationRunner.Transform(System.Object[],System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.Core.TransformationRunner.TransformMany(System.Collections.Generic.IEnumerable{System.Object[]},System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  langs:
  - csharp
  - vb
  name: TransformationRunner
  nameWithType: TransformationRunner
  fullName: NMF.Transformations.Core.TransformationRunner
  type: Class
  source:
    remote:
      path: Transformations/Transformations.Core/Core/TransformationRunner.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationRunner
    path: src/Transformations/Transformations.Core/Core/TransformationRunner.cs
    startLine: 12
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nService class to run transformations\n"
  example: []
  syntax:
    content: public static class TransformationRunner
    content.vb: Public Module TransformationRunner
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Transformations.Core.TransformationRunner.Transform(System.Object[],System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.Core.TransformationRunner.Transform(System.Object[],System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  id: Transform(System.Object[],System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.Core.TransformationRunner
  langs:
  - csharp
  - vb
  name: Transform(Object[], IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
  nameWithType: TransformationRunner.Transform(Object[], IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
  fullName: NMF.Transformations.Core.TransformationRunner.Transform(System.Object[], System.Collections.IEnumerable, NMF.Transformations.Core.GeneralTransformationRule, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/TransformationRunner.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations.Core/Core/TransformationRunner.cs
    startLine: 23
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: public static Computation Transform(object[] input, IEnumerable inputContext, GeneralTransformationRule startRule, ITransformationEngineContext context)
    parameters:
    - id: input
      type: System.Object[]
      description: The input arguments as an array. This must not be null. The correct amount of parameters depends on the rule to start with.
    - id: inputContext
      type: System.Collections.IEnumerable
      description: The context in which the transformation rule is executed
    - id: startRule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The start rule to begin with (must not be null)
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The transformation context (must not be null)
    return:
      type: NMF.Transformations.Core.Computation
      description: The transformation computation
    content.vb: Public Shared Function Transform(input As Object(), inputContext As IEnumerable, startRule As GeneralTransformationRule, context As ITransformationEngineContext) As Computation
  overload: NMF.Transformations.Core.TransformationRunner.Transform*
  nameWithType.vb: TransformationRunner.Transform(Object(), IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.Core.TransformationRunner.Transform(System.Object(), System.Collections.IEnumerable, NMF.Transformations.Core.GeneralTransformationRule, NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: Transform(Object(), IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
- uid: NMF.Transformations.Core.TransformationRunner.TransformMany(System.Collections.Generic.IEnumerable{System.Object[]},System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.Core.TransformationRunner.TransformMany(System.Collections.Generic.IEnumerable{System.Object[]},System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  id: TransformMany(System.Collections.Generic.IEnumerable{System.Object[]},System.Collections.IEnumerable,NMF.Transformations.Core.GeneralTransformationRule,NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.Core.TransformationRunner
  langs:
  - csharp
  - vb
  name: TransformMany(IEnumerable<Object[]>, IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
  nameWithType: TransformationRunner.TransformMany(IEnumerable<Object[]>, IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
  fullName: NMF.Transformations.Core.TransformationRunner.TransformMany(System.Collections.Generic.IEnumerable<System.Object[]>, System.Collections.IEnumerable, NMF.Transformations.Core.GeneralTransformationRule, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/TransformationRunner.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations.Core/Core/TransformationRunner.cs
    startLine: 68
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: public static IEnumerable<Computation> TransformMany(IEnumerable<object[]> inputs, IEnumerable inputContext, GeneralTransformationRule startRule, ITransformationEngineContext context)
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Object[]}
      description: The input arguments as an array. This must not be null. The correct amount of parameters depends on the rule to start with.
    - id: inputContext
      type: System.Collections.IEnumerable
      description: The context object in which the transformation is run
    - id: startRule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The start rule to begin with (must not be null)
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The transformation context (must not be null)
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.Computation}
      description: The transformation computations
    content.vb: Public Shared Function TransformMany(inputs As IEnumerable(Of Object()), inputContext As IEnumerable, startRule As GeneralTransformationRule, context As ITransformationEngineContext) As IEnumerable(Of Computation)
  overload: NMF.Transformations.Core.TransformationRunner.TransformMany*
  nameWithType.vb: TransformationRunner.TransformMany(IEnumerable(Of Object()), IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.Core.TransformationRunner.TransformMany(System.Collections.Generic.IEnumerable(Of System.Object()), System.Collections.IEnumerable, NMF.Transformations.Core.GeneralTransformationRule, NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: TransformMany(IEnumerable(Of Object()), IEnumerable, GeneralTransformationRule, ITransformationEngineContext)
references:
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core.TransformationRunner.Transform*
  commentId: Overload:NMF.Transformations.Core.TransformationRunner.Transform
  name: Transform
  nameWithType: TransformationRunner.Transform
  fullName: NMF.Transformations.Core.TransformationRunner.Transform
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.Core.ITransformationEngineContext
  commentId: T:NMF.Transformations.Core.ITransformationEngineContext
  parent: NMF.Transformations.Core
  name: ITransformationEngineContext
  nameWithType: ITransformationEngineContext
  fullName: NMF.Transformations.Core.ITransformationEngineContext
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Transformations.Core.TransformationRunner.TransformMany*
  commentId: Overload:NMF.Transformations.Core.TransformationRunner.TransformMany
  name: TransformMany
  nameWithType: TransformationRunner.TransformMany
  fullName: NMF.Transformations.Core.TransformationRunner.TransformMany
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object[]>
  nameWithType: IEnumerable<Object[]>
  fullName: System.Collections.Generic.IEnumerable<System.Object[]>
  nameWithType.vb: IEnumerable(Of Object())
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.Computation}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Core.Computation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Computation>
  nameWithType: IEnumerable<Computation>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Core.Computation>
  nameWithType.vb: IEnumerable(Of Computation)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Core.Computation)
  name.vb: IEnumerable(Of Computation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
