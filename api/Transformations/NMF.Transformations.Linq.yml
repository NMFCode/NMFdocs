### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  id: NMF.Transformations.Linq
  children:
  - NMF.Transformations.Linq.IncrementalExtensions
  - NMF.Transformations.Linq.IncrementalPattern`1
  - NMF.Transformations.Linq.IncrementalPattern`2
  - NMF.Transformations.Linq.InPlaceComputationWrapper`1
  - NMF.Transformations.Linq.InPlaceComputationWrapper`2
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  - NMF.Transformations.Linq.StaticPattern`1
  - NMF.Transformations.Linq.StaticPattern`2
  - NMF.Transformations.Linq.TransformationComputationWrapper`2
  - NMF.Transformations.Linq.TransformationComputationWrapper`3
  - NMF.Transformations.Linq.TransformationRuleSource`2
  - NMF.Transformations.Linq.TransformationRuleSource`3
  langs:
  - csharp
  - vb
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
  type: Namespace
  assemblies:
  - NMF.Transformations
references:
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
  commentId: T:NMF.Transformations.Linq.TransformationComputationWrapper`2
  parent: NMF.Transformations.Linq
  name: TransformationComputationWrapper<TIn, TOut>
  nameWithType: TransformationComputationWrapper<TIn, TOut>
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn, TOut>
  nameWithType.vb: TransformationComputationWrapper(Of TIn, TOut)
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn, TOut)
  name.vb: TransformationComputationWrapper(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
  commentId: T:NMF.Transformations.Linq.TransformationComputationWrapper`3
  parent: NMF.Transformations.Linq
  name: TransformationComputationWrapper<TIn1, TIn2, TOut>
  nameWithType: TransformationComputationWrapper<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  name.vb: TransformationComputationWrapper(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
  commentId: T:NMF.Transformations.Linq.InPlaceComputationWrapper`1
  parent: NMF.Transformations.Linq
  name: InPlaceComputationWrapper<TIn>
  nameWithType: InPlaceComputationWrapper<TIn>
  fullName: NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>
  nameWithType.vb: InPlaceComputationWrapper(Of TIn)
  fullName.vb: NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn)
  name.vb: InPlaceComputationWrapper(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    nameWithType: InPlaceComputationWrapper
    fullName: NMF.Transformations.Linq.InPlaceComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    nameWithType: InPlaceComputationWrapper
    fullName: NMF.Transformations.Linq.InPlaceComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
  commentId: T:NMF.Transformations.Linq.InPlaceComputationWrapper`2
  parent: NMF.Transformations.Linq
  name: InPlaceComputationWrapper<TIn1, TIn2>
  nameWithType: InPlaceComputationWrapper<TIn1, TIn2>
  fullName: NMF.Transformations.Linq.InPlaceComputationWrapper<TIn1, TIn2>
  nameWithType.vb: InPlaceComputationWrapper(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn1, TIn2)
  name.vb: InPlaceComputationWrapper(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    nameWithType: InPlaceComputationWrapper
    fullName: NMF.Transformations.Linq.InPlaceComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    nameWithType: InPlaceComputationWrapper
    fullName: NMF.Transformations.Linq.InPlaceComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions
  commentId: T:NMF.Transformations.Linq.IncrementalExtensions
  parent: NMF.Transformations.Linq
  name: IncrementalExtensions
  nameWithType: IncrementalExtensions
  fullName: NMF.Transformations.Linq.IncrementalExtensions
- uid: NMF.Transformations.Linq.IncrementalPattern`1
  commentId: T:NMF.Transformations.Linq.IncrementalPattern`1
  name: IncrementalPattern<TIn>
  nameWithType: IncrementalPattern<TIn>
  fullName: NMF.Transformations.Linq.IncrementalPattern<TIn>
  nameWithType.vb: IncrementalPattern(Of TIn)
  fullName.vb: NMF.Transformations.Linq.IncrementalPattern(Of TIn)
  name.vb: IncrementalPattern(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalPattern`1
    name: IncrementalPattern
    nameWithType: IncrementalPattern
    fullName: NMF.Transformations.Linq.IncrementalPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalPattern`1
    name: IncrementalPattern
    nameWithType: IncrementalPattern
    fullName: NMF.Transformations.Linq.IncrementalPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalPattern`2
  commentId: T:NMF.Transformations.Linq.IncrementalPattern`2
  name: IncrementalPattern<TIn1, TIn2>
  nameWithType: IncrementalPattern<TIn1, TIn2>
  fullName: NMF.Transformations.Linq.IncrementalPattern<TIn1, TIn2>
  nameWithType.vb: IncrementalPattern(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.Linq.IncrementalPattern(Of TIn1, TIn2)
  name.vb: IncrementalPattern(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalPattern`2
    name: IncrementalPattern
    nameWithType: IncrementalPattern
    fullName: NMF.Transformations.Linq.IncrementalPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalPattern`2
    name: IncrementalPattern
    nameWithType: IncrementalPattern
    fullName: NMF.Transformations.Linq.IncrementalPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.StaticPattern`1
  commentId: T:NMF.Transformations.Linq.StaticPattern`1
  name: StaticPattern<T>
  nameWithType: StaticPattern<T>
  fullName: NMF.Transformations.Linq.StaticPattern<T>
  nameWithType.vb: StaticPattern(Of T)
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T)
  name.vb: StaticPattern(Of T)
  spec.csharp:
  - uid: NMF.Transformations.Linq.StaticPattern`1
    name: StaticPattern
    nameWithType: StaticPattern
    fullName: NMF.Transformations.Linq.StaticPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.StaticPattern`1
    name: StaticPattern
    nameWithType: StaticPattern
    fullName: NMF.Transformations.Linq.StaticPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.StaticPattern`2
  commentId: T:NMF.Transformations.Linq.StaticPattern`2
  name: StaticPattern<T1, T2>
  nameWithType: StaticPattern<T1, T2>
  fullName: NMF.Transformations.Linq.StaticPattern<T1, T2>
  nameWithType.vb: StaticPattern(Of T1, T2)
  fullName.vb: NMF.Transformations.Linq.StaticPattern(Of T1, T2)
  name.vb: StaticPattern(Of T1, T2)
  spec.csharp:
  - uid: NMF.Transformations.Linq.StaticPattern`2
    name: StaticPattern
    nameWithType: StaticPattern
    fullName: NMF.Transformations.Linq.StaticPattern
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.StaticPattern`2
    name: StaticPattern
    nameWithType: StaticPattern
    fullName: NMF.Transformations.Linq.StaticPattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.TransformationRuleSource`2
  commentId: T:NMF.Transformations.Linq.TransformationRuleSource`2
  name: TransformationRuleSource<TIn, TOut>
  nameWithType: TransformationRuleSource<TIn, TOut>
  fullName: NMF.Transformations.Linq.TransformationRuleSource<TIn, TOut>
  nameWithType.vb: TransformationRuleSource(Of TIn, TOut)
  fullName.vb: NMF.Transformations.Linq.TransformationRuleSource(Of TIn, TOut)
  name.vb: TransformationRuleSource(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.Linq.TransformationRuleSource`2
    name: TransformationRuleSource
    nameWithType: TransformationRuleSource
    fullName: NMF.Transformations.Linq.TransformationRuleSource
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.TransformationRuleSource`2
    name: TransformationRuleSource
    nameWithType: TransformationRuleSource
    fullName: NMF.Transformations.Linq.TransformationRuleSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.TransformationRuleSource`3
  commentId: T:NMF.Transformations.Linq.TransformationRuleSource`3
  name: TransformationRuleSource<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleSource<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.Linq.TransformationRuleSource<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleSource(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.Linq.TransformationRuleSource(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleSource(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.Linq.TransformationRuleSource`3
    name: TransformationRuleSource
    nameWithType: TransformationRuleSource
    fullName: NMF.Transformations.Linq.TransformationRuleSource
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.TransformationRuleSource`3
    name: TransformationRuleSource
    nameWithType: TransformationRuleSource
    fullName: NMF.Transformations.Linq.TransformationRuleSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  commentId: T:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  name: InPlaceTransformationRuleSource<TIn>
  nameWithType: InPlaceTransformationRuleSource<TIn>
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn)
  name.vb: InPlaceTransformationRuleSource(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
    name: InPlaceTransformationRuleSource
    nameWithType: InPlaceTransformationRuleSource
    fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
    name: InPlaceTransformationRuleSource
    nameWithType: InPlaceTransformationRuleSource
    fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  commentId: T:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  name: InPlaceTransformationRuleSource<TIn1, TIn2>
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2)
  name.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
    name: InPlaceTransformationRuleSource
    nameWithType: InPlaceTransformationRuleSource
    fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
    name: InPlaceTransformationRuleSource
    nameWithType: InPlaceTransformationRuleSource
    fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
