### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.TraceEntry`2
  commentId: T:NMF.Transformations.TraceEntry`2
  id: TraceEntry`2
  parent: NMF.Transformations
  children:
  - NMF.Transformations.TraceEntry`2.#ctor(NMF.Transformations.TransformationRuleBase{`0,`1},`0,`1)
  - NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#GetInput(System.Int32)
  - NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#Output
  - NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#TransformationRule
  - NMF.Transformations.TraceEntry`2.Output
  - NMF.Transformations.TraceEntry`2.TransformationRule
  langs:
  - csharp
  - vb
  name: TraceEntry<TInput, TOut>
  nameWithType: TraceEntry<TInput, TOut>
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>
  type: Class
  source:
    remote:
      path: Transformations/Transformations/NTL/TraceOnlyComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TraceEntry
    path: src/Transformations/Transformations/NTL/TraceOnlyComputation.cs
    startLine: 13
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nRepresents a computation that is only used for tracing purposes\n"
  example: []
  syntax:
    content: 'public sealed class TraceEntry<TInput, TOut> : ITraceEntry where TInput : class where TOut : class'
    typeParameters:
    - id: TInput
      description: The type of the trace key
    - id: TOut
      description: The output type of the trace entry
    content.vb: >-
      Public NotInheritable Class TraceEntry(Of TInput As Class, TOut As Class)
          Implements ITraceEntry
  inheritance:
  - System.Object
  implements:
  - NMF.Transformations.Core.ITraceEntry
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TraceEntry(Of TInput, TOut)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut)
  name.vb: TraceEntry(Of TInput, TOut)
- uid: NMF.Transformations.TraceEntry`2.#ctor(NMF.Transformations.TransformationRuleBase{`0,`1},`0,`1)
  commentId: M:NMF.Transformations.TraceEntry`2.#ctor(NMF.Transformations.TransformationRuleBase{`0,`1},`0,`1)
  id: '#ctor(NMF.Transformations.TransformationRuleBase{`0,`1},`0,`1)'
  parent: NMF.Transformations.TraceEntry`2
  langs:
  - csharp
  - vb
  name: TraceEntry(TransformationRuleBase<TInput, TOut>, TInput, TOut)
  nameWithType: TraceEntry<TInput, TOut>.TraceEntry(TransformationRuleBase<TInput, TOut>, TInput, TOut)
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.TraceEntry(NMF.Transformations.TransformationRuleBase<TInput, TOut>, TInput, TOut)
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations/NTL/TraceOnlyComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations/NTL/TraceOnlyComputation.cs
    startLine: 27
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates a new trace-only computation\n"
  example: []
  syntax:
    content: public TraceEntry(TransformationRuleBase<TInput, TOut> rule, TInput input, TOut output)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOut}}
      description: The transformation rule used as trace group
    - id: input
      type: '{TInput}'
      description: The trace key for this transformation rule
    - id: output
      type: '{TOut}'
      description: The output for this trace entry
    content.vb: Public Sub New(rule As TransformationRuleBase(Of TInput, TOut), input As TInput, output As TOut)
  overload: NMF.Transformations.TraceEntry`2.#ctor*
  nameWithType.vb: TraceEntry(Of TInput, TOut).TraceEntry(TransformationRuleBase(Of TInput, TOut), TInput, TOut)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).TraceEntry(NMF.Transformations.TransformationRuleBase(Of TInput, TOut), TInput, TOut)
  name.vb: TraceEntry(TransformationRuleBase(Of TInput, TOut), TInput, TOut)
- uid: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#GetInput(System.Int32)
  commentId: M:NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#GetInput(System.Int32)
  id: NMF#Transformations#Core#ITraceEntry#GetInput(System.Int32)
  isEii: true
  parent: NMF.Transformations.TraceEntry`2
  langs:
  - csharp
  - vb
  name: ITraceEntry.GetInput(Int32)
  nameWithType: TraceEntry<TInput, TOut>.ITraceEntry.GetInput(Int32)
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TraceOnlyComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Transformations.Core.ITraceEntry.GetInput
    path: src/Transformations/Transformations/NTL/TraceOnlyComputation.cs
    startLine: 34
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  syntax:
    content: object ITraceEntry.GetInput(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: Function NMF.Transformations.Core.ITraceEntry.GetInput(index As Integer) As Object Implements ITraceEntry.GetInput
  overload: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#GetInput*
  implements:
  - NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
  nameWithType.vb: TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.GetInput(Int32)
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
  name.vb: NMF.Transformations.Core.ITraceEntry.GetInput(Int32)
- uid: NMF.Transformations.TraceEntry`2.Output
  commentId: P:NMF.Transformations.TraceEntry`2.Output
  id: Output
  parent: NMF.Transformations.TraceEntry`2
  langs:
  - csharp
  - vb
  name: Output
  nameWithType: TraceEntry<TInput, TOut>.Output
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.Output
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/TraceOnlyComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Output
    path: src/Transformations/Transformations/NTL/TraceOnlyComputation.cs
    startLine: 44
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets the output of the trace entry\n"
  example: []
  syntax:
    content: public TOut Output { get; }
    parameters: []
    return:
      type: '{TOut}'
    content.vb: Public ReadOnly Property Output As TOut
  overload: NMF.Transformations.TraceEntry`2.Output*
  nameWithType.vb: TraceEntry(Of TInput, TOut).Output
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).Output
- uid: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#Output
  commentId: P:NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#Output
  id: NMF#Transformations#Core#ITraceEntry#Output
  isEii: true
  parent: NMF.Transformations.TraceEntry`2
  langs:
  - csharp
  - vb
  name: ITraceEntry.Output
  nameWithType: TraceEntry<TInput, TOut>.ITraceEntry.Output
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.NMF.Transformations.Core.ITraceEntry.Output
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/TraceOnlyComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Transformations.Core.ITraceEntry.Output
    path: src/Transformations/Transformations/NTL/TraceOnlyComputation.cs
    startLine: 49
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  syntax:
    content: object ITraceEntry.Output { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property NMF.Transformations.Core.ITraceEntry.Output As Object Implements ITraceEntry.Output
  overload: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#Output*
  implements:
  - NMF.Transformations.Core.ITraceEntry.Output
  nameWithType.vb: TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.Output
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.Output
  name.vb: NMF.Transformations.Core.ITraceEntry.Output
- uid: NMF.Transformations.TraceEntry`2.TransformationRule
  commentId: P:NMF.Transformations.TraceEntry`2.TransformationRule
  id: TransformationRule
  parent: NMF.Transformations.TraceEntry`2
  langs:
  - csharp
  - vb
  name: TransformationRule
  nameWithType: TraceEntry<TInput, TOut>.TransformationRule
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.TransformationRule
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/TraceOnlyComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationRule
    path: src/Transformations/Transformations/NTL/TraceOnlyComputation.cs
    startLine: 54
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets the transformation rule used as trace key for this trace entry\n"
  example: []
  syntax:
    content: public TransformationRuleBase<TInput, TOut> TransformationRule { get; }
    parameters: []
    return:
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOut}}
    content.vb: Public ReadOnly Property TransformationRule As TransformationRuleBase(Of TInput, TOut)
  overload: NMF.Transformations.TraceEntry`2.TransformationRule*
  nameWithType.vb: TraceEntry(Of TInput, TOut).TransformationRule
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).TransformationRule
- uid: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#TransformationRule
  commentId: P:NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#TransformationRule
  id: NMF#Transformations#Core#ITraceEntry#TransformationRule
  isEii: true
  parent: NMF.Transformations.TraceEntry`2
  langs:
  - csharp
  - vb
  name: ITraceEntry.TransformationRule
  nameWithType: TraceEntry<TInput, TOut>.ITraceEntry.TransformationRule
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.NMF.Transformations.Core.ITraceEntry.TransformationRule
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/TraceOnlyComputation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Transformations.Core.ITraceEntry.TransformationRule
    path: src/Transformations/Transformations/NTL/TraceOnlyComputation.cs
    startLine: 59
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  syntax:
    content: GeneralTransformationRule ITraceEntry.TransformationRule { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.GeneralTransformationRule
    content.vb: ReadOnly WriteOnly Property NMF.Transformations.Core.ITraceEntry.TransformationRule As GeneralTransformationRule Implements ITraceEntry.TransformationRule
  overload: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#TransformationRule*
  implements:
  - NMF.Transformations.Core.ITraceEntry.TransformationRule
  nameWithType.vb: TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.TransformationRule
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.TransformationRule
  name.vb: NMF.Transformations.Core.ITraceEntry.TransformationRule
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.ITraceEntry
  commentId: T:NMF.Transformations.Core.ITraceEntry
  parent: NMF.Transformations.Core
  name: ITraceEntry
  nameWithType: ITraceEntry
  fullName: NMF.Transformations.Core.ITraceEntry
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations.TraceEntry`2.#ctor*
  commentId: Overload:NMF.Transformations.TraceEntry`2.#ctor
  name: TraceEntry
  nameWithType: TraceEntry<TInput, TOut>.TraceEntry
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.TraceEntry
  nameWithType.vb: TraceEntry(Of TInput, TOut).TraceEntry
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).TraceEntry
- uid: NMF.Transformations.TransformationRuleBase{{TInput},{TOut}}
  commentId: T:NMF.Transformations.TransformationRuleBase{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TInput, TOut>
  nameWithType: TransformationRuleBase<TInput, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TInput, TOut>
  nameWithType.vb: TransformationRuleBase(Of TInput, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TInput, TOut)
  name.vb: TransformationRuleBase(Of TInput, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TInput}'
  commentId: '!:TInput'
  definition: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: '{TOut}'
  commentId: '!:TOut'
  definition: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: TInput
  commentId: '!:TInput'
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#GetInput*
  commentId: Overload:NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#GetInput
  name: ITraceEntry.GetInput
  nameWithType: TraceEntry<TInput, TOut>.ITraceEntry.GetInput
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.NMF.Transformations.Core.ITraceEntry.GetInput
  nameWithType.vb: TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.GetInput
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.GetInput
  name.vb: NMF.Transformations.Core.ITraceEntry.GetInput
- uid: NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
  commentId: M:NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
  parent: NMF.Transformations.Core.ITraceEntry
  isExternal: true
  name: GetInput(Int32)
  nameWithType: ITraceEntry.GetInput(Int32)
  fullName: NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
    name: GetInput
    nameWithType: ITraceEntry.GetInput
    fullName: NMF.Transformations.Core.ITraceEntry.GetInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITraceEntry.GetInput(System.Int32)
    name: GetInput
    nameWithType: ITraceEntry.GetInput
    fullName: NMF.Transformations.Core.ITraceEntry.GetInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Transformations.TraceEntry`2.Output*
  commentId: Overload:NMF.Transformations.TraceEntry`2.Output
  name: Output
  nameWithType: TraceEntry<TInput, TOut>.Output
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.Output
  nameWithType.vb: TraceEntry(Of TInput, TOut).Output
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).Output
- uid: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#Output*
  commentId: Overload:NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#Output
  name: ITraceEntry.Output
  nameWithType: TraceEntry<TInput, TOut>.ITraceEntry.Output
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.NMF.Transformations.Core.ITraceEntry.Output
  nameWithType.vb: TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.Output
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.Output
  name.vb: NMF.Transformations.Core.ITraceEntry.Output
- uid: NMF.Transformations.Core.ITraceEntry.Output
  commentId: P:NMF.Transformations.Core.ITraceEntry.Output
  parent: NMF.Transformations.Core.ITraceEntry
  name: Output
  nameWithType: ITraceEntry.Output
  fullName: NMF.Transformations.Core.ITraceEntry.Output
- uid: NMF.Transformations.TraceEntry`2.TransformationRule*
  commentId: Overload:NMF.Transformations.TraceEntry`2.TransformationRule
  name: TransformationRule
  nameWithType: TraceEntry<TInput, TOut>.TransformationRule
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.TransformationRule
  nameWithType.vb: TraceEntry(Of TInput, TOut).TransformationRule
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).TransformationRule
- uid: NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#TransformationRule*
  commentId: Overload:NMF.Transformations.TraceEntry`2.NMF#Transformations#Core#ITraceEntry#TransformationRule
  name: ITraceEntry.TransformationRule
  nameWithType: TraceEntry<TInput, TOut>.ITraceEntry.TransformationRule
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>.NMF.Transformations.Core.ITraceEntry.TransformationRule
  nameWithType.vb: TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.TransformationRule
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut).NMF.Transformations.Core.ITraceEntry.TransformationRule
  name.vb: NMF.Transformations.Core.ITraceEntry.TransformationRule
- uid: NMF.Transformations.Core.ITraceEntry.TransformationRule
  commentId: P:NMF.Transformations.Core.ITraceEntry.TransformationRule
  parent: NMF.Transformations.Core.ITraceEntry
  name: TransformationRule
  nameWithType: ITraceEntry.TransformationRule
  fullName: NMF.Transformations.Core.ITraceEntry.TransformationRule
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
