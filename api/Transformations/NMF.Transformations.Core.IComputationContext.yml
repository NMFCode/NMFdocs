### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Core.IComputationContext
  commentId: T:NMF.Transformations.Core.IComputationContext
  id: IComputationContext
  parent: NMF.Transformations.Core
  children:
  - NMF.Transformations.Core.IComputationContext.ConnectWith(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast(System.Byte)
  - NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast(System.Byte)
  - NMF.Transformations.Core.IComputationContext.InitializeOutput(System.Object)
  - NMF.Transformations.Core.IComputationContext.IsDelayed
  - NMF.Transformations.Core.IComputationContext.MarkRequire(NMF.Transformations.Core.Computation,System.Boolean)
  - NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel
  - NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel
  - NMF.Transformations.Core.IComputationContext.TransformationContext
  langs:
  - csharp
  - vb
  name: IComputationContext
  nameWithType: IComputationContext
  fullName: NMF.Transformations.Core.IComputationContext
  type: Interface
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IComputationContext
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 10
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nThis interface represents the transformation engine context information attached to a computation\n"
  example: []
  syntax:
    content: public interface IComputationContext
    content.vb: Public Interface IComputationContext
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: NMF.Transformations.Core.IComputationContext.TransformationContext
  commentId: P:NMF.Transformations.Core.IComputationContext.TransformationContext
  id: TransformationContext
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: TransformationContext
  nameWithType: IComputationContext.TransformationContext
  fullName: NMF.Transformations.Core.IComputationContext.TransformationContext
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationContext
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 15
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nThe transformation context in which the computation is made\n"
  example: []
  syntax:
    content: ITransformationContext TransformationContext { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.ITransformationContext
    content.vb: ReadOnly Property TransformationContext As ITransformationContext
  overload: NMF.Transformations.Core.IComputationContext.TransformationContext*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NMF.Transformations.Core.IComputationContext.MarkRequire(NMF.Transformations.Core.Computation,System.Boolean)
  commentId: M:NMF.Transformations.Core.IComputationContext.MarkRequire(NMF.Transformations.Core.Computation,System.Boolean)
  id: MarkRequire(NMF.Transformations.Core.Computation,System.Boolean)
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: MarkRequire(Computation, Boolean)
  nameWithType: IComputationContext.MarkRequire(Computation, Boolean)
  fullName: NMF.Transformations.Core.IComputationContext.MarkRequire(NMF.Transformations.Core.Computation, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MarkRequire
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 22
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nMark that this computation context requires another computation context to be done\n"
  example: []
  syntax:
    content: void MarkRequire(Computation other, bool isRequired)
    parameters:
    - id: other
      type: NMF.Transformations.Core.Computation
      description: The other computation context
    - id: isRequired
      type: System.Boolean
      description: True, if the other context is a strict requirement
    content.vb: Sub MarkRequire(other As Computation, isRequired As Boolean)
  overload: NMF.Transformations.Core.IComputationContext.MarkRequire*
- uid: NMF.Transformations.Core.IComputationContext.IsDelayed
  commentId: P:NMF.Transformations.Core.IComputationContext.IsDelayed
  id: IsDelayed
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: IsDelayed
  nameWithType: IComputationContext.IsDelayed
  fullName: NMF.Transformations.Core.IComputationContext.IsDelayed
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsDelayed
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 27
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets a value indicating whether this computation is delayed\n"
  example: []
  syntax:
    content: bool IsDelayed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsDelayed As Boolean
  overload: NMF.Transformations.Core.IComputationContext.IsDelayed*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NMF.Transformations.Core.IComputationContext.InitializeOutput(System.Object)
  commentId: M:NMF.Transformations.Core.IComputationContext.InitializeOutput(System.Object)
  id: InitializeOutput(System.Object)
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: InitializeOutput(Object)
  nameWithType: IComputationContext.InitializeOutput(Object)
  fullName: NMF.Transformations.Core.IComputationContext.InitializeOutput(System.Object)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InitializeOutput
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 33
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nInitializes the output of this computation\n"
  example: []
  syntax:
    content: void InitializeOutput(object output)
    parameters:
    - id: output
      type: System.Object
      description: ''
    content.vb: Sub InitializeOutput(output As Object)
  overload: NMF.Transformations.Core.IComputationContext.InitializeOutput*
- uid: NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast(System.Byte)
  commentId: M:NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast(System.Byte)
  id: DelayOutputAtLeast(System.Byte)
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: DelayOutputAtLeast(Byte)
  nameWithType: IComputationContext.DelayOutputAtLeast(Byte)
  fullName: NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast(System.Byte)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DelayOutputAtLeast
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 40
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nConfigures the computation to create its output at minimum with the given delay level\n"
  example: []
  syntax:
    content: void DelayOutputAtLeast(byte delayLevel)
    parameters:
    - id: delayLevel
      type: System.Byte
      description: The minimum delay level for this computation
    content.vb: Sub DelayOutputAtLeast(delayLevel As Byte)
  overload: NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast*
- uid: NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast(System.Byte)
  commentId: M:NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast(System.Byte)
  id: DelayTransformationAtLeast(System.Byte)
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: DelayTransformationAtLeast(Byte)
  nameWithType: IComputationContext.DelayTransformationAtLeast(Byte)
  fullName: NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast(System.Byte)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DelayTransformationAtLeast
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 46
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nConfigures the computation to be transformed at least with the given delay level\n"
  example: []
  syntax:
    content: void DelayTransformationAtLeast(byte delayLevel)
    parameters:
    - id: delayLevel
      type: System.Byte
      description: ''
    content.vb: Sub DelayTransformationAtLeast(delayLevel As Byte)
  overload: NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast*
- uid: NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel
  commentId: P:NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel
  id: MinOutputDelayLevel
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: MinOutputDelayLevel
  nameWithType: IComputationContext.MinOutputDelayLevel
  fullName: NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MinOutputDelayLevel
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 51
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets the minimum viable output delay level\n"
  example: []
  syntax:
    content: byte MinOutputDelayLevel { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: ReadOnly Property MinOutputDelayLevel As Byte
  overload: NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel
  commentId: P:NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel
  id: MinTransformDelayLevel
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: MinTransformDelayLevel
  nameWithType: IComputationContext.MinTransformDelayLevel
  fullName: NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MinTransformDelayLevel
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 56
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nGets the minimum viable transformation delay level\n"
  example: []
  syntax:
    content: byte MinTransformDelayLevel { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: ReadOnly Property MinTransformDelayLevel As Byte
  overload: NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NMF.Transformations.Core.IComputationContext.ConnectWith(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.IComputationContext.ConnectWith(NMF.Transformations.Core.Computation)
  id: ConnectWith(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.IComputationContext
  langs:
  - csharp
  - vb
  name: ConnectWith(Computation)
  nameWithType: IComputationContext.ConnectWith(Computation)
  fullName: NMF.Transformations.Core.IComputationContext.ConnectWith(NMF.Transformations.Core.Computation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/ComputationContext.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ConnectWith
    path: src/Transformations/Transformations.Core/Core/ComputationContext.cs
    startLine: 62
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nConnects the computation context with the given computation\n"
  example: []
  syntax:
    content: void ConnectWith(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation thst is handled by this computation context
    content.vb: Sub ConnectWith(computation As Computation)
  overload: NMF.Transformations.Core.IComputationContext.ConnectWith*
references:
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations.Core.IComputationContext.TransformationContext*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.TransformationContext
  name: TransformationContext
  nameWithType: IComputationContext.TransformationContext
  fullName: NMF.Transformations.Core.IComputationContext.TransformationContext
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: NMF.Transformations.Core.IComputationContext.MarkRequire*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.MarkRequire
  name: MarkRequire
  nameWithType: IComputationContext.MarkRequire
  fullName: NMF.Transformations.Core.IComputationContext.MarkRequire
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core.IComputationContext.IsDelayed*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.IsDelayed
  name: IsDelayed
  nameWithType: IComputationContext.IsDelayed
  fullName: NMF.Transformations.Core.IComputationContext.IsDelayed
- uid: NMF.Transformations.Core.IComputationContext.InitializeOutput*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.InitializeOutput
  name: InitializeOutput
  nameWithType: IComputationContext.InitializeOutput
  fullName: NMF.Transformations.Core.IComputationContext.InitializeOutput
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast
  name: DelayOutputAtLeast
  nameWithType: IComputationContext.DelayOutputAtLeast
  fullName: NMF.Transformations.Core.IComputationContext.DelayOutputAtLeast
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast
  name: DelayTransformationAtLeast
  nameWithType: IComputationContext.DelayTransformationAtLeast
  fullName: NMF.Transformations.Core.IComputationContext.DelayTransformationAtLeast
- uid: NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel
  name: MinOutputDelayLevel
  nameWithType: IComputationContext.MinOutputDelayLevel
  fullName: NMF.Transformations.Core.IComputationContext.MinOutputDelayLevel
- uid: NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel
  name: MinTransformDelayLevel
  nameWithType: IComputationContext.MinTransformDelayLevel
  fullName: NMF.Transformations.Core.IComputationContext.MinTransformDelayLevel
- uid: NMF.Transformations.Core.IComputationContext.ConnectWith*
  commentId: Overload:NMF.Transformations.Core.IComputationContext.ConnectWith
  name: ConnectWith
  nameWithType: IComputationContext.ConnectWith
  fullName: NMF.Transformations.Core.IComputationContext.ConnectWith
