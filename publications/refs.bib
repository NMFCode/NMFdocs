@mastersthesis{hinkel2013a,
  abstract = {{In recent years, model-driven software development (MDSD) has gained popularity among both industry and academia. MDSD aims to generate traditional software artifacts from models. This generation process is realized in multiple steps. Thus, before being transformed to software artifacts, models are transformed into models of other metamodels. Such model transformation is supported by dedicated model transformation languages. In many cases, these are entirely new languages (external domain-specific languages, DSLs) for a more clear and concise representation of abstractions. On the other hand, the tool support is rather poor and the transformation developers hardly know the transformation language. A possible solution for this problem is to extend the programming language typically used by developers (mostly Java or C\#) with the required abstractions. This can be achieved with an internal DSL. Thus, concepts of the host language can easily be reused while still creating the necessary abstractions to ease development of model transformations. Furthermore, the tool support for the host language can be reused for the DSL. In this master thesis, NMF Transformations is presented, a framework and internal DSL for C\#. It equips developers with the ability to specify model transformations in languages like C\# without having to give up abstractions known from model transformation standards. Transformation developers get the full tool support provided for C\#. The applicability of NMF Transformations as well as the impact of NMF Transformations to quality attributes of model transformations is evaluated in three case studies. Two of them come from the Transformation Tool Contests 2013 (TTC). With these case studies, NMF Transformations is compared with other approaches to model transformation. A further case study comes from ABB Corporate Research to demonstrate the advantages of NMF Transformations in an industrial scenario where aspects like testability gain special importance.}},
  author = {Georg Hinkel},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2013a.pdf},
  school = {{Karlsruhe Institute of Technology}},
  title = {{An approach to maintainable model transformations using an internal DSL}},
  year = {2013},
  type = {thesis}
}

@inproceedings{hinkel2013b,
  abstract = {{Software systems are getting more and more complex. Model-driven engineering (MDE) offers ways to handle such increased complexity by lifting development to a higher level of abstraction. A key part in MDE are transformations that transform any given model into another. These transformations are used to generate all kinds of software artifacts from models. However, there is little consensus about the transformation tools. Thus, the Transformation Tool Contest (TTC) 2013 aims to compare different transformation engines. This is achieved through three different cases that have to be tackled. One of these cases is the Petri Net to State Chart case. A solution has to transform a Petri Net to a State Chart and has to derive a hierarchical structure within the State Chart. This paper presents the solution for this case using NMF Transformations as transformation engine. }},
  author = {Georg Hinkel and Thomas Goldschmidt and Lucia Happe},
  title = {An {NMF} solution for the Petri Nets to State Charts case study at the {TTC} 2013},
  booktitle = {Proceedings Sixth Transformation Tool Contest, {TTC} 2013, Budapest, Hungary, 19-20 June, 2013.},
  pages = {95--100},
  year = {2013},
  url = {https://doi.org/10.4204/EPTCS.135.12},
  doi = {10.4204/EPTCS.135.12},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2013b.pdf},
  type = {ttc}
}

@inproceedings{hinkel2013c,
  abstract = {{Software systems are getting more and more complex. Model-driven engineering (MDE) offers ways to handle such increased complexity by lifting development to a higher level of abstraction. A key part in MDE are transformations that transform any given model into another. These transformations are used to generate all kinds of software artifacts from models. However, there is little consensus about the transformation tools. Thus, the Transformation Tool Contest (TTC) 2013 aims to compare different transformation engines. This is achieved through three different cases that have to be tackled. One of these cases is the Flowgraphs case. A solution has to transform a Java code model into a simplified version and has to derive control and data flow. This paper presents the solution for this case using NMF Transformations as transformation engine. }},
  author = {Georg Hinkel and Thomas Goldschmidt and Lucia Happe},
  title = {An {NMF} solution for the Flowgraphs case at the {TTC} 2013},
  booktitle = {Proceedings Sixth Transformation Tool Contest, {TTC} 2013, Budapest, Hungary, 19-20 June, 2013.},
  pages = {37--42},
  year = {2013},
  url = {https://doi.org/10.4204/EPTCS.135.5},
  doi = {10.4204/EPTCS.135.5},
  type={ttc},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2013c.pdf},
}

@inproceedings{hinkel2014,
  abstract = {{To increase the development productivity, possibilities for reuse, maintainability and quality of complex model transformations, modularization techniques are indispensable. Component-Based Software Engineering targets the challenge of modularity and is well-established in languages like Java or C\# with component models like .NET, EJB or OSGi. There are still many challenging barriers to overcome in current model transformation languages to provide comparable support for component-based development of model transformations. Therefore, this paper provides a pragmatic solution based on NMF Transformations, a model transformation language realized as an internal DSL embedded in C\#. An internal DSL can take advantage of the whole expressiveness and tooling build for the well established and known host language. In this work, we use the component model of the .NET platform to represent reusable components of model transformations to support internal and external model transformation composition. The transformation components are hidden behind transformation rule interfaces that can be exchanged dynamically through configuration. Using this approach we illustrate the possibilities to tackle typical issues of integrity and versioning, such as detecting versioning conflicts for model transformations.}},
  author = {Hinkel, Georg and Happe, Lucia},
  booktitle = {{Proceedings of the 1st International Workshop on Model-Driven Engineering for Component-Based Software Systems co-located with ACM/IEEE 17th International Conference on Model Driven Engineering Languages \& Systems (MoDELS 2014)}},
  editors = {Federico Ciccozi and Massimo Tivoli and Jan Carlson},
  pdf = {http://ceur-ws.org/Vol-1281/1.pdf},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  type = {workshop},
  slides = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2014_slides.pdf},
  title = {{Using component frameworks for model transformations by an internal DSL}},
  issn = {1613-0073},
  pages = {6--15},
  pdf = {http://ceur-ws.org/Vol-1281/1.pdf},
  volume = {1281},
  year = {2014},
  month = {10}
}

@inproceedings{hinkel2015a,
  abstract = {{Despite good results, Model-Driven Engineering (MDE) has not been widely adopted in industry. According to studies by Staron and Mohaghegi, the lack of tool support is one of the major reasons for this. Although MDE has existed for more than a decade now, tool support is still insufficient. An approach to overcome this limitation for model transformations, which are a key part of MDE, is the usage of internal languages that reuse tool support for existing host languages. On the other hand, these internal languages typically do not provide key features like change propagation or bidirectional transformation. In this paper, we present an approach to use a single internal model transformation language to create unidirectional and bidirectional model transformations with optional change propagation. In total, we currently provide 18 operation modes based on a single specification. At the same time, the language may reuse tool support for C\#. We validate the applicability of our language using a synthetic example with a transformation from finite state machines to Petri nets where we achieved speedups of up to 48 compared to classical batch transformations.}},
  author = {Hinkel, Georg},
  editor = {Kolovos, Dimitris and Wimmer, Manuel},
  title = {{Change Propagation in an Internal Model Transformation Language}},
  booktitle = {Theory and Practice of Model Transformations: 8th International Conference, ICMT 2015, Held as Part of STAF 2015, L'Aquila, Italy, July 20-21, 2015. Proceedings},
  year = {2015},
  month = {7},
  publisher = {Springer International Publishing},
  address = {Cham},
  pages = {3--17},
  isbn = {978-3-319-21155-8},
  doi = {10.1007/978-3-319-21155-8_1},
  url = {http://dx.doi.org/10.1007/978-3-319-21155-8_1},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2015a.pdf},
  slides = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2015a_slides.pdf},
  type = {conference}
}

@inproceedings{hinkel2015d,
  author = {Hinkel, Georg and Happe, Lucia},
  booktitle = {Proceedings of the 8th Transformation Tool Contest, a part of the Software Technologies: Applications and Foundations (STAF 2015) federation of conferences},
  location = {L'Aquila, Italy},
  month = {7},
  day = {24},
  editor = {Louis Rose and Tassilo Horn and Filip Krikava},
  issn = {1613-0073},
  pages = {142--146},
  pdf = {http://ceur-ws.org/Vol-1524/paper8.pdf},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  title = {{An NMF Solution to the TTC Train Benchmark Case}},
  volume = {1524},
  year = {2015},
  type = {ttc}
}

@inproceedings{hinkel2015e,
  author = {Hinkel, Georg},
  booktitle = {Proceedings of the 8th Transformation Tool Contest, a part of the Software Technologies: Applications and Foundations (STAF 2015) federation of conferences},
  venue = {L'Aquila, Italy},
  month = {7},
  day = {24},
  editor = {Louis Rose and Tassilo Horn and Filip Krikava},
  issn = {1613-0073},
  pages = {95--99},
  pdf = {http://ceur-ws.org/Vol-1524/paper9.pdf},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  title = {{An NMF Solution to the Java Refactoring Case}},
  volume = {1524},
  year = {2015},
  type = {ttc}
}

@inproceedings{hinkel2016b,
  author = {Hinkel, Georg and Goldschmidt, Thomas},
  title = {{Tool Support for Model Transformations: On Solutions using Internal Languages}},
  booktitle = {Modellierung 2016},
  location = {Karlsruhe, Germany},
  day = {2--4},
  month = {3},
  year = {2016},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2016b.pdf},
  slides = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2016b_slides.pdf},
  abstract = {{Model-driven engineering (MDE) has proven to be a useful approach to cope with todays ever growing complexity in the development of software systems, yet it is not widely applied in industry. As suggested by multiple studies, tool support is a major factor for this lack of adoption. Existing tools for MDE, in particular model transformation approaches, are often developed by small teams and cannot keep up with advanced tool support for mainstream languages such as provided by IntelliJ or Visual Studio. In this paper, we propose an approach to leverage existing tool support for model transformation using internal model transformation languages and investigate design decisions and their consequences for inherited tool support. The findings are used for the design of an internal model transformation language on the .NET platform.}},
  type = {conference}
}

@techreport{hinkel2016d,
  author = {Hinkel, Georg},
  title = {{NMF: A Modeling Framework for the .NET Platform}},
  series = {Karlsruhe Reports in Informatics},
  address = {Karlsruhe},
  publisher = {Karlsruhe Institute of Technology, Department of Informatics},
  institution = {Karlsruhe Institute of Technology},
  year = {2016},
  volume = {9},
  tags = {nmf},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2016d.pdf},
  url = {http://nbn-resolving.org/urn:nbn:de:swb:90-537082},
  issn = {2190-4782},
}

@techreport{hinkel2016e,
  author = {Hinkel, Georg},
  title = {{Deep Modeling through Structural Decomposition}},
  series = {Karlsruhe Reports in Informatics},
  address = {Karlsruhe},
  publisher = {Karlsruhe Institute of Technology, Department of Informatics},
  institution = {Karlsruhe Institute of Technology},
  year = {2016},
  volume = {11},
  url = {http://nbn-resolving.org/urn:nbn:de:swb:90-576330},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2016e.pdf},
  issn = {2190-4782},
}

@inproceedings{hinkel2016g,
  abstract = {{This paper presents a solution to the Class Responsibility Assignment (CRA) case at the Transformation Tool Contest (TTC) 2016 using the .NET Modeling Framework (NMF). The goal of this case was to find a class model with high cohesion but low coupling for a given set of attributes and methods with data dependencies and functional dependencies. The degree in which a given class model fulfills these properties is measured through the CRA-Index. We propose a generalpurpose code solution and discuss how this solution can benefit from incrementality. In particular, we show what steps are necessary to create an incremental solution using NMF Expressions and discuss its performance.}},
  author = {Hinkel, Georg},
  booktitle = {{Proceedings of the 9th Transformation Tool Contest, a part of the Software Technologies: Applications and Foundations (STAF 2015) federation of conferences}},
  location = {Vienna, Austria},
  month = {July},
  day = {8},
  editor = {Antonio Garcia-Dominguez and Filip Krikava and Louis Rose},
  issn = {1613-0073},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  title = {{An NMF solution to the Class Responsibility Assignment Case}},
  year = {2016},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2016g.pdf},
  type = {ttc}
}

@inproceedings{hinkel2017d,
  author = {Hinkel, Georg},
  booktitle = {Proceedings of the 10th Transformation Tool Contest, a part of the Software Technologies: Applications and Foundations (STAF 2017) federation of conferences},
  location = {Marburg, Germany},
  month = {July},
  day = {21},
  editor = {Antonio Garcia-Dominguez and Georg Hinkel and Filip Krikava},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  title = {{The TTC 2017 Outage System Case for Incremental Model Views}},
  year = {2017},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2017d.pdf},
  type = {ttc}
}

@inproceedings{hinkel2017e,
  author = {Hinkel, Georg},
  booktitle = {Proceedings of the 10th Transformation Tool Contest, a part of the Software Technologies: Applications and Foundations (STAF 2017) federation of conferences},
  location = {Marburg, Germany},
  month = {July},
  day = {21},
  editor = {Antonio Garcia-Dominguez and Georg Hinkel and Filip Krikava},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  title = {{An NMF solution to the Smart Grid Case at the TTC 2017}},
  year = {2017},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2017e.pdf},
  type = {ttc}
}

@inproceedings{hinkel2017f,
  author = {Georg Hinkel},
  booktitle = {Proceedings of the 10th Transformation Tool Contest, a part of the Software Technologies: Applications and Foundations (STAF 2017) federation of conferences},
  location = {Marburg, Germany},
  month = {July},
  day = {21},
  editor = {Antonio Garcia-Dominguez and Georg Hinkel and Filip Krikava},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  title = {{An NMF solution to the Families to Persons case at the TTC 2017}},
  year = {2017},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2017f.pdf},
  type = {ttc}
}

@inproceedings{hinkel2017g,
  author = {Hinkel, Georg},
  booktitle = {Proceedings of the 10th Transformation Tool Contest, a part of the Software Technologies: Applications and Foundations (STAF 2017) federation of conferences},
  location = {Marburg, Germany},
  month = {July},
  day = {21},
  editor = {Antonio Garcia-Dominguez and Georg Hinkel and Filip Krikava},
  publisher = {CEUR-WS.org},
  series = {CEUR Workshop Proceedings},
  title = {{An NMF solution to the State Elimination Case at the TTC 2017}},
  year = {2017},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2017g.pdf},
  type = {ttc}
}

@inproceedings{hinkel2018b,
  author = {Hinkel, Georg and Busch, Kiana and Heinrich, Robert},
  abstract = {{Todays systems are often represented by abstract domain models to cope with an increased complexity. To both ensure suitable analyses and validity checks, it is desirable to model the system in multiple levels of abstraction simultaneously. Doing so, it is often desirable to model that one association is a refinement of another to avoid duplication of concepts. Existing approaches that support refinements request metamodelers to use new modeling paradigms or have less efficient model representations than commonly-used technologies such as EMF with Ecore. In this paper, we propose a non-invasive extension to support refinements and structural decompositions in Ecore-like meta-metamodels, show how these extension can be supported by code generation and show that the fulfillment of refinements can be guaranteed by the underlying type system.}},
  title = {{Refinements and Structural Decompositions in Generated Code}},
  booktitle = {Proceedings of the 6th International Conference on Model-Driven Engineering and Software Development},
  location = {Funchal, Portugal},
  day = {22--24},
  month = {},
  year = {2018},
  url = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2018b.pdf},
  type = {conference}
}

@inproceedings{hinkel2018c,
  abstract = {{For its promises in terms of increased productivity, Model-driven engineering (MDE) is getting applied increasingly often in both industry and academia. However, most tools currently available are based on the Eclipse Modeling Framework (EMF) and hence based on the Java platform whereas tool support for other platforms is limited. This leads to a language and tool adoption problem for developers of other platforms such as .NET. As a result, few projects on the .NET platform adopt MDE. In this paper, we present the .NET Modeling Framework (NMF), a tool set for model repositories, model-based incrementalization, model transformation, model synchronization and code generation that is now available for a multitude of different operating systems, including Windows, Linux, Android, iOS and Mac. The framework makes intensive use of the C\# language as host language for model transformation and synchronization languages, whereas the model repository serialization is compatible with EMF. This solves the language adoption problem for C\# programmers and creates a bridge to the EMF platform.}},
  author = {Hinkel, Georg},
  editor = {Rensink, Arend and Cuadrado, Jesus Sanchez},
  title = {{NMF: A multi-platform Modeling Framework}},
  booktitle = {Theory and Practice of Model Transformations: 11th International Conference, ICMT 2018, Held as Part of STAF 2018, Toulouse, France, June 25-29, 2018. Proceedings},
  year = {2018},
  publisher = {Springer International Publishing},
  address = {Cham},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2018c.pdf},
  type = {conference}
}

@phdthesis{hinkel2018e,
	author = {Georg Hinkel},
	school = {Karlsruhe Institute of Technology (KIT)},
	title = {{Implicit Incremental Model Analyses and Transformations}},
	year = {2018},
	doi = {10.5445/IR/1000084464},
	pagetotal = {475},
	type = {thesis}
}

@book{hinkel2018f,
	Author = {Georg Hinkel},
	Publisher = {Karlsruhe Scientific Publishing},
	Series = {The Karlsruhe Series on Software Design and Quality},
	Title = {{Implicit Incremental Model Analyses and Transformations}},
	Volume = {26},
	Year = {2018},
	note={to appear}}
	
@article{hinkel2019a,
  author    = {Georg Hinkel and
               Thomas Goldschmidt and
               Erik Burger and
               Ralf H. Reussner},
  title     = {Using internal domain-specific languages to inherit tool support and
               modularity for model transformations},
  journal   = {Software and Systems Modeling},
  volume    = {18},
  number    = {1},
  pages     = {129--155},
  year      = {2019},
  doi       = {10.1007/s10270-017-0578-9},
  url = {http://rdcu.be/oTED},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2017b.pdf},
}

@article{hinkel2019b,
  author    = {Georg Hinkel and
               Erik Burger},
  title     = {Change propagation and bidirectionality in internal transformation
               DSLs},
  journal   = {Software and Systems Modeling},
  volume    = {18},
  number    = {1},
  pages     = {249--278},
  year      = {2019},
  doi       = {10.1007/s10270-017-0617-6},
  url = {http://rdcu.be/u9PT},
  pdf = {http://sdqweb.ipd.kit.edu/publications/pdfs/hinkel2017c.pdf},
}

@inproceedings{hinkel2018ttc_a,
  author    = {Georg Hinkel},
  title     = {The {TTC} 2018 Social Media Case},
  booktitle = {Proceedings of the 11th Transformation Tool Contest, co-located with
               the 2018 Software Technologies: Applications and Foundations, TTC@STAF
               2018, Toulouse, France, June 29, 2018.},
  pages     = {39--43},
  year      = {2018},
  crossref  = {DBLP:conf/staf/2018ttc},
  url       = {http://ceur-ws.org/Vol-2310/paper5.pdf},
  type = {ttc}
}

@inproceedings{hinkel2018ttc_b,
  author    = {Georg Hinkel},
  title     = {An {NMF} Solution to the {TTC} 2018 Social Media Case},
  booktitle = {Proceedings of the 11th Transformation Tool Contest, co-located with
               the 2018 Software Technologies: Applications and Foundations, TTC@STAF
               2018, Toulouse, France, June 29, 2018.},
  pages     = {45--49},
  year      = {2018},
  crossref  = {DBLP:conf/staf/2018ttc},
  url       = {http://ceur-ws.org/Vol-2310/paper6.pdf},
  type = {ttc}
}

@article{hinkel2019c,
  author    = {Georg Hinkel},
  title     = {Using structural decomposition and refinements for deep modeling of
               software architectures},
  journal   = {Software and Systems Modeling},
  volume    = {18},
  number    = {5},
  pages     = {2787--2819},
  year      = {2019},
  url       = {https://doi.org/10.1007/s10270-018-0701-6},
  doi       = {10.1007/s10270-018-0701-6},
}

@article{hinkel2019d,
  author    = {Georg Hinkel and
               Robert Heinrich and
               Ralf H. Reussner},
  title     = {An extensible approach to implicit incremental model analyses},
  journal   = {Software and Systems Modeling},
  volume    = {18},
  number    = {5},
  pages     = {3151--3187},
  year      = {2019},
  url       = {https://doi.org/10.1007/s10270-019-00719-y},
  doi       = {10.1007/s10270-019-00719-y},
}

@article{Anjorin2019,
author="Anjorin, Anthony
and Buchmann, Thomas
and Westfechtel, Bernhard
and Diskin, Zinovy
and Ko, Hsiang-Shang
and Eramo, Romina
and Hinkel, Georg
and Samimi-Dehkordi, Leila
and Z{\"u}ndorf, Albert",
title="Benchmarking bidirectional transformations: theory, implementation, application, and assessment",
journal="Software and Systems Modeling",
year="2019",
month="Sep",
day="12",
abstract="Bidirectional transformations (bx) are relevant for a wide range of application domains. While bx problems may be solved with unidirectional languages and tools, maintaining separate implementations of forward and backward synchronizers with mutually consistent behavior can be difficult, laborious, and error-prone. To address the challenges involved in handling bx problems, dedicated languages and tools for bx have been developed. Due to their heterogeneity, however, the numerous and diverse approaches to bx are difficult to compare, with the consequence that fundamental differences and similarities are not yet well understood. This motivates the need for suitable benchmarks that facilitate the comparison of bx approaches. This paper provides a comprehensive treatment of benchmarking bx, covering theory, implementation, application, and assessment. At the level of theory, we introduce a conceptual framework that defines and classifies architectures of bx tools. At the level of implementation, we describe Benchmarx, an infrastructure for benchmarking bx tools which is based on the conceptual framework. At the level of application, we report on a wide variety of solutions to the well-known Families-to-Persons benchmark, which were developed and compared with the help of Benchmarx. At the level of assessment, we reflect on the usefulness of the Benchmarx approach to benchmarking bx, based on the experiences gained from the Families-to-Persons benchmark.",
issn="1619-1374",
doi="10.1007/s10270-019-00752-x",
url="https://doi.org/10.1007/s10270-019-00752-x"
}


	
