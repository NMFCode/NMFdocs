### YamlMime:ManagedReference
items:
- uid: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation
  commentId: T:NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation
  id: Ecore2MetaTransformation
  parent: NMF.Interop.Ecore.Transformations
  children:
  - NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap
  - NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes
  langs:
  - csharp
  - vb
  name: Ecore2MetaTransformation
  nameWithType: Ecore2MetaTransformation
  fullName: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation
  type: Class
  source:
    remote:
      path: Interop/EcoreInterop/Transformations/Ecore2MetaTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Ecore2MetaTransformation
    path: src/Interop/EcoreInterop/Transformations/Ecore2MetaTransformation.cs
    startLine: 13
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore.Transformations
  syntax:
    content: 'public class Ecore2MetaTransformation : ReflectiveTransformation'
    content.vb: >-
      Public Class Ecore2MetaTransformation
          Inherits ReflectiveTransformation
  inheritance:
  - System.Object
  - NMF.Transformations.Core.Transformation
  - NMF.Transformations.ReflectiveTransformation
  inheritedMembers:
  - NMF.Transformations.ReflectiveTransformation.CreateRules
  - NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  - NMF.Transformations.ReflectiveTransformation.Rule``1
  - NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  - NMF.Transformations.ReflectiveTransformation.RegisterRules
  - NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  - NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  - NMF.Transformations.Core.Transformation.Patterns
  - NMF.Transformations.Core.Transformation.IsInitialized
  - NMF.Transformations.Core.Transformation.IsRulesRegistered
  - NMF.Transformations.Core.Transformation.CreateRulesInternal
  - NMF.Transformations.Core.Transformation.CreateContext
  - NMF.Transformations.Core.Transformation.Initialize
  - NMF.Transformations.Core.Transformation.MaxOutputDelay
  - NMF.Transformations.Core.Transformation.MaxTransformationDelay
  - NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  - NMF.Transformations.Core.Transformation.Rules
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes
  commentId: P:NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes
  id: GeneratePrimitiveTypes
  parent: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation
  langs:
  - csharp
  - vb
  name: GeneratePrimitiveTypes
  nameWithType: Ecore2MetaTransformation.GeneratePrimitiveTypes
  fullName: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Transformations/Ecore2MetaTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GeneratePrimitiveTypes
    path: src/Interop/EcoreInterop/Transformations/Ecore2MetaTransformation.cs
    startLine: 15
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore.Transformations
  syntax:
    content: public static bool GeneratePrimitiveTypes { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property GeneratePrimitiveTypes As Boolean
  overload: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap
  commentId: P:NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap
  id: CustomTypesMap
  parent: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation
  langs:
  - csharp
  - vb
  name: CustomTypesMap
  nameWithType: Ecore2MetaTransformation.CustomTypesMap
  fullName: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Transformations/Ecore2MetaTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CustomTypesMap
    path: src/Interop/EcoreInterop/Transformations/Ecore2MetaTransformation.cs
    startLine: 16
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore.Transformations
  syntax:
    content: public static IDictionary<string, string> CustomTypesMap { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
    content.vb: Public Shared Property CustomTypesMap As IDictionary(Of String, String)
  overload: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Interop.Ecore.Transformations
  commentId: N:NMF.Interop.Ecore.Transformations
  name: NMF.Interop.Ecore.Transformations
  nameWithType: NMF.Interop.Ecore.Transformations
  fullName: NMF.Interop.Ecore.Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  parent: NMF.Transformations.Core
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
- uid: NMF.Transformations.ReflectiveTransformation
  commentId: T:NMF.Transformations.ReflectiveTransformation
  parent: NMF.Transformations
  name: ReflectiveTransformation
  nameWithType: ReflectiveTransformation
  fullName: NMF.Transformations.ReflectiveTransformation
- uid: NMF.Transformations.ReflectiveTransformation.CreateRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: CreateRules()
  nameWithType: ReflectiveTransformation.CreateRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateRules
    name: CreateRules
    nameWithType: ReflectiveTransformation.CreateRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateRules
    name: CreateRules
    nameWithType: ReflectiveTransformation.CreateRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  commentId: M:NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  parent: NMF.Transformations.ReflectiveTransformation
  isExternal: true
  name: GetRuleForRuleType(Type)
  nameWithType: ReflectiveTransformation.GetRuleForRuleType(Type)
  fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
    nameWithType: ReflectiveTransformation.GetRuleForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
    nameWithType: ReflectiveTransformation.GetRuleForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.Rule``1
  commentId: M:NMF.Transformations.ReflectiveTransformation.Rule``1
  parent: NMF.Transformations.ReflectiveTransformation
  name: Rule<TRule>()
  nameWithType: ReflectiveTransformation.Rule<TRule>()
  fullName: NMF.Transformations.ReflectiveTransformation.Rule<TRule>()
  nameWithType.vb: ReflectiveTransformation.Rule(Of TRule)()
  fullName.vb: NMF.Transformations.ReflectiveTransformation.Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.Rule``1
    name: Rule<TRule>
    nameWithType: ReflectiveTransformation.Rule<TRule>
    fullName: NMF.Transformations.ReflectiveTransformation.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.Rule``1
    name: Rule(Of TRule)
    nameWithType: ReflectiveTransformation.Rule(Of TRule)
    fullName: NMF.Transformations.ReflectiveTransformation.Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  commentId: M:NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  parent: NMF.Transformations.ReflectiveTransformation
  isExternal: true
  name: GetRulesForRuleType(Type)
  nameWithType: ReflectiveTransformation.GetRulesForRuleType(Type)
  fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
    nameWithType: ReflectiveTransformation.GetRulesForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
    nameWithType: ReflectiveTransformation.GetRulesForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.RegisterRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.RegisterRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: RegisterRules()
  nameWithType: ReflectiveTransformation.RegisterRules()
  fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.RegisterRules
    name: RegisterRules
    nameWithType: ReflectiveTransformation.RegisterRules
    fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.RegisterRules
    name: RegisterRules
    nameWithType: ReflectiveTransformation.RegisterRules
    fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: CreateCustomRules()
  nameWithType: ReflectiveTransformation.CreateCustomRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
    name: CreateCustomRules
    nameWithType: ReflectiveTransformation.CreateCustomRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
    name: CreateCustomRules
    nameWithType: ReflectiveTransformation.CreateCustomRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: CreateDefaultRules()
  nameWithType: ReflectiveTransformation.CreateDefaultRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
    name: CreateDefaultRules
    nameWithType: ReflectiveTransformation.CreateDefaultRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
    name: CreateDefaultRules
    nameWithType: ReflectiveTransformation.CreateDefaultRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Patterns
  commentId: P:NMF.Transformations.Core.Transformation.Patterns
  parent: NMF.Transformations.Core.Transformation
  name: Patterns
  nameWithType: Transformation.Patterns
  fullName: NMF.Transformations.Core.Transformation.Patterns
- uid: NMF.Transformations.Core.Transformation.IsInitialized
  commentId: P:NMF.Transformations.Core.Transformation.IsInitialized
  parent: NMF.Transformations.Core.Transformation
  name: IsInitialized
  nameWithType: Transformation.IsInitialized
  fullName: NMF.Transformations.Core.Transformation.IsInitialized
- uid: NMF.Transformations.Core.Transformation.IsRulesRegistered
  commentId: P:NMF.Transformations.Core.Transformation.IsRulesRegistered
  parent: NMF.Transformations.Core.Transformation
  name: IsRulesRegistered
  nameWithType: Transformation.IsRulesRegistered
  fullName: NMF.Transformations.Core.Transformation.IsRulesRegistered
- uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
  commentId: M:NMF.Transformations.Core.Transformation.CreateRulesInternal
  parent: NMF.Transformations.Core.Transformation
  name: CreateRulesInternal()
  nameWithType: Transformation.CreateRulesInternal()
  fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
    nameWithType: Transformation.CreateRulesInternal
    fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
    nameWithType: Transformation.CreateRulesInternal
    fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.CreateContext
  commentId: M:NMF.Transformations.Core.Transformation.CreateContext
  parent: NMF.Transformations.Core.Transformation
  name: CreateContext()
  nameWithType: Transformation.CreateContext()
  fullName: NMF.Transformations.Core.Transformation.CreateContext()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
    nameWithType: Transformation.CreateContext
    fullName: NMF.Transformations.Core.Transformation.CreateContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
    nameWithType: Transformation.CreateContext
    fullName: NMF.Transformations.Core.Transformation.CreateContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Initialize
  commentId: M:NMF.Transformations.Core.Transformation.Initialize
  parent: NMF.Transformations.Core.Transformation
  name: Initialize()
  nameWithType: Transformation.Initialize()
  fullName: NMF.Transformations.Core.Transformation.Initialize()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
    nameWithType: Transformation.Initialize
    fullName: NMF.Transformations.Core.Transformation.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
    nameWithType: Transformation.Initialize
    fullName: NMF.Transformations.Core.Transformation.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.MaxOutputDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxOutputDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxOutputDelay
  nameWithType: Transformation.MaxOutputDelay
  fullName: NMF.Transformations.Core.Transformation.MaxOutputDelay
- uid: NMF.Transformations.Core.Transformation.MaxTransformationDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxTransformationDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxTransformationDelay
  nameWithType: Transformation.MaxTransformationDelay
  fullName: NMF.Transformations.Core.Transformation.MaxTransformationDelay
- uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.Transformation
  name: ComputeInstantiatingTransformationRulePath(Computation)
  nameWithType: Transformation.ComputeInstantiatingTransformationRulePath(Computation)
  fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
    nameWithType: Transformation.ComputeInstantiatingTransformationRulePath
    fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
    nameWithType: Transformation.ComputeInstantiatingTransformationRulePath
    fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type)
  name.vb: GetRulesForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesExact(Type[], Type)
  nameWithType: Transformation.GetRulesExact(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesExact(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type(), System.Type)
  name.vb: GetRulesExact(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
    nameWithType: Transformation.GetRulesExact
    fullName: NMF.Transformations.Core.Transformation.GetRulesExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
    nameWithType: Transformation.GetRulesExact
    fullName: NMF.Transformations.Core.Transformation.GetRulesExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRuleForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRuleForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRuleForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type(), System.Type)
  name.vb: GetRuleForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
    nameWithType: Transformation.GetRuleForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
    nameWithType: Transformation.GetRuleForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForInputTypes(Type[])
  nameWithType: Transformation.GetRulesForInputTypes(Type[])
  fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  nameWithType.vb: Transformation.GetRulesForInputTypes(Type())
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type())
  name.vb: GetRulesForInputTypes(Type())
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
    nameWithType: Transformation.GetRulesForInputTypes
    fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
    nameWithType: Transformation.GetRulesForInputTypes
    fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Rules
  commentId: P:NMF.Transformations.Core.Transformation.Rules
  parent: NMF.Transformations.Core.Transformation
  name: Rules
  nameWithType: Transformation.Rules
  fullName: NMF.Transformations.Core.Transformation.Rules
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type, Boolean)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type, Boolean)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type, System.Boolean)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type, Boolean)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type, System.Boolean)
  name.vb: GetRulesForTypeSignature(Type(), Type, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes*
  commentId: Overload:NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes
  name: GeneratePrimitiveTypes
  nameWithType: Ecore2MetaTransformation.GeneratePrimitiveTypes
  fullName: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.GeneratePrimitiveTypes
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap*
  commentId: Overload:NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap
  name: CustomTypesMap
  nameWithType: Ecore2MetaTransformation.CustomTypesMap
  fullName: NMF.Interop.Ecore.Transformations.Ecore2MetaTransformation.CustomTypesMap
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
