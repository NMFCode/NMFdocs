### YamlMime:ManagedReference
items:
- uid: NMF.Interop.Ecore.EcoreInterop
  commentId: T:NMF.Interop.Ecore.EcoreInterop
  id: EcoreInterop
  parent: NMF.Interop.Ecore
  children:
  - NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile(System.String)
  - NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri(System.Uri)
  - NMF.Interop.Ecore.EcoreInterop.Repository
  - NMF.Interop.Ecore.EcoreInterop.Transform2Meta(NMF.Interop.Ecore.EPackage,System.Action{NMF.Interop.Ecore.IEPackage,NMF.Models.Meta.INamespace})
  - NMF.Interop.Ecore.EcoreInterop.Transform2Meta(System.Collections.Generic.IEnumerable{NMF.Interop.Ecore.EPackage})
  langs:
  - csharp
  - vb
  name: EcoreInterop
  nameWithType: EcoreInterop
  fullName: NMF.Interop.Ecore.EcoreInterop
  type: Class
  source:
    remote:
      path: Interop/EcoreInterop/Facade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EcoreInterop
    path: src/Interop/EcoreInterop/Facade.cs
    startLine: 19
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  syntax:
    content: public static class EcoreInterop
    content.vb: Public Module EcoreInterop
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Interop.Ecore.EcoreInterop.Repository
  commentId: P:NMF.Interop.Ecore.EcoreInterop.Repository
  id: Repository
  parent: NMF.Interop.Ecore.EcoreInterop
  langs:
  - csharp
  - vb
  name: Repository
  nameWithType: EcoreInterop.Repository
  fullName: NMF.Interop.Ecore.EcoreInterop.Repository
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Facade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Repository
    path: src/Interop/EcoreInterop/Facade.cs
    startLine: 40
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  syntax:
    content: public static IModelRepository Repository { get; }
    parameters: []
    return:
      type: NMF.Models.Repository.IModelRepository
    content.vb: Public Shared ReadOnly Property Repository As IModelRepository
  overload: NMF.Interop.Ecore.EcoreInterop.Repository*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile(System.String)
  commentId: M:NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile(System.String)
  id: LoadPackageFromFile(System.String)
  parent: NMF.Interop.Ecore.EcoreInterop
  langs:
  - csharp
  - vb
  name: LoadPackageFromFile(String)
  nameWithType: EcoreInterop.LoadPackageFromFile(String)
  fullName: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile(System.String)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Facade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LoadPackageFromFile
    path: src/Interop/EcoreInterop/Facade.cs
    startLine: 48
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  syntax:
    content: public static EPackage LoadPackageFromFile(string path)
    parameters:
    - id: path
      type: System.String
    return:
      type: NMF.Interop.Ecore.EPackage
    content.vb: Public Shared Function LoadPackageFromFile(path As String) As EPackage
  overload: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri(System.Uri)
  commentId: M:NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri(System.Uri)
  id: LoadPackageFromUri(System.Uri)
  parent: NMF.Interop.Ecore.EcoreInterop
  langs:
  - csharp
  - vb
  name: LoadPackageFromUri(Uri)
  nameWithType: EcoreInterop.LoadPackageFromUri(Uri)
  fullName: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri(System.Uri)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Facade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LoadPackageFromUri
    path: src/Interop/EcoreInterop/Facade.cs
    startLine: 54
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  syntax:
    content: public static EPackage LoadPackageFromUri(Uri uri)
    parameters:
    - id: uri
      type: System.Uri
    return:
      type: NMF.Interop.Ecore.EPackage
    content.vb: Public Shared Function LoadPackageFromUri(uri As Uri) As EPackage
  overload: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Interop.Ecore.EcoreInterop.Transform2Meta(NMF.Interop.Ecore.EPackage,System.Action{NMF.Interop.Ecore.IEPackage,NMF.Models.Meta.INamespace})
  commentId: M:NMF.Interop.Ecore.EcoreInterop.Transform2Meta(NMF.Interop.Ecore.EPackage,System.Action{NMF.Interop.Ecore.IEPackage,NMF.Models.Meta.INamespace})
  id: Transform2Meta(NMF.Interop.Ecore.EPackage,System.Action{NMF.Interop.Ecore.IEPackage,NMF.Models.Meta.INamespace})
  parent: NMF.Interop.Ecore.EcoreInterop
  langs:
  - csharp
  - vb
  name: Transform2Meta(EPackage, Action<IEPackage, INamespace>)
  nameWithType: EcoreInterop.Transform2Meta(EPackage, Action<IEPackage, INamespace>)
  fullName: NMF.Interop.Ecore.EcoreInterop.Transform2Meta(NMF.Interop.Ecore.EPackage, System.Action<NMF.Interop.Ecore.IEPackage, NMF.Models.Meta.INamespace>)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Facade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform2Meta
    path: src/Interop/EcoreInterop/Facade.cs
    startLine: 64
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  syntax:
    content: public static INamespace Transform2Meta(EPackage package, Action<IEPackage, INamespace> additionalPackageRegistry = null)
    parameters:
    - id: package
      type: NMF.Interop.Ecore.EPackage
    - id: additionalPackageRegistry
      type: System.Action{NMF.Interop.Ecore.IEPackage,NMF.Models.Meta.INamespace}
    return:
      type: NMF.Models.Meta.INamespace
    content.vb: Public Shared Function Transform2Meta(package As EPackage, additionalPackageRegistry As Action(Of IEPackage, INamespace) = Nothing) As INamespace
  overload: NMF.Interop.Ecore.EcoreInterop.Transform2Meta*
  nameWithType.vb: EcoreInterop.Transform2Meta(EPackage, Action(Of IEPackage, INamespace))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Interop.Ecore.EcoreInterop.Transform2Meta(NMF.Interop.Ecore.EPackage, System.Action(Of NMF.Interop.Ecore.IEPackage, NMF.Models.Meta.INamespace))
  name.vb: Transform2Meta(EPackage, Action(Of IEPackage, INamespace))
- uid: NMF.Interop.Ecore.EcoreInterop.Transform2Meta(System.Collections.Generic.IEnumerable{NMF.Interop.Ecore.EPackage})
  commentId: M:NMF.Interop.Ecore.EcoreInterop.Transform2Meta(System.Collections.Generic.IEnumerable{NMF.Interop.Ecore.EPackage})
  id: Transform2Meta(System.Collections.Generic.IEnumerable{NMF.Interop.Ecore.EPackage})
  parent: NMF.Interop.Ecore.EcoreInterop
  langs:
  - csharp
  - vb
  name: Transform2Meta(IEnumerable<EPackage>)
  nameWithType: EcoreInterop.Transform2Meta(IEnumerable<EPackage>)
  fullName: NMF.Interop.Ecore.EcoreInterop.Transform2Meta(System.Collections.Generic.IEnumerable<NMF.Interop.Ecore.EPackage>)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Facade.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform2Meta
    path: src/Interop/EcoreInterop/Facade.cs
    startLine: 89
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  syntax:
    content: public static IEnumerable<INamespace> Transform2Meta(IEnumerable<EPackage> packages)
    parameters:
    - id: packages
      type: System.Collections.Generic.IEnumerable{NMF.Interop.Ecore.EPackage}
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Models.Meta.INamespace}
    content.vb: Public Shared Function Transform2Meta(packages As IEnumerable(Of EPackage)) As IEnumerable(Of INamespace)
  overload: NMF.Interop.Ecore.EcoreInterop.Transform2Meta*
  nameWithType.vb: EcoreInterop.Transform2Meta(IEnumerable(Of EPackage))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Interop.Ecore.EcoreInterop.Transform2Meta(System.Collections.Generic.IEnumerable(Of NMF.Interop.Ecore.EPackage))
  name.vb: Transform2Meta(IEnumerable(Of EPackage))
references:
- uid: NMF.Interop.Ecore
  commentId: N:NMF.Interop.Ecore
  name: NMF.Interop.Ecore
  nameWithType: NMF.Interop.Ecore
  fullName: NMF.Interop.Ecore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Interop.Ecore.EcoreInterop.Repository*
  commentId: Overload:NMF.Interop.Ecore.EcoreInterop.Repository
  name: Repository
  nameWithType: EcoreInterop.Repository
  fullName: NMF.Interop.Ecore.EcoreInterop.Repository
- uid: NMF.Models.Repository.IModelRepository
  commentId: T:NMF.Models.Repository.IModelRepository
  parent: NMF.Models.Repository
  name: IModelRepository
  nameWithType: IModelRepository
  fullName: NMF.Models.Repository.IModelRepository
- uid: NMF.Models.Repository
  commentId: N:NMF.Models.Repository
  name: NMF.Models.Repository
  nameWithType: NMF.Models.Repository
  fullName: NMF.Models.Repository
- uid: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile*
  commentId: Overload:NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile
  name: LoadPackageFromFile
  nameWithType: EcoreInterop.LoadPackageFromFile
  fullName: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromFile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Interop.Ecore.EPackage
  commentId: T:NMF.Interop.Ecore.EPackage
  parent: NMF.Interop.Ecore
  name: EPackage
  nameWithType: EPackage
  fullName: NMF.Interop.Ecore.EPackage
- uid: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri*
  commentId: Overload:NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri
  name: LoadPackageFromUri
  nameWithType: EcoreInterop.LoadPackageFromUri
  fullName: NMF.Interop.Ecore.EcoreInterop.LoadPackageFromUri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: NMF.Interop.Ecore.EcoreInterop.Transform2Meta*
  commentId: Overload:NMF.Interop.Ecore.EcoreInterop.Transform2Meta
  name: Transform2Meta
  nameWithType: EcoreInterop.Transform2Meta
  fullName: NMF.Interop.Ecore.EcoreInterop.Transform2Meta
- uid: System.Action{NMF.Interop.Ecore.IEPackage,NMF.Models.Meta.INamespace}
  commentId: T:System.Action{NMF.Interop.Ecore.IEPackage,NMF.Models.Meta.INamespace}
  parent: System
  definition: System.Action`2
  name: Action<IEPackage, INamespace>
  nameWithType: Action<IEPackage, INamespace>
  fullName: System.Action<NMF.Interop.Ecore.IEPackage, NMF.Models.Meta.INamespace>
  nameWithType.vb: Action(Of IEPackage, INamespace)
  fullName.vb: System.Action(Of NMF.Interop.Ecore.IEPackage, NMF.Models.Meta.INamespace)
  name.vb: Action(Of IEPackage, INamespace)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Interop.Ecore.IEPackage
    name: IEPackage
    nameWithType: IEPackage
    fullName: NMF.Interop.Ecore.IEPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.INamespace
    name: INamespace
    nameWithType: INamespace
    fullName: NMF.Models.Meta.INamespace
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Interop.Ecore.IEPackage
    name: IEPackage
    nameWithType: IEPackage
    fullName: NMF.Interop.Ecore.IEPackage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Models.Meta.INamespace
    name: INamespace
    nameWithType: INamespace
    fullName: NMF.Models.Meta.INamespace
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Meta.INamespace
  commentId: T:NMF.Models.Meta.INamespace
  parent: NMF.Models.Meta
  name: INamespace
  nameWithType: INamespace
  fullName: NMF.Models.Meta.INamespace
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: System.Collections.Generic.IEnumerable{NMF.Interop.Ecore.EPackage}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Interop.Ecore.EPackage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EPackage>
  nameWithType: IEnumerable<EPackage>
  fullName: System.Collections.Generic.IEnumerable<NMF.Interop.Ecore.EPackage>
  nameWithType.vb: IEnumerable(Of EPackage)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Interop.Ecore.EPackage)
  name.vb: IEnumerable(Of EPackage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Interop.Ecore.EPackage
    name: EPackage
    nameWithType: EPackage
    fullName: NMF.Interop.Ecore.EPackage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Interop.Ecore.EPackage
    name: EPackage
    nameWithType: EPackage
    fullName: NMF.Interop.Ecore.EPackage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{NMF.Models.Meta.INamespace}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Models.Meta.INamespace}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INamespace>
  nameWithType: IEnumerable<INamespace>
  fullName: System.Collections.Generic.IEnumerable<NMF.Models.Meta.INamespace>
  nameWithType.vb: IEnumerable(Of INamespace)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.INamespace)
  name.vb: IEnumerable(Of INamespace)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Models.Meta.INamespace
    name: INamespace
    nameWithType: INamespace
    fullName: NMF.Models.Meta.INamespace
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Models.Meta.INamespace
    name: INamespace
    nameWithType: INamespace
    fullName: NMF.Models.Meta.INamespace
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
