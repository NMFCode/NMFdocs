### YamlMime:ManagedReference
items:
- uid: NMF.Interop.Ecore.EEnumLiteral
  commentId: T:NMF.Interop.Ecore.EEnumLiteral
  id: EEnumLiteral
  parent: NMF.Interop.Ecore
  children:
  - NMF.Interop.Ecore.EEnumLiteral.ClassInstance
  - NMF.Interop.Ecore.EEnumLiteral.EEnum
  - NMF.Interop.Ecore.EEnumLiteral.EEnumChanged
  - NMF.Interop.Ecore.EEnumLiteral.EEnumChanging
  - NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue(System.String,System.Int32)
  - NMF.Interop.Ecore.EEnumLiteral.GetClass
  - NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute(System.String)
  - NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference(System.String)
  - NMF.Interop.Ecore.EEnumLiteral.Instance
  - NMF.Interop.Ecore.EEnumLiteral.InstanceChanged
  - NMF.Interop.Ecore.EEnumLiteral.InstanceChanging
  - NMF.Interop.Ecore.EEnumLiteral.Literal
  - NMF.Interop.Ecore.EEnumLiteral.LiteralChanged
  - NMF.Interop.Ecore.EEnumLiteral.LiteralChanging
  - NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  - NMF.Interop.Ecore.EEnumLiteral.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  - NMF.Interop.Ecore.EEnumLiteral.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.EEnumLiteral.ReferencedElements
  - NMF.Interop.Ecore.EEnumLiteral.SetFeature(System.String,System.Object)
  - NMF.Interop.Ecore.EEnumLiteral.Value
  - NMF.Interop.Ecore.EEnumLiteral.ValueChanged
  - NMF.Interop.Ecore.EEnumLiteral.ValueChanging
  langs:
  - csharp
  - vb
  name: EEnumLiteral
  nameWithType: EEnumLiteral
  fullName: NMF.Interop.Ecore.EEnumLiteral
  type: Class
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EEnumLiteral
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 36
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nThe default implementation of the EEnumLiteral class\n"
  example: []
  syntax:
    content: >-
      [XmlNamespace("http://www.eclipse.org/emf/2002/Ecore")]

      [XmlNamespacePrefix("ecore")]

      [ModelRepresentationClass("http://www.eclipse.org/emf/2002/Ecore#//EEnumLiteral/")]

      public class EEnumLiteral : ENamedElement, IEEnumLiteral, IENamedElement, IEModelElement, IModelElement, INotifyPropertyChanged, INotifyPropertyChanging
    content.vb: >-
      <XmlNamespace("http://www.eclipse.org/emf/2002/Ecore")>

      <XmlNamespacePrefix("ecore")>

      <ModelRepresentationClass("http://www.eclipse.org/emf/2002/Ecore#//EEnumLiteral/")>

      Public Class EEnumLiteral Inherits ENamedElement Implements IEEnumLiteral, IENamedElement, IEModelElement, IModelElement, INotifyPropertyChanged, INotifyPropertyChanging
  inheritance:
  - System.Object
  - NMF.Models.ModelElement
  - NMF.Interop.Ecore.EModelElement
  - NMF.Interop.Ecore.ENamedElement
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral
  - NMF.Interop.Ecore.IENamedElement
  - NMF.Interop.Ecore.IEModelElement
  - NMF.Models.IModelElement
  - System.ComponentModel.INotifyPropertyChanged
  - System.ComponentModel.INotifyPropertyChanging
  inheritedMembers:
  - NMF.Interop.Ecore.ENamedElement.Name
  - NMF.Interop.Ecore.ENamedElement.IsIdentified
  - NMF.Interop.Ecore.ENamedElement.NameChanging
  - NMF.Interop.Ecore.ENamedElement.NameChanged
  - NMF.Interop.Ecore.ENamedElement.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.ENamedElement.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Interop.Ecore.ENamedElement.ToIdentifierString
  - NMF.Interop.Ecore.EModelElement.EAnnotations
  - NMF.Interop.Ecore.EModelElement.Children
  - NMF.Interop.Ecore.EModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  - NMF.Interop.Ecore.EModelElement.GetModelElementForReference(System.String,System.Int32)
  - NMF.Interop.Ecore.EModelElement.GetCollectionForFeature(System.String)
  - NMF.Models.ModelElement.Model
  - NMF.Models.ModelElement.Freeze
  - NMF.Models.ModelElement.Lock
  - NMF.Models.ModelElement.IsFrozen
  - NMF.Models.ModelElement.IsLocked
  - NMF.Models.ModelElement.Unlock
  - NMF.Models.ModelElement.TryUnlock
  - NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  - NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  - NMF.Models.ModelElement.Parent
  - NMF.Models.ModelElement.RelativeUri
  - NMF.Models.ModelElement.AbsoluteUri
  - NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
  - NMF.Models.ModelElement.PropagateNewId(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Models.ModelElement.EnforceModels
  - NMF.Models.ModelElement.PreferIdentifiers
  - NMF.Models.ModelElement.ToString
  - NMF.Models.ModelElement.KeyChanged
  - NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  - NMF.Models.ModelElement.Resolve(System.Uri)
  - NMF.Models.ModelElement.Resolve(System.String)
  - NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  - NMF.Models.ModelElement.GetCompositionName(System.Object)
  - NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
  - NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  - NMF.Models.ModelElement.Extensions
  - NMF.Models.ModelElement.GetExtension``1
  - NMF.Models.ModelElement.OnPropertyChanged(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.OnPropertyChanging(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.Delete
  - NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  - NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  - NMF.Models.ModelElement.PropertyChanged
  - NMF.Models.ModelElement.PropertyChanging
  - NMF.Models.ModelElement.Deleted
  - NMF.Models.ModelElement.Deleting
  - NMF.Models.ModelElement.UriChanged
  - NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  - NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  - NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  - NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  - NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  - NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  - NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  - NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  - NMF.Models.ModelElement.BubbledChange
  - NMF.Models.ModelElement.ParentChanged
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: NMF.Serialization.XmlNamespaceAttribute
    ctor: NMF.Serialization.XmlNamespaceAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: http://www.eclipse.org/emf/2002/Ecore
  - type: NMF.Serialization.XmlNamespacePrefixAttribute
    ctor: NMF.Serialization.XmlNamespacePrefixAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ecore
  - type: NMF.Models.ModelRepresentationClassAttribute
    ctor: NMF.Models.ModelRepresentationClassAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: http://www.eclipse.org/emf/2002/Ecore#//EEnumLiteral/
- uid: NMF.Interop.Ecore.EEnumLiteral.Value
  commentId: P:NMF.Interop.Ecore.EEnumLiteral.Value
  id: Value
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: EEnumLiteral.Value
  fullName: NMF.Interop.Ecore.EEnumLiteral.Value
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 63
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nThe value property\n"
  example: []
  syntax:
    content: >-
      [XmlElementName("value")]

      [XmlAttribute(true)]

      public virtual int? Value { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: >-
      <XmlElementName("value")>

      <XmlAttribute(True)>

      Public Overridable Property Value As Integer?
  overload: NMF.Interop.Ecore.EEnumLiteral.Value*
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.Value
  attributes:
  - type: NMF.Serialization.XmlElementNameAttribute
    ctor: NMF.Serialization.XmlElementNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: value
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Interop.Ecore.EEnumLiteral.Instance
  commentId: P:NMF.Interop.Ecore.EEnumLiteral.Instance
  id: Instance
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: EEnumLiteral.Instance
  fullName: NMF.Interop.Ecore.EEnumLiteral.Instance
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Instance
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 89
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nThe instance property\n"
  example: []
  syntax:
    content: >-
      [XmlElementName("instance")]

      [XmlAttribute(true)]

      public virtual object Instance { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: >-
      <XmlElementName("instance")>

      <XmlAttribute(True)>

      Public Overridable Property Instance As Object
  overload: NMF.Interop.Ecore.EEnumLiteral.Instance*
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.Instance
  attributes:
  - type: NMF.Serialization.XmlElementNameAttribute
    ctor: NMF.Serialization.XmlElementNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: instance
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Interop.Ecore.EEnumLiteral.Literal
  commentId: P:NMF.Interop.Ecore.EEnumLiteral.Literal
  id: Literal
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: Literal
  nameWithType: EEnumLiteral.Literal
  fullName: NMF.Interop.Ecore.EEnumLiteral.Literal
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Literal
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 115
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nThe literal property\n"
  example: []
  syntax:
    content: >-
      [XmlElementName("literal")]

      [XmlAttribute(true)]

      public virtual string Literal { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <XmlElementName("literal")>

      <XmlAttribute(True)>

      Public Overridable Property Literal As String
  overload: NMF.Interop.Ecore.EEnumLiteral.Literal*
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.Literal
  attributes:
  - type: NMF.Serialization.XmlElementNameAttribute
    ctor: NMF.Serialization.XmlElementNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: literal
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
- uid: NMF.Interop.Ecore.EEnumLiteral.EEnum
  commentId: P:NMF.Interop.Ecore.EEnumLiteral.EEnum
  id: EEnum
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: EEnum
  nameWithType: EEnumLiteral.EEnum
  fullName: NMF.Interop.Ecore.EEnumLiteral.EEnum
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EEnum
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 141
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nThe eEnum property\n"
  example: []
  syntax:
    content: >-
      [XmlElementName("eEnum")]

      [XmlAttribute(true)]

      [XmlOpposite("eLiterals")]

      public virtual IEEnum EEnum { get; set; }
    parameters: []
    return:
      type: NMF.Interop.Ecore.IEEnum
    content.vb: >-
      <XmlElementName("eEnum")>

      <XmlAttribute(True)>

      <XmlOpposite("eLiterals")>

      Public Overridable Property EEnum As IEEnum
  overload: NMF.Interop.Ecore.EEnumLiteral.EEnum*
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.EEnum
  attributes:
  - type: NMF.Serialization.XmlElementNameAttribute
    ctor: NMF.Serialization.XmlElementNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: eEnum
  - type: NMF.Serialization.XmlAttributeAttribute
    ctor: NMF.Serialization.XmlAttributeAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
  - type: NMF.Serialization.XmlOppositeAttribute
    ctor: NMF.Serialization.XmlOppositeAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: eLiterals
- uid: NMF.Interop.Ecore.EEnumLiteral.ReferencedElements
  commentId: P:NMF.Interop.Ecore.EEnumLiteral.ReferencedElements
  id: ReferencedElements
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: ReferencedElements
  nameWithType: EEnumLiteral.ReferencedElements
  fullName: NMF.Interop.Ecore.EEnumLiteral.ReferencedElements
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReferencedElements
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 160
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets the referenced model elements of this model element\n"
  example: []
  syntax:
    content: public override IEnumerableExpression<IModelElement> ReferencedElements { get; }
    parameters: []
    return:
      type: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
    content.vb: Public Overrides ReadOnly Property ReferencedElements As IEnumerableExpression(Of IModelElement)
  overridden: NMF.Interop.Ecore.EModelElement.ReferencedElements
  overload: NMF.Interop.Ecore.EEnumLiteral.ReferencedElements*
  implements:
  - NMF.Models.IModelElement.ReferencedElements
- uid: NMF.Interop.Ecore.EEnumLiteral.ClassInstance
  commentId: P:NMF.Interop.Ecore.EEnumLiteral.ClassInstance
  id: ClassInstance
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: ClassInstance
  nameWithType: EEnumLiteral.ClassInstance
  fullName: NMF.Interop.Ecore.EEnumLiteral.ClassInstance
  type: Property
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ClassInstance
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 171
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets the Class model for this type\n"
  example: []
  syntax:
    content: public static IClass ClassInstance { get; }
    parameters: []
    return:
      type: NMF.Models.Meta.IClass
    content.vb: Public Shared ReadOnly Property ClassInstance As IClass
  overload: NMF.Interop.Ecore.EEnumLiteral.ClassInstance*
- uid: NMF.Interop.Ecore.EEnumLiteral.ValueChanging
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.ValueChanging
  id: ValueChanging
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: ValueChanging
  nameWithType: EEnumLiteral.ValueChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.ValueChanging
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 186
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired before the Value property changes its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> ValueChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event ValueChanging As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.ValueChanging
- uid: NMF.Interop.Ecore.EEnumLiteral.ValueChanged
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.ValueChanged
  id: ValueChanged
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: ValueChanged
  nameWithType: EEnumLiteral.ValueChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.ValueChanged
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 191
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired when the Value property changed its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> ValueChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event ValueChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.ValueChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.InstanceChanging
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.InstanceChanging
  id: InstanceChanging
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: InstanceChanging
  nameWithType: EEnumLiteral.InstanceChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.InstanceChanging
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InstanceChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 196
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired before the Instance property changes its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> InstanceChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event InstanceChanging As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.InstanceChanging
- uid: NMF.Interop.Ecore.EEnumLiteral.InstanceChanged
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.InstanceChanged
  id: InstanceChanged
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: InstanceChanged
  nameWithType: EEnumLiteral.InstanceChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.InstanceChanged
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InstanceChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 201
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired when the Instance property changed its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> InstanceChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event InstanceChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.InstanceChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.LiteralChanging
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.LiteralChanging
  id: LiteralChanging
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: LiteralChanging
  nameWithType: EEnumLiteral.LiteralChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.LiteralChanging
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LiteralChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 206
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired before the Literal property changes its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> LiteralChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event LiteralChanging As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.LiteralChanging
- uid: NMF.Interop.Ecore.EEnumLiteral.LiteralChanged
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.LiteralChanged
  id: LiteralChanged
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: LiteralChanged
  nameWithType: EEnumLiteral.LiteralChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.LiteralChanged
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LiteralChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 211
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired when the Literal property changed its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> LiteralChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event LiteralChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.LiteralChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.EEnumChanging
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.EEnumChanging
  id: EEnumChanging
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: EEnumChanging
  nameWithType: EEnumLiteral.EEnumChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.EEnumChanging
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EEnumChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 216
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired before the EEnum property changes its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> EEnumChanging
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event EEnumChanging As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.EEnumChanging
- uid: NMF.Interop.Ecore.EEnumLiteral.EEnumChanged
  commentId: E:NMF.Interop.Ecore.EEnumLiteral.EEnumChanged
  id: EEnumChanged
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: EEnumChanged
  nameWithType: EEnumLiteral.EEnumChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.EEnumChanged
  type: Event
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EEnumChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 221
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets fired when the EEnum property changed its value\n"
  example: []
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> EEnumChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event EEnumChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Interop.Ecore.IEEnumLiteral.EEnumChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)
  id: OnValueChanging(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnValueChanging(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnValueChanging(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnValueChanging(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnValueChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 227
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the ValueChanging event\n"
  example: []
  syntax:
    content: protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnValueChanging(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnValueChanging*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  id: OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnValueChanged(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnValueChanged(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnValueChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 240
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the ValueChanged event\n"
  example: []
  syntax:
    content: protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnValueChanged(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnValueChanged*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging(NMF.Expressions.ValueChangedEventArgs)
  id: OnInstanceChanging(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnInstanceChanging(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnInstanceChanging(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnInstanceChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 253
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the InstanceChanging event\n"
  example: []
  syntax:
    content: protected virtual void OnInstanceChanging(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnInstanceChanging(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged(NMF.Expressions.ValueChangedEventArgs)
  id: OnInstanceChanged(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnInstanceChanged(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnInstanceChanged(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnInstanceChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 266
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the InstanceChanged event\n"
  example: []
  syntax:
    content: protected virtual void OnInstanceChanged(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnInstanceChanged(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging(NMF.Expressions.ValueChangedEventArgs)
  id: OnLiteralChanging(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnLiteralChanging(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnLiteralChanging(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnLiteralChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 279
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the LiteralChanging event\n"
  example: []
  syntax:
    content: protected virtual void OnLiteralChanging(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnLiteralChanging(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged(NMF.Expressions.ValueChangedEventArgs)
  id: OnLiteralChanged(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnLiteralChanged(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnLiteralChanged(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnLiteralChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 292
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the LiteralChanged event\n"
  example: []
  syntax:
    content: protected virtual void OnLiteralChanged(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnLiteralChanged(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging(NMF.Expressions.ValueChangedEventArgs)
  id: OnEEnumChanging(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnEEnumChanging(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnEEnumChanging(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnEEnumChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 305
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the EEnumChanging event\n"
  example: []
  syntax:
    content: protected virtual void OnEEnumChanging(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnEEnumChanging(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  id: OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnParentChanging(IModelElement, IModelElement)
  nameWithType: EEnumLiteral.OnParentChanging(IModelElement, IModelElement)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnParentChanging(NMF.Models.IModelElement, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnParentChanging
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 319
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets called when the parent model element of the current model element is about to change\n"
  example: []
  syntax:
    content: protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
    parameters:
    - id: newParent
      type: NMF.Models.IModelElement
      description: The new parent model element
    - id: oldParent
      type: NMF.Models.IModelElement
      description: The old parent model element
    content.vb: Protected Overrides Sub OnParentChanging(newParent As IModelElement, oldParent As IModelElement)
  overridden: NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnParentChanging*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged(NMF.Expressions.ValueChangedEventArgs)
  id: OnEEnumChanged(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnEEnumChanged(ValueChangedEventArgs)
  nameWithType: EEnumLiteral.OnEEnumChanged(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnEEnumChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 332
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nRaises the EEnumChanged event\n"
  example: []
  syntax:
    content: protected virtual void OnEEnumChanged(ValueChangedEventArgs eventArgs)
    parameters:
    - id: eventArgs
      type: NMF.Expressions.ValueChangedEventArgs
      description: The event data
    content.vb: Protected Overridable Sub OnEEnumChanged(eventArgs As ValueChangedEventArgs)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged*
- uid: NMF.Interop.Ecore.EEnumLiteral.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  id: OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: OnParentChanged(IModelElement, IModelElement)
  nameWithType: EEnumLiteral.OnParentChanged(IModelElement, IModelElement)
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnParentChanged(NMF.Models.IModelElement, NMF.Models.IModelElement)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnParentChanged
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 346
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets called when the parent model element of the current model element changes\n"
  example: []
  syntax:
    content: protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
    parameters:
    - id: newParent
      type: NMF.Models.IModelElement
      description: The new parent model element
    - id: oldParent
      type: NMF.Models.IModelElement
      description: The old parent model element
    content.vb: Protected Overrides Sub OnParentChanged(newParent As IModelElement, oldParent As IModelElement)
  overridden: NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  overload: NMF.Interop.Ecore.EEnumLiteral.OnParentChanged*
- uid: NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue(System.String,System.Int32)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue(System.String,System.Int32)
  id: GetAttributeValue(System.String,System.Int32)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: GetAttributeValue(string, int)
  nameWithType: EEnumLiteral.GetAttributeValue(string, int)
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue(string, int)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetAttributeValue
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 370
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nResolves the given attribute name\n"
  example: []
  syntax:
    content: protected override object GetAttributeValue(string attribute, int index)
    parameters:
    - id: attribute
      type: System.String
      description: The requested attribute name
    - id: index
      type: System.Int32
      description: The index of this attribute
    return:
      type: System.Object
      description: The attribute value or null if it could not be found
    content.vb: Protected Overrides Function GetAttributeValue(attribute As String, index As Integer) As Object
  overridden: NMF.Interop.Ecore.ENamedElement.GetAttributeValue(System.String,System.Int32)
  overload: NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue*
  nameWithType.vb: EEnumLiteral.GetAttributeValue(String, Integer)
  fullName.vb: NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue(String, Integer)
  name.vb: GetAttributeValue(String, Integer)
- uid: NMF.Interop.Ecore.EEnumLiteral.SetFeature(System.String,System.Object)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.SetFeature(System.String,System.Object)
  id: SetFeature(System.String,System.Object)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: SetFeature(string, object)
  nameWithType: EEnumLiteral.SetFeature(string, object)
  fullName: NMF.Interop.Ecore.EEnumLiteral.SetFeature(string, object)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetFeature
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 392
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nSets a value to the given feature\n"
  example: []
  syntax:
    content: protected override void SetFeature(string feature, object value)
    parameters:
    - id: feature
      type: System.String
      description: The requested feature
    - id: value
      type: System.Object
      description: The value that should be set to that feature
    content.vb: Protected Overrides Sub SetFeature(feature As String, value As Object)
  overridden: NMF.Interop.Ecore.ENamedElement.SetFeature(System.String,System.Object)
  overload: NMF.Interop.Ecore.EEnumLiteral.SetFeature*
  nameWithType.vb: EEnumLiteral.SetFeature(String, Object)
  fullName.vb: NMF.Interop.Ecore.EEnumLiteral.SetFeature(String, Object)
  name.vb: SetFeature(String, Object)
- uid: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute(System.String)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute(System.String)
  id: GetExpressionForAttribute(System.String)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: GetExpressionForAttribute(string)
  nameWithType: EEnumLiteral.GetExpressionForAttribute(string)
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute(string)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetExpressionForAttribute
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 422
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets the property expression for the given attribute\n"
  example: []
  syntax:
    content: protected override INotifyExpression<object> GetExpressionForAttribute(string attribute)
    parameters:
    - id: attribute
      type: System.String
      description: The requested attribute in upper case
    return:
      type: NMF.Expressions.INotifyExpression{System.Object}
      description: An incremental property expression
    content.vb: Protected Overrides Function GetExpressionForAttribute(attribute As String) As INotifyExpression(Of Object)
  overridden: NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
  overload: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute*
  nameWithType.vb: EEnumLiteral.GetExpressionForAttribute(String)
  fullName.vb: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute(String)
  name.vb: GetExpressionForAttribute(String)
- uid: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference(System.String)
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference(System.String)
  id: GetExpressionForReference(System.String)
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: GetExpressionForReference(string)
  nameWithType: EEnumLiteral.GetExpressionForReference(string)
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference(string)
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetExpressionForReference
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 436
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets the property expression for the given reference\n"
  example: []
  syntax:
    content: protected override INotifyExpression<IModelElement> GetExpressionForReference(string reference)
    parameters:
    - id: reference
      type: System.String
      description: The requested reference in upper case
    return:
      type: NMF.Expressions.INotifyExpression{NMF.Models.IModelElement}
      description: An incremental property expression
    content.vb: Protected Overrides Function GetExpressionForReference(reference As String) As INotifyExpression(Of IModelElement)
  overridden: NMF.Models.ModelElement.GetExpressionForReference(System.String)
  overload: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference*
  nameWithType.vb: EEnumLiteral.GetExpressionForReference(String)
  fullName.vb: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference(String)
  name.vb: GetExpressionForReference(String)
- uid: NMF.Interop.Ecore.EEnumLiteral.GetClass
  commentId: M:NMF.Interop.Ecore.EEnumLiteral.GetClass
  id: GetClass
  parent: NMF.Interop.Ecore.EEnumLiteral
  langs:
  - csharp
  - vb
  name: GetClass()
  nameWithType: EEnumLiteral.GetClass()
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetClass()
  type: Method
  source:
    remote:
      path: Interop/EcoreInterop/Model/EEnumLiteral.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetClass
    path: src/Interop/EcoreInterop/Model/EEnumLiteral.cs
    startLine: 448
  assemblies:
  - NMF.EcoreInterop
  namespace: NMF.Interop.Ecore
  summary: "\nGets the Class for this model element\n"
  example: []
  syntax:
    content: public override IClass GetClass()
    return:
      type: NMF.Models.Meta.IClass
    content.vb: Public Overrides Function GetClass() As IClass
  overridden: NMF.Interop.Ecore.ENamedElement.GetClass
  overload: NMF.Interop.Ecore.EEnumLiteral.GetClass*
  implements:
  - NMF.Models.IModelElement.GetClass
references:
- uid: NMF.Interop.Ecore
  commentId: N:NMF.Interop.Ecore
  name: NMF.Interop.Ecore
  nameWithType: NMF.Interop.Ecore
  fullName: NMF.Interop.Ecore
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Interop
    name: Interop
  - name: .
  - uid: NMF.Interop.Ecore
    name: Ecore
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Interop
    name: Interop
  - name: .
  - uid: NMF.Interop.Ecore
    name: Ecore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Models.ModelElement
  commentId: T:NMF.Models.ModelElement
  parent: NMF.Models
  name: ModelElement
  nameWithType: ModelElement
  fullName: NMF.Models.ModelElement
- uid: NMF.Interop.Ecore.EModelElement
  commentId: T:NMF.Interop.Ecore.EModelElement
  parent: NMF.Interop.Ecore
  name: EModelElement
  nameWithType: EModelElement
  fullName: NMF.Interop.Ecore.EModelElement
- uid: NMF.Interop.Ecore.ENamedElement
  commentId: T:NMF.Interop.Ecore.ENamedElement
  parent: NMF.Interop.Ecore
  name: ENamedElement
  nameWithType: ENamedElement
  fullName: NMF.Interop.Ecore.ENamedElement
- uid: NMF.Interop.Ecore.IEEnumLiteral
  commentId: T:NMF.Interop.Ecore.IEEnumLiteral
  parent: NMF.Interop.Ecore
  name: IEEnumLiteral
  nameWithType: IEEnumLiteral
  fullName: NMF.Interop.Ecore.IEEnumLiteral
- uid: NMF.Interop.Ecore.IENamedElement
  commentId: T:NMF.Interop.Ecore.IENamedElement
  parent: NMF.Interop.Ecore
  name: IENamedElement
  nameWithType: IENamedElement
  fullName: NMF.Interop.Ecore.IENamedElement
- uid: NMF.Interop.Ecore.IEModelElement
  commentId: T:NMF.Interop.Ecore.IEModelElement
  parent: NMF.Interop.Ecore
  name: IEModelElement
  nameWithType: IEModelElement
  fullName: NMF.Interop.Ecore.IEModelElement
- uid: NMF.Models.IModelElement
  commentId: T:NMF.Models.IModelElement
  parent: NMF.Models
  name: IModelElement
  nameWithType: IModelElement
  fullName: NMF.Models.IModelElement
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.ComponentModel.INotifyPropertyChanging
  commentId: T:System.ComponentModel.INotifyPropertyChanging
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanging
  nameWithType: INotifyPropertyChanging
  fullName: System.ComponentModel.INotifyPropertyChanging
- uid: NMF.Interop.Ecore.ENamedElement.Name
  commentId: P:NMF.Interop.Ecore.ENamedElement.Name
  parent: NMF.Interop.Ecore.ENamedElement
  name: Name
  nameWithType: ENamedElement.Name
  fullName: NMF.Interop.Ecore.ENamedElement.Name
- uid: NMF.Interop.Ecore.ENamedElement.IsIdentified
  commentId: P:NMF.Interop.Ecore.ENamedElement.IsIdentified
  parent: NMF.Interop.Ecore.ENamedElement
  name: IsIdentified
  nameWithType: ENamedElement.IsIdentified
  fullName: NMF.Interop.Ecore.ENamedElement.IsIdentified
- uid: NMF.Interop.Ecore.ENamedElement.NameChanging
  commentId: E:NMF.Interop.Ecore.ENamedElement.NameChanging
  parent: NMF.Interop.Ecore.ENamedElement
  name: NameChanging
  nameWithType: ENamedElement.NameChanging
  fullName: NMF.Interop.Ecore.ENamedElement.NameChanging
- uid: NMF.Interop.Ecore.ENamedElement.NameChanged
  commentId: E:NMF.Interop.Ecore.ENamedElement.NameChanged
  parent: NMF.Interop.Ecore.ENamedElement
  name: NameChanged
  nameWithType: ENamedElement.NameChanged
  fullName: NMF.Interop.Ecore.ENamedElement.NameChanged
- uid: NMF.Interop.Ecore.ENamedElement.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.ENamedElement.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.ENamedElement
  name: OnNameChanging(ValueChangedEventArgs)
  nameWithType: ENamedElement.OnNameChanging(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.ENamedElement.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)
  spec.csharp:
  - uid: NMF.Interop.Ecore.ENamedElement.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)
    name: OnNameChanging
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.ENamedElement.OnNameChanging(NMF.Expressions.ValueChangedEventArgs)
    name: OnNameChanging
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: NMF.Interop.Ecore.ENamedElement.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Interop.Ecore.ENamedElement.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Interop.Ecore.ENamedElement
  name: OnNameChanged(ValueChangedEventArgs)
  nameWithType: ENamedElement.OnNameChanged(ValueChangedEventArgs)
  fullName: NMF.Interop.Ecore.ENamedElement.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)
  spec.csharp:
  - uid: NMF.Interop.Ecore.ENamedElement.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)
    name: OnNameChanged
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.ENamedElement.OnNameChanged(NMF.Expressions.ValueChangedEventArgs)
    name: OnNameChanged
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: NMF.Interop.Ecore.ENamedElement.ToIdentifierString
  commentId: M:NMF.Interop.Ecore.ENamedElement.ToIdentifierString
  parent: NMF.Interop.Ecore.ENamedElement
  name: ToIdentifierString()
  nameWithType: ENamedElement.ToIdentifierString()
  fullName: NMF.Interop.Ecore.ENamedElement.ToIdentifierString()
  spec.csharp:
  - uid: NMF.Interop.Ecore.ENamedElement.ToIdentifierString
    name: ToIdentifierString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.ENamedElement.ToIdentifierString
    name: ToIdentifierString
  - name: (
  - name: )
- uid: NMF.Interop.Ecore.EModelElement.EAnnotations
  commentId: P:NMF.Interop.Ecore.EModelElement.EAnnotations
  parent: NMF.Interop.Ecore.EModelElement
  name: EAnnotations
  nameWithType: EModelElement.EAnnotations
  fullName: NMF.Interop.Ecore.EModelElement.EAnnotations
- uid: NMF.Interop.Ecore.EModelElement.Children
  commentId: P:NMF.Interop.Ecore.EModelElement.Children
  parent: NMF.Interop.Ecore.EModelElement
  name: Children
  nameWithType: EModelElement.Children
  fullName: NMF.Interop.Ecore.EModelElement.Children
- uid: NMF.Interop.Ecore.EModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  commentId: M:NMF.Interop.Ecore.EModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  parent: NMF.Interop.Ecore.EModelElement
  name: GetRelativePathForNonIdentifiedChild(IModelElement)
  nameWithType: EModelElement.GetRelativePathForNonIdentifiedChild(IModelElement)
  fullName: NMF.Interop.Ecore.EModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Interop.Ecore.EModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
    name: GetRelativePathForNonIdentifiedChild
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.EModelElement.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)
    name: GetRelativePathForNonIdentifiedChild
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Interop.Ecore.EModelElement.GetModelElementForReference(System.String,System.Int32)
  commentId: M:NMF.Interop.Ecore.EModelElement.GetModelElementForReference(System.String,System.Int32)
  parent: NMF.Interop.Ecore.EModelElement
  isExternal: true
  name: GetModelElementForReference(string, int)
  nameWithType: EModelElement.GetModelElementForReference(string, int)
  fullName: NMF.Interop.Ecore.EModelElement.GetModelElementForReference(string, int)
  nameWithType.vb: EModelElement.GetModelElementForReference(String, Integer)
  fullName.vb: NMF.Interop.Ecore.EModelElement.GetModelElementForReference(String, Integer)
  name.vb: GetModelElementForReference(String, Integer)
  spec.csharp:
  - uid: NMF.Interop.Ecore.EModelElement.GetModelElementForReference(System.String,System.Int32)
    name: GetModelElementForReference
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.EModelElement.GetModelElementForReference(System.String,System.Int32)
    name: GetModelElementForReference
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Interop.Ecore.EModelElement.GetCollectionForFeature(System.String)
  commentId: M:NMF.Interop.Ecore.EModelElement.GetCollectionForFeature(System.String)
  parent: NMF.Interop.Ecore.EModelElement
  isExternal: true
  name: GetCollectionForFeature(string)
  nameWithType: EModelElement.GetCollectionForFeature(string)
  fullName: NMF.Interop.Ecore.EModelElement.GetCollectionForFeature(string)
  nameWithType.vb: EModelElement.GetCollectionForFeature(String)
  fullName.vb: NMF.Interop.Ecore.EModelElement.GetCollectionForFeature(String)
  name.vb: GetCollectionForFeature(String)
  spec.csharp:
  - uid: NMF.Interop.Ecore.EModelElement.GetCollectionForFeature(System.String)
    name: GetCollectionForFeature
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.EModelElement.GetCollectionForFeature(System.String)
    name: GetCollectionForFeature
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.Model
  commentId: P:NMF.Models.ModelElement.Model
  parent: NMF.Models.ModelElement
  name: Model
  nameWithType: ModelElement.Model
  fullName: NMF.Models.ModelElement.Model
- uid: NMF.Models.ModelElement.Freeze
  commentId: M:NMF.Models.ModelElement.Freeze
  parent: NMF.Models.ModelElement
  name: Freeze()
  nameWithType: ModelElement.Freeze()
  fullName: NMF.Models.ModelElement.Freeze()
  spec.csharp:
  - uid: NMF.Models.ModelElement.Freeze
    name: Freeze
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.Freeze
    name: Freeze
  - name: (
  - name: )
- uid: NMF.Models.ModelElement.Lock
  commentId: M:NMF.Models.ModelElement.Lock
  parent: NMF.Models.ModelElement
  name: Lock()
  nameWithType: ModelElement.Lock()
  fullName: NMF.Models.ModelElement.Lock()
  spec.csharp:
  - uid: NMF.Models.ModelElement.Lock
    name: Lock
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.Lock
    name: Lock
  - name: (
  - name: )
- uid: NMF.Models.ModelElement.IsFrozen
  commentId: P:NMF.Models.ModelElement.IsFrozen
  parent: NMF.Models.ModelElement
  name: IsFrozen
  nameWithType: ModelElement.IsFrozen
  fullName: NMF.Models.ModelElement.IsFrozen
- uid: NMF.Models.ModelElement.IsLocked
  commentId: P:NMF.Models.ModelElement.IsLocked
  parent: NMF.Models.ModelElement
  name: IsLocked
  nameWithType: ModelElement.IsLocked
  fullName: NMF.Models.ModelElement.IsLocked
- uid: NMF.Models.ModelElement.Unlock
  commentId: M:NMF.Models.ModelElement.Unlock
  parent: NMF.Models.ModelElement
  name: Unlock()
  nameWithType: ModelElement.Unlock()
  fullName: NMF.Models.ModelElement.Unlock()
  spec.csharp:
  - uid: NMF.Models.ModelElement.Unlock
    name: Unlock
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.Unlock
    name: Unlock
  - name: (
  - name: )
- uid: NMF.Models.ModelElement.TryUnlock
  commentId: M:NMF.Models.ModelElement.TryUnlock
  parent: NMF.Models.ModelElement
  name: TryUnlock()
  nameWithType: ModelElement.TryUnlock()
  fullName: NMF.Models.ModelElement.TryUnlock()
  spec.csharp:
  - uid: NMF.Models.ModelElement.TryUnlock
    name: TryUnlock
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.TryUnlock
    name: TryUnlock
  - name: (
  - name: )
- uid: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  commentId: M:NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: GetContainerReference(IModelElement, out int)
  nameWithType: ModelElement.GetContainerReference(IModelElement, out int)
  fullName: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement, out int)
  nameWithType.vb: ModelElement.GetContainerReference(IModelElement, Integer)
  fullName.vb: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement, Integer)
  name.vb: GetContainerReference(IModelElement, Integer)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
    name: GetContainerReference
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetContainerReference(NMF.Models.IModelElement,System.Int32@)
    name: GetContainerReference
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  name: PropagateNewModel(Model, Model, IModelElement)
  nameWithType: ModelElement.PropagateNewModel(Model, Model, IModelElement)
  fullName: NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model, NMF.Models.Model, NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
    name: PropagateNewModel
  - name: (
  - uid: NMF.Models.Model
    name: Model
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.PropagateNewModel(NMF.Models.Model,NMF.Models.Model,NMF.Models.IModelElement)
    name: PropagateNewModel
  - name: (
  - uid: NMF.Models.Model
    name: Model
  - name: ','
  - name: " "
  - uid: NMF.Models.Model
    name: Model
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  name: OnChildCreated(IModelElement)
  nameWithType: ModelElement.OnChildCreated(IModelElement)
  fullName: NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
    name: OnChildCreated
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnChildCreated(NMF.Models.IModelElement)
    name: OnChildCreated
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.ModelElement.Parent
  commentId: P:NMF.Models.ModelElement.Parent
  parent: NMF.Models.ModelElement
  name: Parent
  nameWithType: ModelElement.Parent
  fullName: NMF.Models.ModelElement.Parent
- uid: NMF.Models.ModelElement.RelativeUri
  commentId: P:NMF.Models.ModelElement.RelativeUri
  parent: NMF.Models.ModelElement
  name: RelativeUri
  nameWithType: ModelElement.RelativeUri
  fullName: NMF.Models.ModelElement.RelativeUri
- uid: NMF.Models.ModelElement.AbsoluteUri
  commentId: P:NMF.Models.ModelElement.AbsoluteUri
  parent: NMF.Models.ModelElement
  name: AbsoluteUri
  nameWithType: ModelElement.AbsoluteUri
  fullName: NMF.Models.ModelElement.AbsoluteUri
- uid: NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: CreateUriWithFragment(string, bool, IModelElement)
  nameWithType: ModelElement.CreateUriWithFragment(string, bool, IModelElement)
  fullName: NMF.Models.ModelElement.CreateUriWithFragment(string, bool, NMF.Models.IModelElement)
  nameWithType.vb: ModelElement.CreateUriWithFragment(String, Boolean, IModelElement)
  fullName.vb: NMF.Models.ModelElement.CreateUriWithFragment(String, Boolean, NMF.Models.IModelElement)
  name.vb: CreateUriWithFragment(String, Boolean, IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
    name: CreateUriWithFragment
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.CreateUriWithFragment(System.String,System.Boolean,NMF.Models.IModelElement)
    name: CreateUriWithFragment
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
  commentId: M:NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: CreateUriFromGlobalIdentifier(string, bool)
  nameWithType: ModelElement.CreateUriFromGlobalIdentifier(string, bool)
  fullName: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(string, bool)
  nameWithType.vb: ModelElement.CreateUriFromGlobalIdentifier(String, Boolean)
  fullName.vb: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(String, Boolean)
  name.vb: CreateUriFromGlobalIdentifier(String, Boolean)
  spec.csharp:
  - uid: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
    name: CreateUriFromGlobalIdentifier
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.CreateUriFromGlobalIdentifier(System.String,System.Boolean)
    name: CreateUriFromGlobalIdentifier
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.PropagateNewId(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Models.ModelElement.PropagateNewId(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Models.ModelElement
  name: PropagateNewId(ValueChangedEventArgs)
  nameWithType: ModelElement.PropagateNewId(ValueChangedEventArgs)
  fullName: NMF.Models.ModelElement.PropagateNewId(NMF.Expressions.ValueChangedEventArgs)
  spec.csharp:
  - uid: NMF.Models.ModelElement.PropagateNewId(NMF.Expressions.ValueChangedEventArgs)
    name: PropagateNewId
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.PropagateNewId(NMF.Expressions.ValueChangedEventArgs)
    name: PropagateNewId
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: NMF.Models.ModelElement.EnforceModels
  commentId: P:NMF.Models.ModelElement.EnforceModels
  parent: NMF.Models.ModelElement
  name: EnforceModels
  nameWithType: ModelElement.EnforceModels
  fullName: NMF.Models.ModelElement.EnforceModels
- uid: NMF.Models.ModelElement.PreferIdentifiers
  commentId: P:NMF.Models.ModelElement.PreferIdentifiers
  parent: NMF.Models.ModelElement
  name: PreferIdentifiers
  nameWithType: ModelElement.PreferIdentifiers
  fullName: NMF.Models.ModelElement.PreferIdentifiers
- uid: NMF.Models.ModelElement.ToString
  commentId: M:NMF.Models.ModelElement.ToString
  parent: NMF.Models.ModelElement
  name: ToString()
  nameWithType: ModelElement.ToString()
  fullName: NMF.Models.ModelElement.ToString()
  spec.csharp:
  - uid: NMF.Models.ModelElement.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Models.ModelElement.KeyChanged
  commentId: E:NMF.Models.ModelElement.KeyChanged
  parent: NMF.Models.ModelElement
  name: KeyChanged
  nameWithType: ModelElement.KeyChanged
  fullName: NMF.Models.ModelElement.KeyChanged
- uid: NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  commentId: M:NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: OnKeyChanged(EventArgs)
  nameWithType: ModelElement.OnKeyChanged(EventArgs)
  fullName: NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
    name: OnKeyChanged
  - name: (
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnKeyChanged(System.EventArgs)
    name: OnKeyChanged
  - name: (
  - uid: System.EventArgs
    name: EventArgs
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.Resolve(System.Uri)
  commentId: M:NMF.Models.ModelElement.Resolve(System.Uri)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: Resolve(Uri)
  nameWithType: ModelElement.Resolve(Uri)
  fullName: NMF.Models.ModelElement.Resolve(System.Uri)
  spec.csharp:
  - uid: NMF.Models.ModelElement.Resolve(System.Uri)
    name: Resolve
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.Resolve(System.Uri)
    name: Resolve
  - name: (
  - uid: System.Uri
    name: Uri
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.Resolve(System.String)
  commentId: M:NMF.Models.ModelElement.Resolve(System.String)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: Resolve(string)
  nameWithType: ModelElement.Resolve(string)
  fullName: NMF.Models.ModelElement.Resolve(string)
  nameWithType.vb: ModelElement.Resolve(String)
  fullName.vb: NMF.Models.ModelElement.Resolve(String)
  name.vb: Resolve(String)
  spec.csharp:
  - uid: NMF.Models.ModelElement.Resolve(System.String)
    name: Resolve
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.Resolve(System.String)
    name: Resolve
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  name: GetRelativePathForChild(IModelElement)
  nameWithType: ModelElement.GetRelativePathForChild(IModelElement)
  fullName: NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
    name: GetRelativePathForChild
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetRelativePathForChild(NMF.Models.IModelElement)
    name: GetRelativePathForChild
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.ModelElement.GetCompositionName(System.Object)
  commentId: M:NMF.Models.ModelElement.GetCompositionName(System.Object)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: GetCompositionName(object)
  nameWithType: ModelElement.GetCompositionName(object)
  fullName: NMF.Models.ModelElement.GetCompositionName(object)
  nameWithType.vb: ModelElement.GetCompositionName(Object)
  fullName.vb: NMF.Models.ModelElement.GetCompositionName(Object)
  name.vb: GetCompositionName(Object)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetCompositionName(System.Object)
    name: GetCompositionName
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetCompositionName(System.Object)
    name: GetCompositionName
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
  commentId: M:NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: GetModelElementForPathSegment(string)
  nameWithType: ModelElement.GetModelElementForPathSegment(string)
  fullName: NMF.Models.ModelElement.GetModelElementForPathSegment(string)
  nameWithType.vb: ModelElement.GetModelElementForPathSegment(String)
  fullName.vb: NMF.Models.ModelElement.GetModelElementForPathSegment(String)
  name.vb: GetModelElementForPathSegment(String)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
    name: GetModelElementForPathSegment
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetModelElementForPathSegment(System.String)
    name: GetModelElementForPathSegment
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  commentId: M:NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
  parent: NMF.Models.ModelElement
  isExternal: true
  name: CallOperation(IOperation, object[])
  nameWithType: ModelElement.CallOperation(IOperation, object[])
  fullName: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation, object[])
  nameWithType.vb: ModelElement.CallOperation(IOperation, Object())
  fullName.vb: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation, Object())
  name.vb: CallOperation(IOperation, Object())
  spec.csharp:
  - uid: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
    name: CallOperation
  - name: (
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.CallOperation(NMF.Models.Meta.IOperation,System.Object[])
    name: CallOperation
  - name: (
  - uid: NMF.Models.Meta.IOperation
    name: IOperation
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
- uid: NMF.Models.ModelElement.Extensions
  commentId: P:NMF.Models.ModelElement.Extensions
  parent: NMF.Models.ModelElement
  name: Extensions
  nameWithType: ModelElement.Extensions
  fullName: NMF.Models.ModelElement.Extensions
- uid: NMF.Models.ModelElement.GetExtension``1
  commentId: M:NMF.Models.ModelElement.GetExtension``1
  parent: NMF.Models.ModelElement
  name: GetExtension<T>()
  nameWithType: ModelElement.GetExtension<T>()
  fullName: NMF.Models.ModelElement.GetExtension<T>()
  nameWithType.vb: ModelElement.GetExtension(Of T)()
  fullName.vb: NMF.Models.ModelElement.GetExtension(Of T)()
  name.vb: GetExtension(Of T)()
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetExtension``1
    name: GetExtension
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetExtension``1
    name: GetExtension
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: NMF.Models.ModelElement.OnPropertyChanged(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnPropertyChanged(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  isExternal: true
  name: OnPropertyChanged(string, ValueChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnPropertyChanged(string, ValueChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnPropertyChanged(string, NMF.Expressions.ValueChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  nameWithType.vb: ModelElement.OnPropertyChanged(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
  fullName.vb: NMF.Models.ModelElement.OnPropertyChanged(String, NMF.Expressions.ValueChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnPropertyChanged(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnPropertyChanged(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnPropertyChanged
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnPropertyChanged(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnPropertyChanged
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: )
  - name: )
- uid: NMF.Models.ModelElement.OnPropertyChanging(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnPropertyChanging(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  isExternal: true
  name: OnPropertyChanging(string, ValueChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnPropertyChanging(string, ValueChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnPropertyChanging(string, NMF.Expressions.ValueChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  nameWithType.vb: ModelElement.OnPropertyChanging(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
  fullName.vb: NMF.Models.ModelElement.OnPropertyChanging(String, NMF.Expressions.ValueChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnPropertyChanging(String, ValueChangedEventArgs, Lazy(Of ITypedElement))
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnPropertyChanging(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnPropertyChanging
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnPropertyChanging(System.String,NMF.Expressions.ValueChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnPropertyChanging
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: )
  - name: )
- uid: NMF.Models.ModelElement.Delete
  commentId: M:NMF.Models.ModelElement.Delete
  parent: NMF.Models.ModelElement
  name: Delete()
  nameWithType: ModelElement.Delete()
  fullName: NMF.Models.ModelElement.Delete()
  spec.csharp:
  - uid: NMF.Models.ModelElement.Delete
    name: Delete
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.Delete
    name: Delete
  - name: (
  - name: )
- uid: NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  commentId: M:NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  parent: NMF.Models.ModelElement
  name: OnDeleting(UriChangedEventArgs)
  nameWithType: ModelElement.OnDeleting(UriChangedEventArgs)
  fullName: NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
    name: OnDeleting
  - name: (
  - uid: NMF.Models.UriChangedEventArgs
    name: UriChangedEventArgs
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnDeleting(NMF.Models.UriChangedEventArgs)
    name: OnDeleting
  - name: (
  - uid: NMF.Models.UriChangedEventArgs
    name: UriChangedEventArgs
  - name: )
- uid: NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  commentId: M:NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  parent: NMF.Models.ModelElement
  name: OnDeleted(UriChangedEventArgs)
  nameWithType: ModelElement.OnDeleted(UriChangedEventArgs)
  fullName: NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
    name: OnDeleted
  - name: (
  - uid: NMF.Models.UriChangedEventArgs
    name: UriChangedEventArgs
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnDeleted(NMF.Models.UriChangedEventArgs)
    name: OnDeleted
  - name: (
  - uid: NMF.Models.UriChangedEventArgs
    name: UriChangedEventArgs
  - name: )
- uid: NMF.Models.ModelElement.PropertyChanged
  commentId: E:NMF.Models.ModelElement.PropertyChanged
  parent: NMF.Models.ModelElement
  name: PropertyChanged
  nameWithType: ModelElement.PropertyChanged
  fullName: NMF.Models.ModelElement.PropertyChanged
- uid: NMF.Models.ModelElement.PropertyChanging
  commentId: E:NMF.Models.ModelElement.PropertyChanging
  parent: NMF.Models.ModelElement
  name: PropertyChanging
  nameWithType: ModelElement.PropertyChanging
  fullName: NMF.Models.ModelElement.PropertyChanging
- uid: NMF.Models.ModelElement.Deleted
  commentId: E:NMF.Models.ModelElement.Deleted
  parent: NMF.Models.ModelElement
  name: Deleted
  nameWithType: ModelElement.Deleted
  fullName: NMF.Models.ModelElement.Deleted
- uid: NMF.Models.ModelElement.Deleting
  commentId: E:NMF.Models.ModelElement.Deleting
  parent: NMF.Models.ModelElement
  name: Deleting
  nameWithType: ModelElement.Deleting
  fullName: NMF.Models.ModelElement.Deleting
- uid: NMF.Models.ModelElement.UriChanged
  commentId: E:NMF.Models.ModelElement.UriChanged
  parent: NMF.Models.ModelElement
  name: UriChanged
  nameWithType: ModelElement.UriChanged
  fullName: NMF.Models.ModelElement.UriChanged
- uid: NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  commentId: M:NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: GetReferencedElement(IReference, int)
  nameWithType: ModelElement.GetReferencedElement(IReference, int)
  fullName: NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference, int)
  nameWithType.vb: ModelElement.GetReferencedElement(IReference, Integer)
  fullName.vb: NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference, Integer)
  name.vb: GetReferencedElement(IReference, Integer)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
    name: GetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetReferencedElement(NMF.Models.Meta.IReference,System.Int32)
    name: GetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  name: SetReferencedElement(IReference, IModelElement)
  nameWithType: ModelElement.SetReferencedElement(IReference, IModelElement)
  fullName: NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference, NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
    name: SetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.SetReferencedElement(NMF.Models.Meta.IReference,NMF.Models.IModelElement)
    name: SetReferencedElement
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  commentId: M:NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  parent: NMF.Models.ModelElement
  name: GetReferencedElements(IReference)
  nameWithType: ModelElement.GetReferencedElements(IReference)
  fullName: NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
    name: GetReferencedElements
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetReferencedElements(NMF.Models.Meta.IReference)
    name: GetReferencedElements
  - name: (
  - uid: NMF.Models.Meta.IReference
    name: IReference
  - name: )
- uid: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  commentId: M:NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: GetAttributeValue(IAttribute, int)
  nameWithType: ModelElement.GetAttributeValue(IAttribute, int)
  fullName: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute, int)
  nameWithType.vb: ModelElement.GetAttributeValue(IAttribute, Integer)
  fullName.vb: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute, Integer)
  name.vb: GetAttributeValue(IAttribute, Integer)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
    name: GetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetAttributeValue(NMF.Models.Meta.IAttribute,System.Int32)
    name: GetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  commentId: M:NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: SetAttributeValue(IAttribute, object)
  nameWithType: ModelElement.SetAttributeValue(IAttribute, object)
  fullName: NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute, object)
  nameWithType.vb: ModelElement.SetAttributeValue(IAttribute, Object)
  fullName.vb: NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute, Object)
  name.vb: SetAttributeValue(IAttribute, Object)
  spec.csharp:
  - uid: NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
    name: SetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.SetAttributeValue(NMF.Models.Meta.IAttribute,System.Object)
    name: SetAttributeValue
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  commentId: M:NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  parent: NMF.Models.ModelElement
  name: GetAttributeValues(IAttribute)
  nameWithType: ModelElement.GetAttributeValues(IAttribute)
  fullName: NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
    name: GetAttributeValues
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetAttributeValues(NMF.Models.Meta.IAttribute)
    name: GetAttributeValues
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
- uid: NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  isExternal: true
  name: OnCollectionChanged(string, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnCollectionChanged(string, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnCollectionChanged(string, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  nameWithType.vb: ModelElement.OnCollectionChanged(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
  fullName.vb: NMF.Models.ModelElement.OnCollectionChanged(String, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnCollectionChanged(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnCollectionChanged
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnCollectionChanged(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnCollectionChanged
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: )
  - name: )
- uid: NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  commentId: M:NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
  parent: NMF.Models.ModelElement
  isExternal: true
  name: OnCollectionChanging(string, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  nameWithType: ModelElement.OnCollectionChanging(string, NotifyCollectionChangedEventArgs, Lazy<ITypedElement>)
  fullName: NMF.Models.ModelElement.OnCollectionChanging(string, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy<NMF.Models.Meta.ITypedElement>)
  nameWithType.vb: ModelElement.OnCollectionChanging(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
  fullName.vb: NMF.Models.ModelElement.OnCollectionChanging(String, System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Lazy(Of NMF.Models.Meta.ITypedElement))
  name.vb: OnCollectionChanging(String, NotifyCollectionChangedEventArgs, Lazy(Of ITypedElement))
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnCollectionChanging
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnCollectionChanging(System.String,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Lazy{NMF.Models.Meta.ITypedElement})
    name: OnCollectionChanging
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Lazy`1
    name: Lazy
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.ITypedElement
    name: ITypedElement
  - name: )
  - name: )
- uid: NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  commentId: M:NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  parent: NMF.Models.ModelElement
  name: OnBubbledChange(BubbledChangeEventArgs)
  nameWithType: ModelElement.OnBubbledChange(BubbledChangeEventArgs)
  fullName: NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
    name: OnBubbledChange
  - name: (
  - uid: NMF.Models.BubbledChangeEventArgs
    name: BubbledChangeEventArgs
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnBubbledChange(NMF.Models.BubbledChangeEventArgs)
    name: OnBubbledChange
  - name: (
  - uid: NMF.Models.BubbledChangeEventArgs
    name: BubbledChangeEventArgs
  - name: )
- uid: NMF.Models.ModelElement.BubbledChange
  commentId: E:NMF.Models.ModelElement.BubbledChange
  parent: NMF.Models.ModelElement
  name: BubbledChange
  nameWithType: ModelElement.BubbledChange
  fullName: NMF.Models.ModelElement.BubbledChange
- uid: NMF.Models.ModelElement.ParentChanged
  commentId: E:NMF.Models.ModelElement.ParentChanged
  parent: NMF.Models.ModelElement
  name: ParentChanged
  nameWithType: ModelElement.ParentChanged
  fullName: NMF.Models.ModelElement.ParentChanged
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
- uid: NMF.Interop.Ecore.EEnumLiteral.Value*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.Value
  name: Value
  nameWithType: EEnumLiteral.Value
  fullName: NMF.Interop.Ecore.EEnumLiteral.Value
- uid: NMF.Interop.Ecore.IEEnumLiteral.Value
  commentId: P:NMF.Interop.Ecore.IEEnumLiteral.Value
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: Value
  nameWithType: IEEnumLiteral.Value
  fullName: NMF.Interop.Ecore.IEEnumLiteral.Value
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.Instance*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.Instance
  name: Instance
  nameWithType: EEnumLiteral.Instance
  fullName: NMF.Interop.Ecore.EEnumLiteral.Instance
- uid: NMF.Interop.Ecore.IEEnumLiteral.Instance
  commentId: P:NMF.Interop.Ecore.IEEnumLiteral.Instance
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: Instance
  nameWithType: IEEnumLiteral.Instance
  fullName: NMF.Interop.Ecore.IEEnumLiteral.Instance
- uid: NMF.Interop.Ecore.EEnumLiteral.Literal*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.Literal
  name: Literal
  nameWithType: EEnumLiteral.Literal
  fullName: NMF.Interop.Ecore.EEnumLiteral.Literal
- uid: NMF.Interop.Ecore.IEEnumLiteral.Literal
  commentId: P:NMF.Interop.Ecore.IEEnumLiteral.Literal
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: Literal
  nameWithType: IEEnumLiteral.Literal
  fullName: NMF.Interop.Ecore.IEEnumLiteral.Literal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.Interop.Ecore.EEnumLiteral.EEnum*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.EEnum
  name: EEnum
  nameWithType: EEnumLiteral.EEnum
  fullName: NMF.Interop.Ecore.EEnumLiteral.EEnum
- uid: NMF.Interop.Ecore.IEEnumLiteral.EEnum
  commentId: P:NMF.Interop.Ecore.IEEnumLiteral.EEnum
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: EEnum
  nameWithType: IEEnumLiteral.EEnum
  fullName: NMF.Interop.Ecore.IEEnumLiteral.EEnum
- uid: NMF.Interop.Ecore.IEEnum
  commentId: T:NMF.Interop.Ecore.IEEnum
  parent: NMF.Interop.Ecore
  name: IEEnum
  nameWithType: IEEnum
  fullName: NMF.Interop.Ecore.IEEnum
- uid: NMF.Interop.Ecore.EModelElement.ReferencedElements
  commentId: P:NMF.Interop.Ecore.EModelElement.ReferencedElements
  parent: NMF.Interop.Ecore.EModelElement
  name: ReferencedElements
  nameWithType: EModelElement.ReferencedElements
  fullName: NMF.Interop.Ecore.EModelElement.ReferencedElements
- uid: NMF.Interop.Ecore.EEnumLiteral.ReferencedElements*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.ReferencedElements
  name: ReferencedElements
  nameWithType: EEnumLiteral.ReferencedElements
  fullName: NMF.Interop.Ecore.EEnumLiteral.ReferencedElements
- uid: NMF.Models.IModelElement.ReferencedElements
  commentId: P:NMF.Models.IModelElement.ReferencedElements
  parent: NMF.Models.IModelElement
  name: ReferencedElements
  nameWithType: IModelElement.ReferencedElements
  fullName: NMF.Models.IModelElement.ReferencedElements
- uid: NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  commentId: T:NMF.Expressions.IEnumerableExpression{NMF.Models.IModelElement}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<IModelElement>
  nameWithType: IEnumerableExpression<IModelElement>
  fullName: NMF.Expressions.IEnumerableExpression<NMF.Models.IModelElement>
  nameWithType.vb: IEnumerableExpression(Of IModelElement)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of NMF.Models.IModelElement)
  name.vb: IEnumerableExpression(Of IModelElement)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Interop.Ecore.EEnumLiteral.ClassInstance*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.ClassInstance
  name: ClassInstance
  nameWithType: EEnumLiteral.ClassInstance
  fullName: NMF.Interop.Ecore.EEnumLiteral.ClassInstance
- uid: NMF.Models.Meta.IClass
  commentId: T:NMF.Models.Meta.IClass
  parent: NMF.Models.Meta
  name: IClass
  nameWithType: IClass
  fullName: NMF.Models.Meta.IClass
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
- uid: NMF.Interop.Ecore.IEEnumLiteral.ValueChanging
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.ValueChanging
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: ValueChanging
  nameWithType: IEEnumLiteral.ValueChanging
  fullName: NMF.Interop.Ecore.IEEnumLiteral.ValueChanging
- uid: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  commentId: T:System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<NMF.Expressions.ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Expressions.ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: <
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: <
  - name: TEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TEventArgs
  - name: )
- uid: NMF.Interop.Ecore.IEEnumLiteral.ValueChanged
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.ValueChanged
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: ValueChanged
  nameWithType: IEEnumLiteral.ValueChanged
  fullName: NMF.Interop.Ecore.IEEnumLiteral.ValueChanged
- uid: NMF.Interop.Ecore.IEEnumLiteral.InstanceChanging
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.InstanceChanging
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: InstanceChanging
  nameWithType: IEEnumLiteral.InstanceChanging
  fullName: NMF.Interop.Ecore.IEEnumLiteral.InstanceChanging
- uid: NMF.Interop.Ecore.IEEnumLiteral.InstanceChanged
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.InstanceChanged
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: InstanceChanged
  nameWithType: IEEnumLiteral.InstanceChanged
  fullName: NMF.Interop.Ecore.IEEnumLiteral.InstanceChanged
- uid: NMF.Interop.Ecore.IEEnumLiteral.LiteralChanging
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.LiteralChanging
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: LiteralChanging
  nameWithType: IEEnumLiteral.LiteralChanging
  fullName: NMF.Interop.Ecore.IEEnumLiteral.LiteralChanging
- uid: NMF.Interop.Ecore.IEEnumLiteral.LiteralChanged
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.LiteralChanged
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: LiteralChanged
  nameWithType: IEEnumLiteral.LiteralChanged
  fullName: NMF.Interop.Ecore.IEEnumLiteral.LiteralChanged
- uid: NMF.Interop.Ecore.IEEnumLiteral.EEnumChanging
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.EEnumChanging
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: EEnumChanging
  nameWithType: IEEnumLiteral.EEnumChanging
  fullName: NMF.Interop.Ecore.IEEnumLiteral.EEnumChanging
- uid: NMF.Interop.Ecore.IEEnumLiteral.EEnumChanged
  commentId: E:NMF.Interop.Ecore.IEEnumLiteral.EEnumChanged
  parent: NMF.Interop.Ecore.IEEnumLiteral
  name: EEnumChanged
  nameWithType: IEEnumLiteral.EEnumChanged
  fullName: NMF.Interop.Ecore.IEEnumLiteral.EEnumChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.OnValueChanging*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnValueChanging
  name: OnValueChanging
  nameWithType: EEnumLiteral.OnValueChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnValueChanging
- uid: NMF.Expressions.ValueChangedEventArgs
  commentId: T:NMF.Expressions.ValueChangedEventArgs
  parent: NMF.Expressions
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: NMF.Expressions.ValueChangedEventArgs
- uid: NMF.Interop.Ecore.EEnumLiteral.OnValueChanged*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnValueChanged
  name: OnValueChanged
  nameWithType: EEnumLiteral.OnValueChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnValueChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging
  name: OnInstanceChanging
  nameWithType: EEnumLiteral.OnInstanceChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanging
- uid: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged
  name: OnInstanceChanged
  nameWithType: EEnumLiteral.OnInstanceChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnInstanceChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging
  name: OnLiteralChanging
  nameWithType: EEnumLiteral.OnLiteralChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanging
- uid: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged
  name: OnLiteralChanged
  nameWithType: EEnumLiteral.OnLiteralChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnLiteralChanged
- uid: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging
  name: OnEEnumChanging
  nameWithType: EEnumLiteral.OnEEnumChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanging
- uid: NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  name: OnParentChanging(IModelElement, IModelElement)
  nameWithType: ModelElement.OnParentChanging(IModelElement, IModelElement)
  fullName: NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement, NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
    name: OnParentChanging
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnParentChanging(NMF.Models.IModelElement,NMF.Models.IModelElement)
    name: OnParentChanging
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.OnParentChanging*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnParentChanging
  name: OnParentChanging
  nameWithType: EEnumLiteral.OnParentChanging
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnParentChanging
- uid: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged
  name: OnEEnumChanged
  nameWithType: EEnumLiteral.OnEEnumChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnEEnumChanged
- uid: NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  commentId: M:NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
  parent: NMF.Models.ModelElement
  name: OnParentChanged(IModelElement, IModelElement)
  nameWithType: ModelElement.OnParentChanged(IModelElement, IModelElement)
  fullName: NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement, NMF.Models.IModelElement)
  spec.csharp:
  - uid: NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
    name: OnParentChanged
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.OnParentChanged(NMF.Models.IModelElement,NMF.Models.IModelElement)
    name: OnParentChanged
  - name: (
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: ','
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.OnParentChanged*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.OnParentChanged
  name: OnParentChanged
  nameWithType: EEnumLiteral.OnParentChanged
  fullName: NMF.Interop.Ecore.EEnumLiteral.OnParentChanged
- uid: NMF.Interop.Ecore.ENamedElement.GetAttributeValue(System.String,System.Int32)
  commentId: M:NMF.Interop.Ecore.ENamedElement.GetAttributeValue(System.String,System.Int32)
  parent: NMF.Interop.Ecore.ENamedElement
  isExternal: true
  name: GetAttributeValue(string, int)
  nameWithType: ENamedElement.GetAttributeValue(string, int)
  fullName: NMF.Interop.Ecore.ENamedElement.GetAttributeValue(string, int)
  nameWithType.vb: ENamedElement.GetAttributeValue(String, Integer)
  fullName.vb: NMF.Interop.Ecore.ENamedElement.GetAttributeValue(String, Integer)
  name.vb: GetAttributeValue(String, Integer)
  spec.csharp:
  - uid: NMF.Interop.Ecore.ENamedElement.GetAttributeValue(System.String,System.Int32)
    name: GetAttributeValue
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.ENamedElement.GetAttributeValue(System.String,System.Int32)
    name: GetAttributeValue
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue
  name: GetAttributeValue
  nameWithType: EEnumLiteral.GetAttributeValue
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetAttributeValue
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Interop.Ecore.ENamedElement.SetFeature(System.String,System.Object)
  commentId: M:NMF.Interop.Ecore.ENamedElement.SetFeature(System.String,System.Object)
  parent: NMF.Interop.Ecore.ENamedElement
  isExternal: true
  name: SetFeature(string, object)
  nameWithType: ENamedElement.SetFeature(string, object)
  fullName: NMF.Interop.Ecore.ENamedElement.SetFeature(string, object)
  nameWithType.vb: ENamedElement.SetFeature(String, Object)
  fullName.vb: NMF.Interop.Ecore.ENamedElement.SetFeature(String, Object)
  name.vb: SetFeature(String, Object)
  spec.csharp:
  - uid: NMF.Interop.Ecore.ENamedElement.SetFeature(System.String,System.Object)
    name: SetFeature
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.ENamedElement.SetFeature(System.String,System.Object)
    name: SetFeature
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.SetFeature*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.SetFeature
  name: SetFeature
  nameWithType: EEnumLiteral.SetFeature
  fullName: NMF.Interop.Ecore.EEnumLiteral.SetFeature
- uid: NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
  commentId: M:NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: GetExpressionForAttribute(string)
  nameWithType: ModelElement.GetExpressionForAttribute(string)
  fullName: NMF.Models.ModelElement.GetExpressionForAttribute(string)
  nameWithType.vb: ModelElement.GetExpressionForAttribute(String)
  fullName.vb: NMF.Models.ModelElement.GetExpressionForAttribute(String)
  name.vb: GetExpressionForAttribute(String)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
    name: GetExpressionForAttribute
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetExpressionForAttribute(System.String)
    name: GetExpressionForAttribute
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute
  name: GetExpressionForAttribute
  nameWithType: EEnumLiteral.GetExpressionForAttribute
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForAttribute
- uid: NMF.Expressions.INotifyExpression{System.Object}
  commentId: T:NMF.Expressions.INotifyExpression{System.Object}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<object>
  nameWithType: INotifyExpression<object>
  fullName: NMF.Expressions.INotifyExpression<object>
  nameWithType.vb: INotifyExpression(Of Object)
  fullName.vb: NMF.Expressions.INotifyExpression(Of Object)
  name.vb: INotifyExpression(Of Object)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifyExpression`1
  commentId: T:NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Models.ModelElement.GetExpressionForReference(System.String)
  commentId: M:NMF.Models.ModelElement.GetExpressionForReference(System.String)
  parent: NMF.Models.ModelElement
  isExternal: true
  name: GetExpressionForReference(string)
  nameWithType: ModelElement.GetExpressionForReference(string)
  fullName: NMF.Models.ModelElement.GetExpressionForReference(string)
  nameWithType.vb: ModelElement.GetExpressionForReference(String)
  fullName.vb: NMF.Models.ModelElement.GetExpressionForReference(String)
  name.vb: GetExpressionForReference(String)
  spec.csharp:
  - uid: NMF.Models.ModelElement.GetExpressionForReference(System.String)
    name: GetExpressionForReference
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Models.ModelElement.GetExpressionForReference(System.String)
    name: GetExpressionForReference
  - name: (
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference
  name: GetExpressionForReference
  nameWithType: EEnumLiteral.GetExpressionForReference
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetExpressionForReference
- uid: NMF.Expressions.INotifyExpression{NMF.Models.IModelElement}
  commentId: T:NMF.Expressions.INotifyExpression{NMF.Models.IModelElement}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<IModelElement>
  nameWithType: INotifyExpression<IModelElement>
  fullName: NMF.Expressions.INotifyExpression<NMF.Models.IModelElement>
  nameWithType.vb: INotifyExpression(Of IModelElement)
  fullName.vb: NMF.Expressions.INotifyExpression(Of NMF.Models.IModelElement)
  name.vb: INotifyExpression(Of IModelElement)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.IModelElement
    name: IModelElement
  - name: )
- uid: NMF.Interop.Ecore.ENamedElement.GetClass
  commentId: M:NMF.Interop.Ecore.ENamedElement.GetClass
  parent: NMF.Interop.Ecore.ENamedElement
  name: GetClass()
  nameWithType: ENamedElement.GetClass()
  fullName: NMF.Interop.Ecore.ENamedElement.GetClass()
  spec.csharp:
  - uid: NMF.Interop.Ecore.ENamedElement.GetClass
    name: GetClass
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Interop.Ecore.ENamedElement.GetClass
    name: GetClass
  - name: (
  - name: )
- uid: NMF.Interop.Ecore.EEnumLiteral.GetClass*
  commentId: Overload:NMF.Interop.Ecore.EEnumLiteral.GetClass
  name: GetClass
  nameWithType: EEnumLiteral.GetClass
  fullName: NMF.Interop.Ecore.EEnumLiteral.GetClass
- uid: NMF.Models.IModelElement.GetClass
  commentId: M:NMF.Models.IModelElement.GetClass
  parent: NMF.Models.IModelElement
  name: GetClass()
  nameWithType: IModelElement.GetClass()
  fullName: NMF.Models.IModelElement.GetClass()
  spec.csharp:
  - uid: NMF.Models.IModelElement.GetClass
    name: GetClass
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Models.IModelElement.GetClass
    name: GetClass
  - name: (
  - name: )
