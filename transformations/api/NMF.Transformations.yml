### YamlMime:ManagedReference
items:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  id: NMF.Transformations
  children:
  - NMF.Transformations.AbstractTransformationRule`2
  - NMF.Transformations.AbstractTransformationRule`3
  - NMF.Transformations.ChangePropagationMode
  - NMF.Transformations.ComputationBase
  - NMF.Transformations.ComputationBase`1
  - NMF.Transformations.ComputationBase`2
  - NMF.Transformations.GeneralTransformationRule`1
  - NMF.Transformations.GeneralTransformationRule`2
  - NMF.Transformations.InPlaceComputation
  - NMF.Transformations.InPlaceComputation`1
  - NMF.Transformations.InPlaceComputation`2
  - NMF.Transformations.InPlaceTransformationRule
  - NMF.Transformations.InPlaceTransformationRule`1
  - NMF.Transformations.InPlaceTransformationRule`2
  - NMF.Transformations.InPlaceTransformationRuleBase
  - NMF.Transformations.InPlaceTransformationRuleBase`1
  - NMF.Transformations.InPlaceTransformationRuleBase`2
  - NMF.Transformations.ITransformationRulePattern`1
  - NMF.Transformations.ITransformationRulePattern`2
  - NMF.Transformations.ModelCheckTransformation
  - NMF.Transformations.ModelCheckTransformationRule`1
  - NMF.Transformations.OverrideRuleAttribute
  - NMF.Transformations.ReflectiveTransformation
  - NMF.Transformations.Reflector
  - NMF.Transformations.TraceEntry`2
  - NMF.Transformations.TraceEntryGroup`2
  - NMF.Transformations.TraceExtensions
  - NMF.Transformations.TransformationComputation`1
  - NMF.Transformations.TransformationComputation`2
  - NMF.Transformations.TransformationComputation`3
  - NMF.Transformations.TransformationEngine
  - NMF.Transformations.TransformationRule`1
  - NMF.Transformations.TransformationRule`2
  - NMF.Transformations.TransformationRule`3
  - NMF.Transformations.TransformationRuleBase`1
  - NMF.Transformations.TransformationRuleBase`2
  - NMF.Transformations.TransformationRuleBase`3
  langs:
  - csharp
  - vb
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  type: Namespace
  assemblies:
  - NMF.Models.Transformations
references:
- uid: NMF.Transformations.ModelCheckTransformation
  commentId: T:NMF.Transformations.ModelCheckTransformation
  name: ModelCheckTransformation
  nameWithType: ModelCheckTransformation
  fullName: NMF.Transformations.ModelCheckTransformation
- uid: NMF.Transformations.ModelCheckTransformationRule`1
  commentId: T:NMF.Transformations.ModelCheckTransformationRule`1
  name: ModelCheckTransformationRule<T>
  nameWithType: ModelCheckTransformationRule<T>
  fullName: NMF.Transformations.ModelCheckTransformationRule<T>
  nameWithType.vb: ModelCheckTransformationRule(Of T)
  fullName.vb: NMF.Transformations.ModelCheckTransformationRule(Of T)
  name.vb: ModelCheckTransformationRule(Of T)
  spec.csharp:
  - uid: NMF.Transformations.ModelCheckTransformationRule`1
    name: ModelCheckTransformationRule
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ModelCheckTransformationRule`1
    name: ModelCheckTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.AbstractTransformationRule`2
  commentId: T:NMF.Transformations.AbstractTransformationRule`2
  name: AbstractTransformationRule<TIn, TOut>
  nameWithType: AbstractTransformationRule<TIn, TOut>
  fullName: NMF.Transformations.AbstractTransformationRule<TIn, TOut>
  nameWithType.vb: AbstractTransformationRule(Of TIn, TOut)
  fullName.vb: NMF.Transformations.AbstractTransformationRule(Of TIn, TOut)
  name.vb: AbstractTransformationRule(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.AbstractTransformationRule`2
    name: AbstractTransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.AbstractTransformationRule`2
    name: AbstractTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.AbstractTransformationRule`3
  commentId: T:NMF.Transformations.AbstractTransformationRule`3
  name: AbstractTransformationRule<TIn1, TIn2, TOut>
  nameWithType: AbstractTransformationRule<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.AbstractTransformationRule<TIn1, TIn2, TOut>
  nameWithType.vb: AbstractTransformationRule(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.AbstractTransformationRule(Of TIn1, TIn2, TOut)
  name.vb: AbstractTransformationRule(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.AbstractTransformationRule`3
    name: AbstractTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.AbstractTransformationRule`3
    name: AbstractTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.ChangePropagationMode
  commentId: T:NMF.Transformations.ChangePropagationMode
  parent: NMF.Transformations
  name: ChangePropagationMode
  nameWithType: ChangePropagationMode
  fullName: NMF.Transformations.ChangePropagationMode
- uid: NMF.Transformations.ComputationBase`1
  commentId: T:NMF.Transformations.ComputationBase`1
  name: ComputationBase<TIn>
  nameWithType: ComputationBase<TIn>
  fullName: NMF.Transformations.ComputationBase<TIn>
  nameWithType.vb: ComputationBase(Of TIn)
  fullName.vb: NMF.Transformations.ComputationBase(Of TIn)
  name.vb: ComputationBase(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.ComputationBase`1
    name: ComputationBase
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ComputationBase`1
    name: ComputationBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.ComputationBase`2
  commentId: T:NMF.Transformations.ComputationBase`2
  name: ComputationBase<TIn1, TIn2>
  nameWithType: ComputationBase<TIn1, TIn2>
  fullName: NMF.Transformations.ComputationBase<TIn1, TIn2>
  nameWithType.vb: ComputationBase(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.ComputationBase(Of TIn1, TIn2)
  name.vb: ComputationBase(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.ComputationBase`2
    name: ComputationBase
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ComputationBase`2
    name: ComputationBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.ComputationBase
  commentId: T:NMF.Transformations.ComputationBase
  parent: NMF.Transformations
  name: ComputationBase
  nameWithType: ComputationBase
  fullName: NMF.Transformations.ComputationBase
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2
  commentId: T:NMF.Transformations.GeneralTransformationRule`2
  parent: NMF.Transformations
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.InPlaceComputation`1
  commentId: T:NMF.Transformations.InPlaceComputation`1
  name: InPlaceComputation<TIn>
  nameWithType: InPlaceComputation<TIn>
  fullName: NMF.Transformations.InPlaceComputation<TIn>
  nameWithType.vb: InPlaceComputation(Of TIn)
  fullName.vb: NMF.Transformations.InPlaceComputation(Of TIn)
  name.vb: InPlaceComputation(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceComputation`1
    name: InPlaceComputation
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceComputation`1
    name: InPlaceComputation
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.InPlaceComputation`2
  commentId: T:NMF.Transformations.InPlaceComputation`2
  name: InPlaceComputation<TIn1, TIn2>
  nameWithType: InPlaceComputation<TIn1, TIn2>
  fullName: NMF.Transformations.InPlaceComputation<TIn1, TIn2>
  nameWithType.vb: InPlaceComputation(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.InPlaceComputation(Of TIn1, TIn2)
  name.vb: InPlaceComputation(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceComputation`2
    name: InPlaceComputation
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceComputation`2
    name: InPlaceComputation
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.InPlaceComputation
  commentId: T:NMF.Transformations.InPlaceComputation
  name: InPlaceComputation
  nameWithType: InPlaceComputation
  fullName: NMF.Transformations.InPlaceComputation
- uid: NMF.Transformations.InPlaceTransformationRule`1
  commentId: T:NMF.Transformations.InPlaceTransformationRule`1
  name: InPlaceTransformationRule<TIn>
  nameWithType: InPlaceTransformationRule<TIn>
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>
  nameWithType.vb: InPlaceTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn)
  name.vb: InPlaceTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRule`1
    name: InPlaceTransformationRule
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRule`1
    name: InPlaceTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase`1
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase`1
  name: InPlaceTransformationRuleBase<T>
  nameWithType: InPlaceTransformationRuleBase<T>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<T>
  nameWithType.vb: InPlaceTransformationRuleBase(Of T)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of T)
  name.vb: InPlaceTransformationRuleBase(Of T)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase`2
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase`2
  name: InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType: InPlaceTransformationRuleBase<TIn1, TIn2>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TIn1, TIn2)
  name.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase
  parent: NMF.Transformations
  name: InPlaceTransformationRuleBase
  nameWithType: InPlaceTransformationRuleBase
  fullName: NMF.Transformations.InPlaceTransformationRuleBase
- uid: NMF.Transformations.InPlaceTransformationRule`2
  commentId: T:NMF.Transformations.InPlaceTransformationRule`2
  name: InPlaceTransformationRule<TIn1, TIn2>
  nameWithType: InPlaceTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn1, TIn2>
  nameWithType.vb: InPlaceTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn1, TIn2)
  name.vb: InPlaceTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRule`2
    name: InPlaceTransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRule`2
    name: InPlaceTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRule
  commentId: T:NMF.Transformations.InPlaceTransformationRule
  name: InPlaceTransformationRule
  nameWithType: InPlaceTransformationRule
  fullName: NMF.Transformations.InPlaceTransformationRule
- uid: NMF.Transformations.ITransformationRulePattern`1
  commentId: T:NMF.Transformations.ITransformationRulePattern`1
  name: ITransformationRulePattern<TIn>
  nameWithType: ITransformationRulePattern<TIn>
  fullName: NMF.Transformations.ITransformationRulePattern<TIn>
  nameWithType.vb: ITransformationRulePattern(Of TIn)
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn)
  name.vb: ITransformationRulePattern(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.ITransformationRulePattern`2
  commentId: T:NMF.Transformations.ITransformationRulePattern`2
  name: ITransformationRulePattern<TIn1, TIn2>
  nameWithType: ITransformationRulePattern<TIn1, TIn2>
  fullName: NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>
  nameWithType.vb: ITransformationRulePattern(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2)
  name.vb: ITransformationRulePattern(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.OverrideRuleAttribute
  commentId: T:NMF.Transformations.OverrideRuleAttribute
  name: OverrideRuleAttribute
  nameWithType: OverrideRuleAttribute
  fullName: NMF.Transformations.OverrideRuleAttribute
- uid: NMF.Transformations.ReflectiveTransformation
  commentId: T:NMF.Transformations.ReflectiveTransformation
  parent: NMF.Transformations
  name: ReflectiveTransformation
  nameWithType: ReflectiveTransformation
  fullName: NMF.Transformations.ReflectiveTransformation
- uid: NMF.Transformations.Reflector
  commentId: T:NMF.Transformations.Reflector
  name: Reflector
  nameWithType: Reflector
  fullName: NMF.Transformations.Reflector
- uid: NMF.Transformations.TraceExtensions
  commentId: T:NMF.Transformations.TraceExtensions
  parent: NMF.Transformations
  name: TraceExtensions
  nameWithType: TraceExtensions
  fullName: NMF.Transformations.TraceExtensions
- uid: NMF.Transformations.TraceEntry`2
  commentId: T:NMF.Transformations.TraceEntry`2
  name: TraceEntry<TInput, TOut>
  nameWithType: TraceEntry<TInput, TOut>
  fullName: NMF.Transformations.TraceEntry<TInput, TOut>
  nameWithType.vb: TraceEntry(Of TInput, TOut)
  fullName.vb: NMF.Transformations.TraceEntry(Of TInput, TOut)
  name.vb: TraceEntry(Of TInput, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TraceEntry`2
    name: TraceEntry
  - name: <
  - name: TInput
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TraceEntry`2
    name: TraceEntry
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TraceEntryGroup`2
  commentId: T:NMF.Transformations.TraceEntryGroup`2
  name: TraceEntryGroup<TKey, TOut>
  nameWithType: TraceEntryGroup<TKey, TOut>
  fullName: NMF.Transformations.TraceEntryGroup<TKey, TOut>
  nameWithType.vb: TraceEntryGroup(Of TKey, TOut)
  fullName.vb: NMF.Transformations.TraceEntryGroup(Of TKey, TOut)
  name.vb: TraceEntryGroup(Of TKey, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationComputation`2
  commentId: T:NMF.Transformations.TransformationComputation`2
  name: TransformationComputation<TIn, TOut>
  nameWithType: TransformationComputation<TIn, TOut>
  fullName: NMF.Transformations.TransformationComputation<TIn, TOut>
  nameWithType.vb: TransformationComputation(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationComputation(Of TIn, TOut)
  name.vb: TransformationComputation(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationComputation`2
    name: TransformationComputation
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationComputation`2
    name: TransformationComputation
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationComputation`3
  commentId: T:NMF.Transformations.TransformationComputation`3
  name: TransformationComputation<TIn1, TIn2, TOut>
  nameWithType: TransformationComputation<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationComputation<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationComputation(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationComputation(Of TIn1, TIn2, TOut)
  name.vb: TransformationComputation(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationComputation`3
    name: TransformationComputation
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationComputation`3
    name: TransformationComputation
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationComputation`1
  commentId: T:NMF.Transformations.TransformationComputation`1
  name: TransformationComputation<TOut>
  nameWithType: TransformationComputation<TOut>
  fullName: NMF.Transformations.TransformationComputation<TOut>
  nameWithType.vb: TransformationComputation(Of TOut)
  fullName.vb: NMF.Transformations.TransformationComputation(Of TOut)
  name.vb: TransformationComputation(Of TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationComputation`1
    name: TransformationComputation
  - name: <
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationComputation`1
    name: TransformationComputation
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationEngine
  commentId: T:NMF.Transformations.TransformationEngine
  name: TransformationEngine
  nameWithType: TransformationEngine
  fullName: NMF.Transformations.TransformationEngine
- uid: NMF.Transformations.TransformationRule`2
  commentId: T:NMF.Transformations.TransformationRule`2
  name: TransformationRule<TIn, TOut>
  nameWithType: TransformationRule<TIn, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>
  nameWithType.vb: TransformationRule(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut)
  name.vb: TransformationRule(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`1
  commentId: T:NMF.Transformations.TransformationRuleBase`1
  name: TransformationRuleBase<T>
  nameWithType: TransformationRuleBase<T>
  fullName: NMF.Transformations.TransformationRuleBase<T>
  nameWithType.vb: TransformationRuleBase(Of T)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of T)
  name.vb: TransformationRuleBase(Of T)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.TransformationRule`3
  commentId: T:NMF.Transformations.TransformationRule`3
  name: TransformationRule<TIn1, TIn2, TOut>
  nameWithType: TransformationRule<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut)
  name.vb: TransformationRule(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRule`1
  commentId: T:NMF.Transformations.TransformationRule`1
  name: TransformationRule<T>
  nameWithType: TransformationRule<T>
  fullName: NMF.Transformations.TransformationRule<T>
  nameWithType.vb: TransformationRule(Of T)
  fullName.vb: NMF.Transformations.TransformationRule(Of T)
  name.vb: TransformationRule(Of T)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`1
    name: TransformationRule
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`1
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
