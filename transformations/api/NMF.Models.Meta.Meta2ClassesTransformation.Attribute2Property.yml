### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  commentId: T:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  id: Meta2ClassesTransformation.Attribute2Property
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue(NMF.Models.Meta.IAttribute,System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberProperty)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies
  - NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  langs:
  - csharp
  - vb
  name: Meta2ClassesTransformation.Attribute2Property
  nameWithType: Meta2ClassesTransformation.Attribute2Property
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  type: Class
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Attribute2Property
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 25
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nThe transformation rule to transform attributes of a class or extension to a code property\n"
  example: []
  syntax:
    content: 'public class Meta2ClassesTransformation.Attribute2Property : TransformationRule<IAttribute, CodeMemberProperty>'
    content.vb: Public Class Meta2ClassesTransformation.Attribute2Property Inherits TransformationRule(Of IAttribute, CodeMemberProperty)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  inheritedMembers:
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.NeedDependenciesForOutputCreation
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Predicate{NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput2}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.OutputType
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},NMF.Transformations.Core.Computation)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},NMF.Transformations.Core.Computation)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TKey}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TKey}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Rule``1
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``1(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.InputType
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(System.Func{NMF.Models.Meta.IAttribute,{TKey}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},NMF.Models.Meta.IAttribute},System.Func{NMF.Models.Meta.IAttribute,{TKey}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.ToString
  - NMF.Transformations.Core.GeneralTransformationRule.OutputType
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies
  id: RegisterDependencies
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: RegisterDependencies()
  nameWithType: Meta2ClassesTransformation.Attribute2Property.RegisterDependencies()
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies()
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterDependencies
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 30
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nRegisters the dependency to generate refibed attributes\n"
  example: []
  syntax:
    content: public override void RegisterDependencies()
    content.vb: Public Overrides Sub RegisterDependencies()
  overridden: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  id: CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateOutput(IAttribute, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateOutput(IAttribute, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput(NMF.Models.Meta.IAttribute, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOutput
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 38
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the output of this transformation rule\n"
  remarks: At this point, not all of the computations have created their output and thus, the trace is not complete. Use the OutputDelayLevel-feature to have the trace contain all elements created in earlier levels
  example: []
  syntax:
    content: public override CodeMemberProperty CreateOutput(IAttribute input, ITransformationContext context)
    parameters:
    - id: input
      type: NMF.Models.Meta.IAttribute
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context (and trace!) object
    return:
      type: System.CodeDom.CodeMemberProperty
      description: The output for this transformation under this input
    content.vb: Public Overrides Function CreateOutput(input As IAttribute, context As ITransformationContext) As CodeMemberProperty
  overridden: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  id: Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: Transform(IAttribute, CodeMemberProperty, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.Transform(IAttribute, CodeMemberProperty, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform(NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 55
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nInitializes the generated property\n"
  example: []
  syntax:
    content: public override void Transform(IAttribute input, CodeMemberProperty generatedProperty, ITransformationContext context)
    parameters:
    - id: input
      type: NMF.Models.Meta.IAttribute
      description: The input NMeta attribute
    - id: generatedProperty
      type: System.CodeDom.CodeMemberProperty
      description: The generated property
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context
    content.vb: Public Overrides Sub Transform(input As IAttribute, generatedProperty As CodeMemberProperty, context As ITransformationContext)
  overridden: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue(NMF.Models.Meta.IAttribute,System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberProperty)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue(NMF.Models.Meta.IAttribute,System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberProperty)
  id: CreateDefaultValue(NMF.Models.Meta.IAttribute,System.CodeDom.CodeTypeReference,System.CodeDom.CodeMemberProperty)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateDefaultValue(IAttribute, CodeTypeReference, CodeMemberProperty)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue(IAttribute, CodeTypeReference, CodeMemberProperty)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue(NMF.Models.Meta.IAttribute, System.CodeDom.CodeTypeReference, System.CodeDom.CodeMemberProperty)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateDefaultValue
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 205
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the default value for the property\n"
  example: []
  syntax:
    content: protected virtual CodeExpression CreateDefaultValue(IAttribute input, CodeTypeReference fieldType, CodeMemberProperty generatedProperty)
    parameters:
    - id: input
      type: NMF.Models.Meta.IAttribute
      description: The input NMeta attribute
    - id: fieldType
      type: System.CodeDom.CodeTypeReference
      description: The code type reference for the field type
    - id: generatedProperty
      type: System.CodeDom.CodeMemberProperty
      description: The generated property
    return:
      type: System.CodeDom.CodeExpression
      description: A code expression that represents the default value
    content.vb: Protected Overridable Function CreateDefaultValue(input As IAttribute, fieldType As CodeTypeReference, generatedProperty As CodeMemberProperty) As CodeExpression
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType(System.CodeDom.CodeTypeReference)
  id: CreateBagImplementationType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateBagImplementationType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateBagImplementationType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 314
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the bag implementation of the given element type reference\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateBagImplementationType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The type reference of the bags elements
    return:
      type: System.CodeDom.CodeTypeReference
      description: A type reference for the bag implementation for the given element type
    content.vb: Protected Overridable Function CreateBagImplementationType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType(System.CodeDom.CodeTypeReference)
  id: CreateListImplementationType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateListImplementationType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateListImplementationType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 324
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the list implementation of the given element type reference\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateListImplementationType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The type reference of the lists elements
    return:
      type: System.CodeDom.CodeTypeReference
      description: A type reference for the list implementation for the given element type
    content.vb: Protected Overridable Function CreateListImplementationType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType(System.CodeDom.CodeTypeReference)
  id: CreateSetImplementationType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateSetImplementationType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSetImplementationType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 334
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the unordered set implementation of the given element type reference\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateSetImplementationType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The elements type reference
    return:
      type: System.CodeDom.CodeTypeReference
      description: A type reference for the unordered set implementation for the given element type
    content.vb: Protected Overridable Function CreateSetImplementationType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType(System.CodeDom.CodeTypeReference)
  id: CreateOrderedSetImplementationType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateOrderedSetImplementationType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOrderedSetImplementationType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 344
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the ordered set implementation of the given element type reference\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateOrderedSetImplementationType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The type reference of the elements
    return:
      type: System.CodeDom.CodeTypeReference
      description: A type reference for the ordered set implementation for the given element type
    content.vb: Protected Overridable Function CreateOrderedSetImplementationType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateListInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateListInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 354
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the list interface type for the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateListInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type
    return:
      type: System.CodeDom.CodeTypeReference
      description: The list interface type reference, by default the generic IList
    content.vb: Protected Overridable Function CreateListInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateBagInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateBagInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 364
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the bag interface type for the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateBagInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type
    return:
      type: System.CodeDom.CodeTypeReference
      description: The bag interface type reference, by default the generic ICollection
    content.vb: Protected Overridable Function CreateBagInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateSetInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSetInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 374
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the unordered set interface type for the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateSetInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    return:
      type: System.CodeDom.CodeTypeReference
      description: The unordered set interface type, by default the generic ISet
    content.vb: Protected Overridable Function CreateSetInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  id: CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property
  langs:
  - csharp
  - vb
  name: CreateOrderedSetInterfaceType(CodeTypeReference)
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType(CodeTypeReference)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType(System.CodeDom.CodeTypeReference)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOrderedSetInterfaceType
    path: src/Transformations/Models.MetaTransformation/Meta/Attribute2Property.cs
    startLine: 384
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates the ordered set interface type for the given element type\n"
  example: []
  syntax:
    content: protected virtual CodeTypeReference CreateOrderedSetInterfaceType(CodeTypeReference elementTypeReference)
    parameters:
    - id: elementTypeReference
      type: System.CodeDom.CodeTypeReference
      description: The element type reference
    return:
      type: System.CodeDom.CodeTypeReference
      description: The ordered set interface type, by default the generic IOrderedSet interface from NMF.Collections.Generic
    content.vb: Protected Overridable Function CreateOrderedSetInterfaceType(elementTypeReference As CodeTypeReference) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType*
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  commentId: T:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<IAttribute>
  nameWithType: GeneralTransformationRule<IAttribute>
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>
  nameWithType.vb: GeneralTransformationRule(Of IAttribute)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute)
  name.vb: GeneralTransformationRule(Of IAttribute)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  commentId: T:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<IAttribute, CodeMemberProperty>
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty)
  name.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  commentId: T:NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRule`2
  name: TransformationRule<IAttribute, CodeMemberProperty>
  nameWithType: TransformationRule<IAttribute, CodeMemberProperty>
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>
  nameWithType.vb: TransformationRule(Of IAttribute, CodeMemberProperty)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty)
  name.vb: TransformationRule(Of IAttribute, CodeMemberProperty)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  name: CreateComputation(object[], IComputationContext)
  nameWithType: TransformationRule<IAttribute, CodeMemberProperty>.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of IAttribute, CodeMemberProperty).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(IAttribute, ITransformationContext)
  nameWithType: TransformationRule<IAttribute, CodeMemberProperty>.CreateOutput(IAttribute, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CreateOutput(NMF.Models.Meta.IAttribute, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IAttribute, CodeMemberProperty).CreateOutput(IAttribute, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CreateOutput(NMF.Models.Meta.IAttribute, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CreateOutput(NMF.Models.Meta.IAttribute,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<IAttribute, CodeMemberProperty>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of IAttribute, CodeMemberProperty).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: Transform(IAttribute, CodeMemberProperty, ITransformationContext)
  nameWithType: TransformationRule<IAttribute, CodeMemberProperty>.Transform(IAttribute, CodeMemberProperty, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Transform(NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IAttribute, CodeMemberProperty).Transform(IAttribute, CodeMemberProperty, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Transform(NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Transform(NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<IAttribute>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<IAttribute>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.MarkInstantiatingFor<TBaseIn, TBaseOut>(System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IAttribute})
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IAttribute})
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Predicate{NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Predicate<NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Predicate(Of NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireByType``3(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallByType``3(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, TRequiredInput>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, TRequiredInput), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyByType``3(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IAttribute, IEnumerable<TRequiredInput>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberProperty, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberProperty, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, TRequiredInput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, TRequiredInput>, Func<IAttribute, CodeMemberProperty, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, TRequiredInput>, Func<IAttribute, CodeMemberProperty, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, TRequiredInput), Func(Of IAttribute, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, TRequiredInput), Func(Of IAttribute, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput2}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, TRequiredInput1>, Func<IAttribute, CodeMemberProperty, TRequiredInput2>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, TRequiredInput1>, Func<IAttribute, CodeMemberProperty, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, TRequiredInput1), Func(Of IAttribute, CodeMemberProperty, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, TRequiredInput1), Func(Of IAttribute, CodeMemberProperty, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, TRequiredInput1>, Func<IAttribute, CodeMemberProperty, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, TRequiredInput1>, Func<IAttribute, CodeMemberProperty, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, TRequiredInput1), Func(Of IAttribute, CodeMemberProperty, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, TRequiredInput1), Func(Of IAttribute, CodeMemberProperty, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  name: CallOutputSensitive(GeneralTransformationRule<IAttribute, CodeMemberProperty>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallOutputSensitive(GeneralTransformationRule<IAttribute, CodeMemberProperty>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallOutputSensitive(GeneralTransformationRule(Of IAttribute, CodeMemberProperty))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of IAttribute, CodeMemberProperty))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive(GeneralTransformationRule<IAttribute, CodeMemberProperty>, Func<IAttribute, CodeMemberProperty, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallOutputSensitive(GeneralTransformationRule<IAttribute, CodeMemberProperty>, Func<IAttribute, CodeMemberProperty, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallOutputSensitive(GeneralTransformationRule(Of IAttribute, CodeMemberProperty), Func(Of IAttribute, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, Boolean))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of IAttribute, CodeMemberProperty), Func(Of IAttribute, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, IEnumerable<TRequiredInput>>, Func<IAttribute, CodeMemberProperty, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, CodeMemberProperty, IEnumerable<TRequiredInput>>, Func<IAttribute, CodeMemberProperty, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Func(Of IAttribute, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Func(Of IAttribute, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IAttribute, CodeMemberProperty, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IAttribute, CodeMemberProperty, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IAttribute, CodeMemberProperty, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IAttribute, CodeMemberProperty, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IAttribute>, Action<CodeMemberProperty, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>, System.Action<System.CodeDom.CodeMemberProperty, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute), System.Action(Of System.CodeDom.CodeMemberProperty, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Action(Of CodeMemberProperty, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Action{System.CodeDom.CodeMemberProperty,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberProperty>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberProperty>>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberProperty)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberProperty)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberProperty}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.OutputType
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.OutputType
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).OutputType
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  name: SelectArrays<TRequiredInput1, TRequiredInput2>(Func<IAttribute, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.SelectArrays<TRequiredInput1, TRequiredInput2>(Func<IAttribute, CodeMemberProperty, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.SelectArrays<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).SelectArrays(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``2(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{{TRequiredInput}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  name: SelectArrays<TRequiredInput>(Func<IAttribute, CodeMemberProperty, IEnumerable<TRequiredInput>>, Computation)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.SelectArrays<TRequiredInput>(Func<IAttribute, CodeMemberProperty, IEnumerable<TRequiredInput>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.SelectArrays<TRequiredInput>(System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable<TRequiredInput>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).SelectArrays(Of TRequiredInput)(Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).SelectArrays(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, System.Collections.Generic.IEnumerable(Of TRequiredInput)), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput)(Func(Of IAttribute, CodeMemberProperty, IEnumerable(Of TRequiredInput)), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.SelectArrays``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  name: TraceOutput<TKey>(Func<IAttribute, CodeMemberProperty, TKey>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.TraceOutput<TKey>(Func<IAttribute, CodeMemberProperty, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.TraceOutput<TKey>(System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).TraceOutput(Of TKey)(Func(Of IAttribute, CodeMemberProperty, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).TraceOutput(Of TKey)(System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of IAttribute, CodeMemberProperty, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, CodeMemberProperty>, Func<IAttribute, CodeMemberProperty, TKey>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.TraceOutput<TKey>(TraceEntryGroup<TKey, CodeMemberProperty>, Func<IAttribute, CodeMemberProperty, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, System.CodeDom.CodeMemberProperty>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeMemberProperty), Func(Of IAttribute, CodeMemberProperty, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, System.CodeDom.CodeMemberProperty), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeMemberProperty), Func(Of IAttribute, CodeMemberProperty, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeMemberProperty},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IAttribute, CodeMemberProperty, TTraceInput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IAttribute, CodeMemberProperty, TTraceInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceInput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IAttribute, CodeMemberProperty, TTraceInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceInput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IAttribute, CodeMemberProperty, TTraceInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IAttribute, CodeMemberProperty, TTraceOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IAttribute, CodeMemberProperty, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IAttribute, CodeMemberProperty, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IAttribute, CodeMemberProperty, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceInput}},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IAttribute, CodeMemberProperty, TTraceInput>, Func<IAttribute, CodeMemberProperty, TTraceOutput>)
  nameWithType: TransformationRuleBase<IAttribute, CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IAttribute, CodeMemberProperty, TTraceInput>, Func<IAttribute, CodeMemberProperty, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceInput>, System.Func<NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IAttribute, CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IAttribute, CodeMemberProperty, TTraceInput), Func(Of IAttribute, CodeMemberProperty, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceInput), System.Func(Of NMF.Models.Meta.IAttribute, System.CodeDom.CodeMemberProperty, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IAttribute, CodeMemberProperty, TTraceInput), Func(Of IAttribute, CodeMemberProperty, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``0},System.Func{NMF.Models.Meta.IAttribute,System.CodeDom.CodeMemberProperty,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberProperty
    name: CodeMemberProperty
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IAttribute})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IAttribute})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Rule``1
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<IAttribute>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.WithPattern(ITransformationRulePattern<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.WithPattern(NMF.Transformations.ITransformationRulePattern<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).WithPattern(ITransformationRulePattern(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).WithPattern(NMF.Transformations.ITransformationRulePattern(Of NMF.Models.Meta.IAttribute))
  name.vb: WithPattern(ITransformationRulePattern(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IAttribute})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IAttribute})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.WithPattern(Func<ITransformationContext, INotifyEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IAttribute}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IAttribute}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.WithPattern(Func<ITransformationContext, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).WithPattern(Func(Of ITransformationContext, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<IAttribute>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1(System.Func{NMF.Models.Meta.IAttribute,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  name: RequireByType<TRequiredInput>(Func<IAttribute, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.RequireByType<TRequiredInput>(Func<IAttribute, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireByType<TRequiredInput>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireByType(Of TRequiredInput)(Func(Of IAttribute, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of IAttribute, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1(System.Func{NMF.Models.Meta.IAttribute,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``1(System.Func{NMF.Models.Meta.IAttribute,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IAttribute>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IAttribute>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireManyByType<TRequiredInput>(Func<IAttribute, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IAttribute>.RequireManyByType<TRequiredInput>(Func<IAttribute, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireManyByType(Of TRequiredInput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IAttribute>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Require(GeneralTransformationRule, Func<IAttribute, object[]>)
  nameWithType: GeneralTransformationRule<IAttribute>.Require(GeneralTransformationRule, Func<IAttribute, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IAttribute, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Require(GeneralTransformationRule, Func(Of IAttribute, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IAttribute, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of IAttribute, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0},System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>, Predicate<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>, Predicate<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>, System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput), Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput), System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput), Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Predicate<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Predicate<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>, System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2), System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: RequireMany(GeneralTransformationRule, Func<IAttribute, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<IAttribute>.RequireMany(GeneralTransformationRule, Func<IAttribute, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireMany(GeneralTransformationRule, Func(Of IAttribute, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of IAttribute, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IAttribute>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IAttribute>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Call(GeneralTransformationRule, Func<IAttribute, object[]>)
  nameWithType: GeneralTransformationRule<IAttribute>.Call(GeneralTransformationRule, Func<IAttribute, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IAttribute, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Call(GeneralTransformationRule, Func(Of IAttribute, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IAttribute, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of IAttribute, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: CallMany(GeneralTransformationRule, Func<IAttribute, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallMany(GeneralTransformationRule, Func<IAttribute, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallMany(GeneralTransformationRule, Func(Of IAttribute, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of IAttribute, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``1(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``1(System.Func{NMF.Models.Meta.IAttribute,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  name: CallByType<TRequiredInput>(Func<IAttribute, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallByType<TRequiredInput>(Func<IAttribute, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallByType<TRequiredInput>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallByType(Of TRequiredInput)(Func(Of IAttribute, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of IAttribute, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``1(System.Func{NMF.Models.Meta.IAttribute,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``1(System.Func{NMF.Models.Meta.IAttribute,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallByType``2(System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IAttribute>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0},System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>, Predicate<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, TRequiredInput>, Predicate<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput>, System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput), Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput), System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, TRequiredInput), Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,``0},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput1}},System.Func{NMF.Models.Meta.IAttribute,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Predicate{NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Predicate<IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, TRequiredInput1>, Func<IAttribute, TRequiredInput2>, Predicate<IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput1>, System.Func<NMF.Models.Meta.IAttribute, TRequiredInput2>, System.Predicate<NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Predicate(Of IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput1), System.Func(Of NMF.Models.Meta.IAttribute, TRequiredInput2), System.Predicate(Of NMF.Models.Meta.IAttribute))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, TRequiredInput1), Func(Of IAttribute, TRequiredInput2), Predicate(Of IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,``0},System.Func{NMF.Models.Meta.IAttribute,``1},System.Predicate{NMF.Models.Meta.IAttribute})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyByType<TRequiredInput>(Func<IAttribute, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallManyByType<TRequiredInput>(Func<IAttribute, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallManyByType(Of TRequiredInput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``1(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallManyByType``2(System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IAttribute, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IAttribute, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IAttribute, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IAttribute, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IAttribute, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IAttribute,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.InputType
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<IAttribute>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.InputType
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).InputType
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{``0,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput>(Func<TRequiredInput, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{``0,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{``0,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{``0,NMF.Models.Meta.IAttribute},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IAttribute>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput>(Func<TRequiredInput, IAttribute>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IAttribute), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IAttribute), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{``0,NMF.Models.Meta.IAttribute},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(System.Func{``0,NMF.Models.Meta.IAttribute},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IAttribute>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IAttribute>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IAttribute},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IAttribute},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IAttribute>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IAttribute>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IAttribute>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IAttribute), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IAttribute), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IAttribute), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IAttribute},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IAttribute},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IAttribute>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IAttribute>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IAttribute), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IAttribute>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IAttribute)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IAttribute>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IAttribute>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IAttribute), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IAttribute), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IAttribute>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IAttribute>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IAttribute), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IAttribute), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IAttribute), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IAttribute},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IAttribute},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IAttribute), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IAttribute), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IAttribute},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IAttribute>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IAttribute)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(System.Func{NMF.Models.Meta.IAttribute,{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(System.Func{NMF.Models.Meta.IAttribute,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  name: TraceInput<TKey>(Func<IAttribute, TKey>)
  nameWithType: GeneralTransformationRule<IAttribute>.TraceInput<TKey>(Func<IAttribute, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.TraceInput<TKey>(System.Func<NMF.Models.Meta.IAttribute, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).TraceInput(Of TKey)(Func(Of IAttribute, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).TraceInput(Of TKey)(System.Func(Of NMF.Models.Meta.IAttribute, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of IAttribute, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(System.Func{NMF.Models.Meta.IAttribute,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(System.Func{NMF.Models.Meta.IAttribute,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},NMF.Models.Meta.IAttribute},System.Func{NMF.Models.Meta.IAttribute,{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,NMF.Models.Meta.IAttribute},System.Func{NMF.Models.Meta.IAttribute,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  name: TraceInput<TKey>(TraceEntryGroup<TKey, IAttribute>, Func<IAttribute, TKey>)
  nameWithType: GeneralTransformationRule<IAttribute>.TraceInput<TKey>(TraceEntryGroup<TKey, IAttribute>, Func<IAttribute, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, NMF.Models.Meta.IAttribute>, System.Func<NMF.Models.Meta.IAttribute, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, IAttribute), Func(Of IAttribute, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, NMF.Models.Meta.IAttribute), System.Func(Of NMF.Models.Meta.IAttribute, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, IAttribute), Func(Of IAttribute, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,NMF.Models.Meta.IAttribute},System.Func{NMF.Models.Meta.IAttribute,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,NMF.Models.Meta.IAttribute},System.Func{NMF.Models.Meta.IAttribute,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, IAttribute>, bool)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor(GeneralTransformationRule, Func<Computation, IAttribute>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, NMF.Models.Meta.IAttribute>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(GeneralTransformationRule, Func(Of Computation, IAttribute), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, NMF.Models.Meta.IAttribute), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, IAttribute), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, IAttribute>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<IAttribute>.CallFor(GeneralTransformationRule, Func<Computation, IAttribute>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, NMF.Models.Meta.IAttribute>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallFor(GeneralTransformationRule, Func(Of Computation, IAttribute), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, NMF.Models.Meta.IAttribute), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, IAttribute), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IAttribute},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IAttribute>>, bool)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IAttribute>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IAttribute)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IAttribute)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IAttribute>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<IAttribute>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IAttribute>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IAttribute>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IAttribute)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IAttribute)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IAttribute)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IAttribute}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IAttribute
    name: IAttribute
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.ToString
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}
  definition: NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<IAttribute>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IAttribute>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of IAttribute).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IAttribute).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IAttribute}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRule`2
  commentId: T:NMF.Transformations.TransformationRule`2
  name: TransformationRule<TIn, TOut>
  nameWithType: TransformationRule<TIn, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>
  nameWithType.vb: TransformationRule(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut)
  name.vb: TransformationRule(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  isExternal: true
  name: CreateComputation(object[], IComputationContext)
  nameWithType: TransformationRule<TIn, TOut>.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(TIn, ITransformationContext)
  nameWithType: TransformationRule<TIn, TOut>.CreateOutput(TIn, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateOutput(TIn, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).CreateOutput(TIn, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateOutput(TIn, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<TIn, TOut>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of TIn, TOut).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: Transform(TIn, TOut, ITransformationContext)
  nameWithType: TransformationRule<TIn, TOut>.Transform(TIn, TOut, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.Transform(TIn, TOut, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).Transform(TIn, TOut, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).Transform(TIn, TOut, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  commentId: M:NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  isExternal: true
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<TIn>)
  nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<TIn>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>(System.Predicate<TIn>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Predicate<TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Predicate(Of TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, TRequiredInput>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, TRequiredInput), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, TRequiredInput1>, System.Func<TIn, TOut, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, TRequiredInput1), System.Func(Of TIn, TOut, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, TRequiredInput1>, System.Func<TIn, TOut, TRequiredInput2>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, TRequiredInput1), System.Func(Of TIn, TOut, TRequiredInput2), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  name: CallOutputSensitive(GeneralTransformationRule<TIn, TOut>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive(GeneralTransformationRule<TIn, TOut>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<TIn, TOut>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of TIn, TOut))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive(GeneralTransformationRule<TIn, TOut>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive(GeneralTransformationRule<TIn, TOut>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<TIn, TOut>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of TIn, TOut), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase`2.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<TIn, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.OutputType
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).OutputType
- uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  isExternal: true
  name: SelectArrays<TRequiredInput1, TRequiredInput2>(Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>(Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  isExternal: true
  name: SelectArrays<TRequiredInput>(Func<TIn, TOut, IEnumerable<TRequiredInput>>, Computation)
  nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>(Func<TIn, TOut, IEnumerable<TRequiredInput>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>(System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)(Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)(System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput)(Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  isExternal: true
  name: TraceOutput<TKey>(Func<TIn, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(Func<TIn, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(System.Func<TIn, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(Func(Of TIn, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(System.Func(Of TIn, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of TIn, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  isExternal: true
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TOut>, System.Func<TIn, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TOut), System.Func(Of TIn, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceInput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>, Func<TIn, TOut, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>, Func<TIn, TOut, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceInput>, System.Func<TIn, TOut, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput), Func(Of TIn, TOut, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceInput), System.Func(Of TIn, TOut, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput), Func(Of TIn, TOut, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(ITransformationRulePattern<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(ITransformationRulePattern(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  isExternal: true
  name: RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Require(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Require(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Call(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Call(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  isExternal: true
  name: CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).InputType
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TIn>, System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TIn), System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies
  name: RegisterDependencies
  nameWithType: Meta2ClassesTransformation.Attribute2Property.RegisterDependencies
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.RegisterDependencies
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput
  name: CreateOutput
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateOutput
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOutput
- uid: NMF.Models.Meta.IAttribute
  commentId: T:NMF.Models.Meta.IAttribute
  parent: NMF.Models.Meta
  name: IAttribute
  nameWithType: IAttribute
  fullName: NMF.Models.Meta.IAttribute
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: System.CodeDom.CodeMemberProperty
  commentId: T:System.CodeDom.CodeMemberProperty
  parent: System.CodeDom
  isExternal: true
  name: CodeMemberProperty
  nameWithType: CodeMemberProperty
  fullName: System.CodeDom.CodeMemberProperty
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform
  name: Transform
  nameWithType: Meta2ClassesTransformation.Attribute2Property.Transform
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.Transform
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue
  name: CreateDefaultValue
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateDefaultValue
- uid: System.CodeDom.CodeTypeReference
  commentId: T:System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.CodeDom.CodeExpression
  commentId: T:System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: true
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType
  name: CreateBagImplementationType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagImplementationType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType
  name: CreateListImplementationType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListImplementationType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType
  name: CreateSetImplementationType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetImplementationType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType
  name: CreateOrderedSetImplementationType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetImplementationType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType
  name: CreateListInterfaceType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateListInterfaceType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType
  name: CreateBagInterfaceType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateBagInterfaceType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType
  name: CreateSetInterfaceType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateSetInterfaceType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType
  name: CreateOrderedSetInterfaceType
  nameWithType: Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Attribute2Property.CreateOrderedSetInterfaceType
