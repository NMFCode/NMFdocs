### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  id: Transformation
  parent: NMF.Transformations.Core
  children:
  - NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.Transformation.CreateContext
  - NMF.Transformations.Core.Transformation.CreateRules
  - NMF.Transformations.Core.Transformation.CreateRulesInternal
  - NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  - NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  - NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  - NMF.Transformations.Core.Transformation.Initialize
  - NMF.Transformations.Core.Transformation.IsInitialized
  - NMF.Transformations.Core.Transformation.IsRulesRegistered
  - NMF.Transformations.Core.Transformation.MaxOutputDelay
  - NMF.Transformations.Core.Transformation.MaxTransformationDelay
  - NMF.Transformations.Core.Transformation.Patterns
  - NMF.Transformations.Core.Transformation.RegisterRules
  - NMF.Transformations.Core.Transformation.Rules
  langs:
  - csharp
  - vb
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
  type: Class
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Transformation
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 14
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: This is the base class for transformations
  example: []
  syntax:
    content: public abstract class Transformation
    content.vb: Public MustInherit Class Transformation
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Synchronizations.Synchronization
  - NMF.Transformations.ReflectiveTransformation
  - NMF.Transformations.Tests.MockTransformation
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Transformations.Core.Transformation.CreateRules
  commentId: M:NMF.Transformations.Core.Transformation.CreateRules
  id: CreateRules
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: CreateRules()
  nameWithType: Transformation.CreateRules()
  fullName: NMF.Transformations.Core.Transformation.CreateRules()
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CreateRules
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 27
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Creates the transformation rules for this transformation
  example: []
  syntax:
    content: protected abstract IEnumerable<GeneralTransformationRule> CreateRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of transformation rules
    content.vb: Protected MustOverride Function CreateRules() As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.CreateRules*
- uid: NMF.Transformations.Core.Transformation.Patterns
  commentId: P:NMF.Transformations.Core.Transformation.Patterns
  id: Patterns
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: Patterns
  nameWithType: Transformation.Patterns
  fullName: NMF.Transformations.Core.Transformation.Patterns
  type: Property
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Patterns
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 32
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets a collection of pattern objects used within the transformation
  example: []
  syntax:
    content: public ICollection<ITransformationPattern> Patterns { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{NMF.Transformations.Core.ITransformationPattern}
    content.vb: Public ReadOnly Property Patterns As ICollection(Of ITransformationPattern)
  overload: NMF.Transformations.Core.Transformation.Patterns*
- uid: NMF.Transformations.Core.Transformation.IsInitialized
  commentId: P:NMF.Transformations.Core.Transformation.IsInitialized
  id: IsInitialized
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: IsInitialized
  nameWithType: Transformation.IsInitialized
  fullName: NMF.Transformations.Core.Transformation.IsInitialized
  type: Property
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: IsInitialized
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 43
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets a value indicating whether the transformation has been initialized yet
  example: []
  syntax:
    content: public bool IsInitialized { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsInitialized As Boolean
  overload: NMF.Transformations.Core.Transformation.IsInitialized*
- uid: NMF.Transformations.Core.Transformation.IsRulesRegistered
  commentId: P:NMF.Transformations.Core.Transformation.IsRulesRegistered
  id: IsRulesRegistered
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: IsRulesRegistered
  nameWithType: Transformation.IsRulesRegistered
  fullName: NMF.Transformations.Core.Transformation.IsRulesRegistered
  type: Property
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: IsRulesRegistered
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 62
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets a value indicating whether the transformation has registered its rules requirements
  example: []
  syntax:
    content: public bool IsRulesRegistered { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsRulesRegistered As Boolean
  overload: NMF.Transformations.Core.Transformation.IsRulesRegistered*
- uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
  commentId: M:NMF.Transformations.Core.Transformation.CreateRulesInternal
  id: CreateRulesInternal
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: CreateRulesInternal()
  nameWithType: Transformation.CreateRulesInternal()
  fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal()
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CreateRulesInternal
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 78
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Creates the rules of this transformation
  example: []
  syntax:
    content: protected void CreateRulesInternal()
    content.vb: Protected Sub CreateRulesInternal()
  overload: NMF.Transformations.Core.Transformation.CreateRulesInternal*
- uid: NMF.Transformations.Core.Transformation.CreateContext
  commentId: M:NMF.Transformations.Core.Transformation.CreateContext
  id: CreateContext
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: CreateContext()
  nameWithType: Transformation.CreateContext()
  fullName: NMF.Transformations.Core.Transformation.CreateContext()
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: CreateContext
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 100
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Creates a new transformation context
  example: []
  syntax:
    content: public virtual ITransformationContext CreateContext()
    return:
      type: NMF.Transformations.Core.ITransformationContext
      description: ''
    content.vb: Public Overridable Function CreateContext() As ITransformationContext
  overload: NMF.Transformations.Core.Transformation.CreateContext*
- uid: NMF.Transformations.Core.Transformation.RegisterRules
  commentId: M:NMF.Transformations.Core.Transformation.RegisterRules
  id: RegisterRules
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: RegisterRules()
  nameWithType: Transformation.RegisterRules()
  fullName: NMF.Transformations.Core.Transformation.RegisterRules()
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: RegisterRules
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 108
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Registers the rules of this transformation
  example: []
  syntax:
    content: public virtual void RegisterRules()
    content.vb: Public Overridable Sub RegisterRules()
  overload: NMF.Transformations.Core.Transformation.RegisterRules*
- uid: NMF.Transformations.Core.Transformation.Initialize
  commentId: M:NMF.Transformations.Core.Transformation.Initialize
  id: Initialize
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: Transformation.Initialize()
  fullName: NMF.Transformations.Core.Transformation.Initialize()
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Initialize
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 126
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Initializes the transformation
  example: []
  syntax:
    content: public virtual void Initialize()
    content.vb: Public Overridable Sub Initialize()
  overload: NMF.Transformations.Core.Transformation.Initialize*
- uid: NMF.Transformations.Core.Transformation.MaxOutputDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxOutputDelay
  id: MaxOutputDelay
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: MaxOutputDelay
  nameWithType: Transformation.MaxOutputDelay
  fullName: NMF.Transformations.Core.Transformation.MaxOutputDelay
  type: Property
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: MaxOutputDelay
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 141
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets the maximum output delay level
  example: []
  syntax:
    content: public virtual byte MaxOutputDelay { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Overridable ReadOnly Property MaxOutputDelay As Byte
  overload: NMF.Transformations.Core.Transformation.MaxOutputDelay*
- uid: NMF.Transformations.Core.Transformation.MaxTransformationDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxTransformationDelay
  id: MaxTransformationDelay
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: MaxTransformationDelay
  nameWithType: Transformation.MaxTransformationDelay
  fullName: NMF.Transformations.Core.Transformation.MaxTransformationDelay
  type: Property
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: MaxTransformationDelay
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 154
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets the maximum transformation delay level
  example: []
  syntax:
    content: public virtual byte MaxTransformationDelay { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public Overridable ReadOnly Property MaxTransformationDelay As Byte
  overload: NMF.Transformations.Core.Transformation.MaxTransformationDelay*
- uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  id: ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: ComputeInstantiatingTransformationRulePath(Computation)
  nameWithType: Transformation.ComputeInstantiatingTransformationRulePath(Computation)
  fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ComputeInstantiatingTransformationRulePath
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 169
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Computes the path of transformation rules for a given input
  example: []
  syntax:
    content: public virtual Stack<GeneralTransformationRule> ComputeInstantiatingTransformationRulePath(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation for which to compute the instantiating rule path
    return:
      type: System.Collections.Generic.Stack{NMF.Transformations.Core.GeneralTransformationRule}
      description: A stack of transformation rules that are involved with the output creation. The top element of the stack should be able to instantiate the output (i.e. must not be abstract)
    content.vb: Public Overridable Function ComputeInstantiatingTransformationRulePath(computation As Computation) As Stack(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath*
- uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  id: GetRuleForRuleType(System.Type)
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: GetRuleForRuleType(Type)
  nameWithType: Transformation.GetRuleForRuleType(Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetRuleForRuleType
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 198
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets the rule with the specified type (exact match)
  remarks: This method assumes there is only one transformation rule per type
  example: []
  syntax:
    content: public virtual GeneralTransformationRule GetRuleForRuleType(Type transformationRule)
    parameters:
    - id: transformationRule
      type: System.Type
      description: The type of the transformation rule
    return:
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule with this type or null, if there is none
    content.vb: Public Overridable Function GetRuleForRuleType(transformationRule As Type) As GeneralTransformationRule
  overload: NMF.Transformations.Core.Transformation.GetRuleForRuleType*
- uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  id: GetRulesForRuleType(System.Type)
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: GetRulesForRuleType(Type)
  nameWithType: Transformation.GetRulesForRuleType(Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetRulesForRuleType
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 209
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets all rules with the specified type (exact match)
  remarks: This method assumes there is only one transformation rule per type
  example: []
  syntax:
    content: public virtual IEnumerable<GeneralTransformationRule> GetRulesForRuleType(Type transformationRule)
    parameters:
    - id: transformationRule
      type: System.Type
      description: The type of the transformation rules
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of all rules with this type
    content.vb: Public Overridable Function GetRulesForRuleType(transformationRule As Type) As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.GetRulesForRuleType*
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  id: GetRulesForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: GetRulesForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetRulesForTypeSignature
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 220
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets all rules that apply the given signature
  example: []
  syntax:
    content: public virtual IEnumerable<GeneralTransformationRule> GetRulesForTypeSignature(Type[] inputTypes, Type outputType)
    parameters:
    - id: inputTypes
      type: System.Type[]
      description: The input argument type list
    - id: outputType
      type: System.Type
      description: The output type
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection with all the rules that have the given signature
    content.vb: Public Overridable Function GetRulesForTypeSignature(inputTypes As Type(), outputType As Type) As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature*
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type)
  name.vb: GetRulesForTypeSignature(Type(), Type)
- uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  id: GetRulesExact(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: GetRulesExact(Type[], Type)
  nameWithType: Transformation.GetRulesExact(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[], System.Type)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetRulesExact
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 236
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets all rules that apply the given signature exactly
  example: []
  syntax:
    content: public virtual IEnumerable<GeneralTransformationRule> GetRulesExact(Type[] input, Type output)
    parameters:
    - id: input
      type: System.Type[]
      description: The input argument type list
    - id: output
      type: System.Type
      description: The output type
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection with all the rules that have the given signature
    content.vb: Public Overridable Function GetRulesExact(input As Type(), output As Type) As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.GetRulesExact*
  nameWithType.vb: Transformation.GetRulesExact(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type(), System.Type)
  name.vb: GetRulesExact(Type(), Type)
- uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  id: GetRuleForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: GetRuleForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRuleForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[], System.Type)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetRuleForTypeSignature
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 248
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets any rules that apply the given signature
  example: []
  syntax:
    content: public virtual GeneralTransformationRule GetRuleForTypeSignature(Type[] inputTypes, Type outputType)
    parameters:
    - id: inputTypes
      type: System.Type[]
      description: The input argument type list
    - id: outputType
      type: System.Type
      description: The output type
    return:
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: A random rule that has the given signature
    content.vb: Public Overridable Function GetRuleForTypeSignature(inputTypes As Type(), outputType As Type) As GeneralTransformationRule
  overload: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature*
  nameWithType.vb: Transformation.GetRuleForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type(), System.Type)
  name.vb: GetRuleForTypeSignature(Type(), Type)
- uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  id: GetRulesForInputTypes(System.Type[])
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: GetRulesForInputTypes(params Type[])
  nameWithType: Transformation.GetRulesForInputTypes(params Type[])
  fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(params System.Type[])
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetRulesForInputTypes
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 263
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets the applicable rules for the given input type signature
  example: []
  syntax:
    content: public virtual IEnumerable<GeneralTransformationRule> GetRulesForInputTypes(params Type[] input)
    parameters:
    - id: input
      type: System.Type[]
      description: The signature of the input types
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of rules that are applicable for this signature
    content.vb: Public Overridable Function GetRulesForInputTypes(ParamArray input As Type()) As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.GetRulesForInputTypes*
  nameWithType.vb: Transformation.GetRulesForInputTypes(ParamArray Type())
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(ParamArray System.Type())
  name.vb: GetRulesForInputTypes(ParamArray Type())
- uid: NMF.Transformations.Core.Transformation.Rules
  commentId: P:NMF.Transformations.Core.Transformation.Rules
  id: Rules
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: Rules
  nameWithType: Transformation.Rules
  fullName: NMF.Transformations.Core.Transformation.Rules
  type: Property
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Rules
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 272
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets a collection of all rules of this transformation
  example: []
  syntax:
    content: public IList<GeneralTransformationRule> Rules { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{NMF.Transformations.Core.GeneralTransformationRule}
    content.vb: Public Property Rules As IList(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.Rules*
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  id: GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  parent: NMF.Transformations.Core.Transformation
  langs:
  - csharp
  - vb
  name: GetRulesForTypeSignature(Type[], Type, bool)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type, bool)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: GetRulesForTypeSignature
    path: src/Transformations/Transformations.Core/Core/GeneralTransformation.cs
    startLine: 281
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: Gets all rules that apply the given signature
  example: []
  syntax:
    content: public IEnumerable<GeneralTransformationRule> GetRulesForTypeSignature(Type[] input, Type output, bool exact)
    parameters:
    - id: input
      type: System.Type[]
      description: The input argument type list
    - id: output
      type: System.Type
      description: The output type
    - id: exact
      type: System.Boolean
      description: A value indicating whether the signatures must match exactly
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection with all the rules that have the given signature
    content.vb: Public Function GetRulesForTypeSignature(input As Type(), output As Type, exact As Boolean) As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature*
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type, Boolean)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type, Boolean)
  name.vb: GetRulesForTypeSignature(Type(), Type, Boolean)
references:
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  href: NMF.html
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core.Transformation.CreateRules*
  commentId: Overload:NMF.Transformations.Core.Transformation.CreateRules
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_CreateRules
  name: CreateRules
  nameWithType: Transformation.CreateRules
  fullName: NMF.Transformations.Core.Transformation.CreateRules
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<GeneralTransformationRule>
  nameWithType: IEnumerable<GeneralTransformationRule>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Core.GeneralTransformationRule>
  nameWithType.vb: IEnumerable(Of GeneralTransformationRule)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: IEnumerable(Of GeneralTransformationRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NMF.Transformations.Core.Transformation.Patterns*
  commentId: Overload:NMF.Transformations.Core.Transformation.Patterns
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_Patterns
  name: Patterns
  nameWithType: Transformation.Patterns
  fullName: NMF.Transformations.Core.Transformation.Patterns
- uid: System.Collections.Generic.ICollection{NMF.Transformations.Core.ITransformationPattern}
  commentId: T:System.Collections.Generic.ICollection{NMF.Transformations.Core.ITransformationPattern}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<ITransformationPattern>
  nameWithType: ICollection<ITransformationPattern>
  fullName: System.Collections.Generic.ICollection<NMF.Transformations.Core.ITransformationPattern>
  nameWithType.vb: ICollection(Of ITransformationPattern)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Transformations.Core.ITransformationPattern)
  name.vb: ICollection(Of ITransformationPattern)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: NMF.Transformations.Core.ITransformationPattern
    name: ITransformationPattern
    href: NMF.Transformations.Core.ITransformationPattern.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationPattern
    name: ITransformationPattern
    href: NMF.Transformations.Core.ITransformationPattern.html
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.Core.Transformation.IsInitialized*
  commentId: Overload:NMF.Transformations.Core.Transformation.IsInitialized
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_IsInitialized
  name: IsInitialized
  nameWithType: Transformation.IsInitialized
  fullName: NMF.Transformations.Core.Transformation.IsInitialized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Transformations.Core.Transformation.IsRulesRegistered*
  commentId: Overload:NMF.Transformations.Core.Transformation.IsRulesRegistered
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_IsRulesRegistered
  name: IsRulesRegistered
  nameWithType: Transformation.IsRulesRegistered
  fullName: NMF.Transformations.Core.Transformation.IsRulesRegistered
- uid: NMF.Transformations.Core.Transformation.CreateRulesInternal*
  commentId: Overload:NMF.Transformations.Core.Transformation.CreateRulesInternal
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_CreateRulesInternal
  name: CreateRulesInternal
  nameWithType: Transformation.CreateRulesInternal
  fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal
- uid: NMF.Transformations.Core.Transformation.CreateContext*
  commentId: Overload:NMF.Transformations.Core.Transformation.CreateContext
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_CreateContext
  name: CreateContext
  nameWithType: Transformation.CreateContext
  fullName: NMF.Transformations.Core.Transformation.CreateContext
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.ITransformationContext.html
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: NMF.Transformations.Core.Transformation.RegisterRules*
  commentId: Overload:NMF.Transformations.Core.Transformation.RegisterRules
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_RegisterRules
  name: RegisterRules
  nameWithType: Transformation.RegisterRules
  fullName: NMF.Transformations.Core.Transformation.RegisterRules
- uid: NMF.Transformations.Core.Transformation.Initialize*
  commentId: Overload:NMF.Transformations.Core.Transformation.Initialize
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_Initialize
  name: Initialize
  nameWithType: Transformation.Initialize
  fullName: NMF.Transformations.Core.Transformation.Initialize
- uid: NMF.Transformations.Core.Transformation.MaxOutputDelay*
  commentId: Overload:NMF.Transformations.Core.Transformation.MaxOutputDelay
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_MaxOutputDelay
  name: MaxOutputDelay
  nameWithType: Transformation.MaxOutputDelay
  fullName: NMF.Transformations.Core.Transformation.MaxOutputDelay
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: NMF.Transformations.Core.Transformation.MaxTransformationDelay*
  commentId: Overload:NMF.Transformations.Core.Transformation.MaxTransformationDelay
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_MaxTransformationDelay
  name: MaxTransformationDelay
  nameWithType: Transformation.MaxTransformationDelay
  fullName: NMF.Transformations.Core.Transformation.MaxTransformationDelay
- uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath*
  commentId: Overload:NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_ComputeInstantiatingTransformationRulePath_NMF_Transformations_Core_Computation_
  name: ComputeInstantiatingTransformationRulePath
  nameWithType: Transformation.ComputeInstantiatingTransformationRulePath
  fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.Computation.html
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: System.Collections.Generic.Stack{NMF.Transformations.Core.GeneralTransformationRule}
  commentId: T:System.Collections.Generic.Stack{NMF.Transformations.Core.GeneralTransformationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Stack`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  name: Stack<GeneralTransformationRule>
  nameWithType: Stack<GeneralTransformationRule>
  fullName: System.Collections.Generic.Stack<NMF.Transformations.Core.GeneralTransformationRule>
  nameWithType.vb: Stack(Of GeneralTransformationRule)
  fullName.vb: System.Collections.Generic.Stack(Of NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: Stack(Of GeneralTransformationRule)
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: <
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
- uid: System.Collections.Generic.Stack`1
  commentId: T:System.Collections.Generic.Stack`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  name: Stack<T>
  nameWithType: Stack<T>
  fullName: System.Collections.Generic.Stack<T>
  nameWithType.vb: Stack(Of T)
  fullName.vb: System.Collections.Generic.Stack(Of T)
  name.vb: Stack(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1
    name: Stack
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.stack-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType*
  commentId: Overload:NMF.Transformations.Core.Transformation.GetRuleForRuleType
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_GetRuleForRuleType_System_Type_
  name: GetRuleForRuleType
  nameWithType: Transformation.GetRuleForRuleType
  fullName: NMF.Transformations.Core.Transformation.GetRuleForRuleType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.GeneralTransformationRule.html
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType*
  commentId: Overload:NMF.Transformations.Core.Transformation.GetRulesForRuleType
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_GetRulesForRuleType_System_Type_
  name: GetRulesForRuleType
  nameWithType: Transformation.GetRulesForRuleType
  fullName: NMF.Transformations.Core.Transformation.GetRulesForRuleType
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature*
  commentId: Overload:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_GetRulesForTypeSignature_System_Type___System_Type_
  name: GetRulesForTypeSignature
  nameWithType: Transformation.GetRulesForTypeSignature
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
- uid: System.Type[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
- uid: NMF.Transformations.Core.Transformation.GetRulesExact*
  commentId: Overload:NMF.Transformations.Core.Transformation.GetRulesExact
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_GetRulesExact_System_Type___System_Type_
  name: GetRulesExact
  nameWithType: Transformation.GetRulesExact
  fullName: NMF.Transformations.Core.Transformation.GetRulesExact
- uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature*
  commentId: Overload:NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_GetRuleForTypeSignature_System_Type___System_Type_
  name: GetRuleForTypeSignature
  nameWithType: Transformation.GetRuleForTypeSignature
  fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
- uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes*
  commentId: Overload:NMF.Transformations.Core.Transformation.GetRulesForInputTypes
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_GetRulesForInputTypes_System_Type___
  name: GetRulesForInputTypes
  nameWithType: Transformation.GetRulesForInputTypes
  fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes
- uid: NMF.Transformations.Core.Transformation.Rules*
  commentId: Overload:NMF.Transformations.Core.Transformation.Rules
  href: NMF.Transformations.Core.Transformation.html#NMF_Transformations_Core_Transformation_Rules
  name: Rules
  nameWithType: Transformation.Rules
  fullName: NMF.Transformations.Core.Transformation.Rules
- uid: System.Collections.Generic.IList{NMF.Transformations.Core.GeneralTransformationRule}
  commentId: T:System.Collections.Generic.IList{NMF.Transformations.Core.GeneralTransformationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<GeneralTransformationRule>
  nameWithType: IList<GeneralTransformationRule>
  fullName: System.Collections.Generic.IList<NMF.Transformations.Core.GeneralTransformationRule>
  nameWithType.vb: IList(Of GeneralTransformationRule)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: IList(Of GeneralTransformationRule)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
