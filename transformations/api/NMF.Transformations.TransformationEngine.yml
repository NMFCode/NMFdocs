### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.TransformationEngine
  commentId: T:NMF.Transformations.TransformationEngine
  id: TransformationEngine
  parent: NMF.Transformations
  children:
  - NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  - NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  - NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  - NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  - NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  - NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  - NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  - NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  - NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  - NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  - NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  langs:
  - csharp
  - vb
  name: TransformationEngine
  nameWithType: TransformationEngine
  fullName: NMF.Transformations.TransformationEngine
  type: Class
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationEngine
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 14
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nThis class provides methods to execute transformations\n"
  example: []
  syntax:
    content: public static class TransformationEngine
    content.vb: Public Module TransformationEngine
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.Transformation)
  id: Transform``1(System.Object[],NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TOut>(Object[], Transformation)
  nameWithType: TransformationEngine.Transform<TOut>(Object[], Transformation)
  fullName: NMF.Transformations.TransformationEngine.Transform<TOut>(System.Object[], NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 24
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TOut>(object[] input, Transformation transformation)

          where TOut : class
    parameters:
    - id: input
      type: System.Object[]
      description: The input parameter
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TOut As Class)(input As Object(), transformation As Transformation) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TOut)(Object(), Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TOut)(System.Object(), NMF.Transformations.Core.Transformation)
  name.vb: Transform(Of TOut)(Object(), Transformation)
- uid: NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.Transformation)
  id: TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TOut>(IEnumerable<Object[]>, Type[], Transformation)
  nameWithType: TransformationEngine.TransformMany<TOut>(IEnumerable<Object[]>, Type[], Transformation)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TOut>(System.Collections.Generic.IEnumerable<System.Object[]>, System.Type[], NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 39
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TOut>(IEnumerable<object[]> inputs, Type[] types, Transformation transformation)

          where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Object[]}
      description: The input parameters
    - id: types
      type: System.Type[]
      description: The types of the elements within the collection refered to in the inputs parameter
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TOut As Class)(inputs As IEnumerable(Of Object()), types As Type(), transformation As Transformation) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TOut)(IEnumerable(Of Object()), Type(), Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TOut)(System.Collections.Generic.IEnumerable(Of System.Object()), System.Type(), NMF.Transformations.Core.Transformation)
  name.vb: TransformMany(Of TOut)(IEnumerable(Of Object()), Type(), Transformation)
- uid: NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext)
  id: Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TOut>(Object[], ITransformationEngineContext)
  nameWithType: TransformationEngine.Transform<TOut>(Object[], ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.Transform<TOut>(System.Object[], NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 53
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TOut>(object[] input, ITransformationEngineContext context)

          where TOut : class
    parameters:
    - id: input
      type: System.Object[]
      description: The input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    typeParameters:
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TOut As Class)(input As Object(), context As ITransformationEngineContext) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TOut)(Object(), ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TOut)(System.Object(), NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: Transform(Of TOut)(Object(), ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext)
  id: TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TOut>(IEnumerable<Object[]>, Type[], ITransformationEngineContext)
  nameWithType: TransformationEngine.TransformMany<TOut>(IEnumerable<Object[]>, Type[], ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TOut>(System.Collections.Generic.IEnumerable<System.Object[]>, System.Type[], NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 67
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TOut>(IEnumerable<object[]> inputs, Type[] types, ITransformationEngineContext context)

          where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Object[]}
      description: The input parameters
    - id: types
      type: System.Type[]
      description: The types of the elements within the collection refered to in the inputs parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    typeParameters:
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TOut As Class)(inputs As IEnumerable(Of Object()), types As Type(), context As ITransformationEngineContext) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TOut)(IEnumerable(Of Object()), Type(), ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TOut)(System.Collections.Generic.IEnumerable(Of System.Object()), System.Type(), NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: TransformMany(Of TOut)(IEnumerable(Of Object()), Type(), ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.TransformationEngine.Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  id: Transform``1(System.Object[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TOut>(Object[], ITransformationEngineContext, GeneralTransformationRule)
  nameWithType: TransformationEngine.Transform<TOut>(Object[], ITransformationEngineContext, GeneralTransformationRule)
  fullName: NMF.Transformations.TransformationEngine.Transform<TOut>(System.Object[], NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.Core.GeneralTransformationRule)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 81
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TOut>(object[] input, ITransformationEngineContext context, GeneralTransformationRule startRule)

          where TOut : class
    parameters:
    - id: input
      type: System.Object[]
      description: The input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    - id: startRule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TOut As Class)(input As Object(), context As ITransformationEngineContext, startRule As GeneralTransformationRule) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TOut)(Object(), ITransformationEngineContext, GeneralTransformationRule)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TOut)(System.Object(), NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: Transform(Of TOut)(Object(), ITransformationEngineContext, GeneralTransformationRule)
- uid: NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  id: TransformMany``1(System.Collections.Generic.IEnumerable{System.Object[]},System.Type[],NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TOut>(IEnumerable<Object[]>, Type[], ITransformationEngineContext, GeneralTransformationRule)
  nameWithType: TransformationEngine.TransformMany<TOut>(IEnumerable<Object[]>, Type[], ITransformationEngineContext, GeneralTransformationRule)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TOut>(System.Collections.Generic.IEnumerable<System.Object[]>, System.Type[], NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.Core.GeneralTransformationRule)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 117
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TOut>(IEnumerable<object[]> inputs, Type[] types, ITransformationEngineContext context, GeneralTransformationRule startRule)

          where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Object[]}
      description: The input parameters
    - id: types
      type: System.Type[]
      description: The types of the elements within the collection refered to in the inputs parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    - id: startRule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TOut As Class)(inputs As IEnumerable(Of Object()), types As Type(), context As ITransformationEngineContext, startRule As GeneralTransformationRule) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TOut)(IEnumerable(Of Object()), Type(), ITransformationEngineContext, GeneralTransformationRule)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TOut)(System.Collections.Generic.IEnumerable(Of System.Object()), System.Type(), NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: TransformMany(Of TOut)(IEnumerable(Of Object()), Type(), ITransformationEngineContext, GeneralTransformationRule)
- uid: NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.Transformation)
  id: Transform``3(``0,``1,NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TIn1, TIn2, TOut>(TIn1, TIn2, Transformation)
  nameWithType: TransformationEngine.Transform<TIn1, TIn2, TOut>(TIn1, TIn2, Transformation)
  fullName: NMF.Transformations.TransformationEngine.Transform<TIn1, TIn2, TOut>(TIn1, TIn2, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 146
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input arguments into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TIn1, TIn2, TOut>(TIn1 input1, TIn2 input2, Transformation transformation)

          where TIn1 : class where TIn2 : class where TOut : class
    parameters:
    - id: input1
      type: '{TIn1}'
      description: The first input parameter
    - id: input2
      type: '{TIn2}'
      description: The second input parameter
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TIn1 As Class, TIn2 As Class, TOut As Class)(input1 As TIn1, input2 As TIn2, transformation As Transformation) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, NMF.Transformations.Core.Transformation)
  name.vb: Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, Transformation)
- uid: NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  id: TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>>, Transformation)
  nameWithType: TransformationEngine.TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>>, Transformation)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TIn1, TIn2, TOut>(System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 164
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input arguments into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>> inputs, Transformation transformation)

          where TIn1 : class where TIn2 : class where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}
      description: The input parameters
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TIn1 As Class, TIn2 As Class, TOut As Class)(inputs As IEnumerable(Of Tuple(Of TIn1, TIn2)), transformation As Transformation) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TIn1, TIn2, TOut)(IEnumerable(Of Tuple(Of TIn1, TIn2)), Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TIn1, TIn2, TOut)(System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)), NMF.Transformations.Core.Transformation)
  name.vb: TransformMany(Of TIn1, TIn2, TOut)(IEnumerable(Of Tuple(Of TIn1, TIn2)), Transformation)
- uid: NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  id: Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TIn1, TIn2, TOut>(TIn1, TIn2, ITransformationEngineContext)
  nameWithType: TransformationEngine.Transform<TIn1, TIn2, TOut>(TIn1, TIn2, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.Transform<TIn1, TIn2, TOut>(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 183
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input arguments into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TIn1, TIn2, TOut>(TIn1 input1, TIn2 input2, ITransformationEngineContext context)

          where TIn1 : class where TIn2 : class where TOut : class
    parameters:
    - id: input1
      type: '{TIn1}'
      description: The first input parameter
    - id: input2
      type: '{TIn2}'
      description: The second input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TIn1 As Class, TIn2 As Class, TOut As Class)(input1 As TIn1, input2 As TIn2, context As ITransformationEngineContext) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  id: TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext)
  nameWithType: TransformationEngine.TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TIn1, TIn2, TOut>(System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 200
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input arguments into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>> inputs, ITransformationEngineContext context)

          where TIn1 : class where TIn2 : class where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}
      description: The input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TIn1 As Class, TIn2 As Class, TOut As Class)(inputs As IEnumerable(Of Tuple(Of TIn1, TIn2)), context As ITransformationEngineContext) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TIn1, TIn2, TOut)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TIn1, TIn2, TOut)(System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)), NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: TransformMany(Of TIn1, TIn2, TOut)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  commentId: M:NMF.Transformations.TransformationEngine.Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  id: Transform``3(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TIn1, TIn2, TOut>(TIn1, TIn2, ITransformationEngineContext, TransformationRuleBase<TIn1, TIn2, TOut>)
  nameWithType: TransformationEngine.Transform<TIn1, TIn2, TOut>(TIn1, TIn2, ITransformationEngineContext, TransformationRuleBase<TIn1, TIn2, TOut>)
  fullName: NMF.Transformations.TransformationEngine.Transform<TIn1, TIn2, TOut>(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 219
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input arguments into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TIn1, TIn2, TOut>(TIn1 input1, TIn2 input2, ITransformationEngineContext context, TransformationRuleBase<TIn1, TIn2, TOut> startRule)

          where TIn1 : class where TIn2 : class where TOut : class
    parameters:
    - id: input1
      type: '{TIn1}'
      description: The first input parameter
    - id: input2
      type: '{TIn2}'
      description: The second input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    - id: startRule
      type: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TIn1 As Class, TIn2 As Class, TOut As Class)(input1 As TIn1, input2 As TIn2, context As ITransformationEngineContext, startRule As TransformationRuleBase(Of TIn1, TIn2, TOut)) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, ITransformationEngineContext, TransformationRuleBase(Of TIn1, TIn2, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut))
  name.vb: Transform(Of TIn1, TIn2, TOut)(TIn1, TIn2, ITransformationEngineContext, TransformationRuleBase(Of TIn1, TIn2, TOut))
- uid: NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  id: TransformMany``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext, TransformationRuleBase<TIn1, TIn2, TOut>)
  nameWithType: TransformationEngine.TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext, TransformationRuleBase<TIn1, TIn2, TOut>)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TIn1, TIn2, TOut>(System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 248
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input arguments into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TIn1, TIn2, TOut>(IEnumerable<Tuple<TIn1, TIn2>> inputs, ITransformationEngineContext context, TransformationRuleBase<TIn1, TIn2, TOut> startRule)

          where TIn1 : class where TIn2 : class where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}
      description: The first input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    - id: startRule
      type: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TIn1 As Class, TIn2 As Class, TOut As Class)(inputs As IEnumerable(Of Tuple(Of TIn1, TIn2)), context As ITransformationEngineContext, startRule As TransformationRuleBase(Of TIn1, TIn2, TOut)) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TIn1, TIn2, TOut)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext, TransformationRuleBase(Of TIn1, TIn2, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TIn1, TIn2, TOut)(System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)), NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut))
  name.vb: TransformMany(Of TIn1, TIn2, TOut)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext, TransformationRuleBase(Of TIn1, TIn2, TOut))
- uid: NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.Transformation)
  id: Process``2(``0,``1,NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Process<TIn1, TIn2>(TIn1, TIn2, Transformation)
  nameWithType: TransformationEngine.Process<TIn1, TIn2>(TIn1, TIn2, Transformation)
  fullName: NMF.Transformations.TransformationEngine.Process<TIn1, TIn2>(TIn1, TIn2, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Process
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 275
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input arguments using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void Process<TIn1, TIn2>(TIn1 input1, TIn2 input2, Transformation transformation)

          where TIn1 : class where TIn2 : class
    parameters:
    - id: input1
      type: '{TIn1}'
      description: The first input parameter
    - id: input2
      type: '{TIn2}'
      description: The second input parameter
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    content.vb: Public Shared Sub Process(Of TIn1 As Class, TIn2 As Class)(input1 As TIn1, input2 As TIn2, transformation As Transformation)
  overload: NMF.Transformations.TransformationEngine.Process*
  nameWithType.vb: TransformationEngine.Process(Of TIn1, TIn2)(TIn1, TIn2, Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Process(Of TIn1, TIn2)(TIn1, TIn2, NMF.Transformations.Core.Transformation)
  name.vb: Process(Of TIn1, TIn2)(TIn1, TIn2, Transformation)
- uid: NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  id: ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>>, Transformation)
  nameWithType: TransformationEngine.ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>>, Transformation)
  fullName: NMF.Transformations.TransformationEngine.ProcessMany<TIn1, TIn2>(System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ProcessMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 290
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input arguments using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>> inputs, Transformation transformation)

          where TIn1 : class where TIn2 : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}
      description: The input parameters
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    content.vb: Public Shared Sub ProcessMany(Of TIn1 As Class, TIn2 As Class)(inputs As IEnumerable(Of Tuple(Of TIn1, TIn2)), transformation As Transformation)
  overload: NMF.Transformations.TransformationEngine.ProcessMany*
  nameWithType.vb: TransformationEngine.ProcessMany(Of TIn1, TIn2)(IEnumerable(Of Tuple(Of TIn1, TIn2)), Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.ProcessMany(Of TIn1, TIn2)(System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)), NMF.Transformations.Core.Transformation)
  name.vb: ProcessMany(Of TIn1, TIn2)(IEnumerable(Of Tuple(Of TIn1, TIn2)), Transformation)
- uid: NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  id: Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Process<TIn1, TIn2>(TIn1, TIn2, ITransformationEngineContext)
  nameWithType: TransformationEngine.Process<TIn1, TIn2>(TIn1, TIn2, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.Process<TIn1, TIn2>(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Process
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 306
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input arguments using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void Process<TIn1, TIn2>(TIn1 input1, TIn2 input2, ITransformationEngineContext context)

          where TIn1 : class where TIn2 : class
    parameters:
    - id: input1
      type: '{TIn1}'
      description: The first input parameter
    - id: input2
      type: '{TIn2}'
      description: The second input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    content.vb: Public Shared Sub Process(Of TIn1 As Class, TIn2 As Class)(input1 As TIn1, input2 As TIn2, context As ITransformationEngineContext)
  overload: NMF.Transformations.TransformationEngine.Process*
  nameWithType.vb: TransformationEngine.Process(Of TIn1, TIn2)(TIn1, TIn2, ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Process(Of TIn1, TIn2)(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: Process(Of TIn1, TIn2)(TIn1, TIn2, ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  id: ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext)
  nameWithType: TransformationEngine.ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.ProcessMany<TIn1, TIn2>(System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ProcessMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 320
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input arguments using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>> inputs, ITransformationEngineContext context)

          where TIn1 : class where TIn2 : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}
      description: The input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    content.vb: Public Shared Sub ProcessMany(Of TIn1 As Class, TIn2 As Class)(inputs As IEnumerable(Of Tuple(Of TIn1, TIn2)), context As ITransformationEngineContext)
  overload: NMF.Transformations.TransformationEngine.ProcessMany*
  nameWithType.vb: TransformationEngine.ProcessMany(Of TIn1, TIn2)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.ProcessMany(Of TIn1, TIn2)(System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)), NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: ProcessMany(Of TIn1, TIn2)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  commentId: M:NMF.Transformations.TransformationEngine.Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  id: Process``2(``0,``1,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Process<TIn1, TIn2>(TIn1, TIn2, ITransformationEngineContext, GeneralTransformationRule<TIn1, TIn2>)
  nameWithType: TransformationEngine.Process<TIn1, TIn2>(TIn1, TIn2, ITransformationEngineContext, GeneralTransformationRule<TIn1, TIn2>)
  fullName: NMF.Transformations.TransformationEngine.Process<TIn1, TIn2>(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Process
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 336
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input arguments using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void Process<TIn1, TIn2>(TIn1 input1, TIn2 input2, ITransformationEngineContext context, GeneralTransformationRule<TIn1, TIn2> startRule)

          where TIn1 : class where TIn2 : class
    parameters:
    - id: input1
      type: '{TIn1}'
      description: The first input parameter
    - id: input2
      type: '{TIn2}'
      description: The second input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    - id: startRule
      type: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    content.vb: Public Shared Sub Process(Of TIn1 As Class, TIn2 As Class)(input1 As TIn1, input2 As TIn2, context As ITransformationEngineContext, startRule As GeneralTransformationRule(Of TIn1, TIn2))
  overload: NMF.Transformations.TransformationEngine.Process*
  nameWithType.vb: TransformationEngine.Process(Of TIn1, TIn2)(TIn1, TIn2, ITransformationEngineContext, GeneralTransformationRule(Of TIn1, TIn2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Process(Of TIn1, TIn2)(TIn1, TIn2, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2))
  name.vb: Process(Of TIn1, TIn2)(TIn1, TIn2, ITransformationEngineContext, GeneralTransformationRule(Of TIn1, TIn2))
- uid: NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  commentId: M:NMF.Transformations.TransformationEngine.ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  id: ProcessMany``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0,``1})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext, GeneralTransformationRule<TIn1, TIn2>)
  nameWithType: TransformationEngine.ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>>, ITransformationEngineContext, GeneralTransformationRule<TIn1, TIn2>)
  fullName: NMF.Transformations.TransformationEngine.ProcessMany<TIn1, TIn2>(System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ProcessMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 368
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input arguments using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void ProcessMany<TIn1, TIn2>(IEnumerable<Tuple<TIn1, TIn2>> inputs, ITransformationEngineContext context, GeneralTransformationRule<TIn1, TIn2> startRule)

          where TIn1 : class where TIn2 : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}
      description: The input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    - id: startRule
      type: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn1
      description: The type of the first input argument
    - id: TIn2
      description: The type of the second input argument
    content.vb: Public Shared Sub ProcessMany(Of TIn1 As Class, TIn2 As Class)(inputs As IEnumerable(Of Tuple(Of TIn1, TIn2)), context As ITransformationEngineContext, startRule As GeneralTransformationRule(Of TIn1, TIn2))
  overload: NMF.Transformations.TransformationEngine.ProcessMany*
  nameWithType.vb: TransformationEngine.ProcessMany(Of TIn1, TIn2)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext, GeneralTransformationRule(Of TIn1, TIn2))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.ProcessMany(Of TIn1, TIn2)(System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2)), NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2))
  name.vb: ProcessMany(Of TIn1, TIn2)(IEnumerable(Of Tuple(Of TIn1, TIn2)), ITransformationEngineContext, GeneralTransformationRule(Of TIn1, TIn2))
- uid: NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.Transformation)
  id: Transform``2(``0,NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TIn, TOut>(TIn, Transformation)
  nameWithType: TransformationEngine.Transform<TIn, TOut>(TIn, Transformation)
  fullName: NMF.Transformations.TransformationEngine.Transform<TIn, TOut>(TIn, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 395
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TIn, TOut>(TIn input, Transformation transformation)

          where TIn : class where TOut : class
    parameters:
    - id: input
      type: '{TIn}'
      description: The input parameter
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn
      description: The type of the input argument
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TIn As Class, TOut As Class)(input As TIn, transformation As Transformation) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TIn, TOut)(TIn, Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TIn, TOut)(TIn, NMF.Transformations.Core.Transformation)
  name.vb: Transform(Of TIn, TOut)(TIn, Transformation)
- uid: NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  id: TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TIn, TOut>(IEnumerable<TIn>, Transformation)
  nameWithType: TransformationEngine.TransformMany<TIn, TOut>(IEnumerable<TIn>, Transformation)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TIn, TOut>(System.Collections.Generic.IEnumerable<TIn>, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 411
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TIn, TOut>(IEnumerable<TIn> inputs, Transformation transformation)

          where TIn : class where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{{TIn}}
      description: The input parameters
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn
      description: The type of the input argument
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TIn As Class, TOut As Class)(inputs As IEnumerable(Of TIn), transformation As Transformation) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TIn, TOut)(IEnumerable(Of TIn), Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TIn, TOut)(System.Collections.Generic.IEnumerable(Of TIn), NMF.Transformations.Core.Transformation)
  name.vb: TransformMany(Of TIn, TOut)(IEnumerable(Of TIn), Transformation)
- uid: NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext)
  id: Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TIn, TOut>(TIn, ITransformationEngineContext)
  nameWithType: TransformationEngine.Transform<TIn, TOut>(TIn, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.Transform<TIn, TOut>(TIn, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 427
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TIn, TOut>(TIn input, ITransformationEngineContext context)

          where TIn : class where TOut : class
    parameters:
    - id: input
      type: '{TIn}'
      description: The input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    typeParameters:
    - id: TIn
      description: The type of the input argument
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TIn As Class, TOut As Class)(input As TIn, context As ITransformationEngineContext) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TIn, TOut)(TIn, ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TIn, TOut)(TIn, NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: Transform(Of TIn, TOut)(TIn, ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  id: TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TIn, TOut>(IEnumerable<TIn>, ITransformationEngineContext)
  nameWithType: TransformationEngine.TransformMany<TIn, TOut>(IEnumerable<TIn>, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TIn, TOut>(System.Collections.Generic.IEnumerable<TIn>, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 442
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TIn, TOut>(IEnumerable<TIn> inputs, ITransformationEngineContext context)

          where TIn : class where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{{TIn}}
      description: The input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    typeParameters:
    - id: TIn
      description: The type of the input argument
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TIn As Class, TOut As Class)(inputs As IEnumerable(Of TIn), context As ITransformationEngineContext) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TIn, TOut)(IEnumerable(Of TIn), ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TIn, TOut)(System.Collections.Generic.IEnumerable(Of TIn), NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: TransformMany(Of TIn, TOut)(IEnumerable(Of TIn), ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  commentId: M:NMF.Transformations.TransformationEngine.Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  id: Transform``2(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Transform<TIn, TOut>(TIn, ITransformationEngineContext, TransformationRuleBase<TIn, TOut>)
  nameWithType: TransformationEngine.Transform<TIn, TOut>(TIn, ITransformationEngineContext, TransformationRuleBase<TIn, TOut>)
  fullName: NMF.Transformations.TransformationEngine.Transform<TIn, TOut>(TIn, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase<TIn, TOut>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 458
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static TOut Transform<TIn, TOut>(TIn input, ITransformationEngineContext context, TransformationRuleBase<TIn, TOut> startRule)

          where TIn : class where TOut : class
    parameters:
    - id: input
      type: '{TIn}'
      description: The input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    - id: startRule
      type: NMF.Transformations.TransformationRuleBase{{TIn},{TOut}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn
      description: The type of the input argument
    - id: TOut
      description: The desired output type
    return:
      type: '{TOut}'
      description: The output from the transformation
    content.vb: Public Shared Function Transform(Of TIn As Class, TOut As Class)(input As TIn, context As ITransformationEngineContext, startRule As TransformationRuleBase(Of TIn, TOut)) As TOut
  overload: NMF.Transformations.TransformationEngine.Transform*
  nameWithType.vb: TransformationEngine.Transform(Of TIn, TOut)(TIn, ITransformationEngineContext, TransformationRuleBase(Of TIn, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Transform(Of TIn, TOut)(TIn, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase(Of TIn, TOut))
  name.vb: Transform(Of TIn, TOut)(TIn, ITransformationEngineContext, TransformationRuleBase(Of TIn, TOut))
- uid: NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  commentId: M:NMF.Transformations.TransformationEngine.TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  id: TransformMany``2(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.TransformationRuleBase{``0,``1})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: TransformMany<TIn, TOut>(IEnumerable<TIn>, ITransformationEngineContext, TransformationRuleBase<TIn, TOut>)
  nameWithType: TransformationEngine.TransformMany<TIn, TOut>(IEnumerable<TIn>, ITransformationEngineContext, TransformationRuleBase<TIn, TOut>)
  fullName: NMF.Transformations.TransformationEngine.TransformMany<TIn, TOut>(System.Collections.Generic.IEnumerable<TIn>, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase<TIn, TOut>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 486
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nTransforms the input argument into an output using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TOut> TransformMany<TIn, TOut>(IEnumerable<TIn> inputs, ITransformationEngineContext context, TransformationRuleBase<TIn, TOut> startRule)

          where TIn : class where TOut : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{{TIn}}
      description: The input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null).
    - id: startRule
      type: NMF.Transformations.TransformationRuleBase{{TIn},{TOut}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn
      description: The type of the input argument
    - id: TOut
      description: The desired output type
    return:
      type: System.Collections.Generic.IEnumerable{{TOut}}
      description: The output from the transformation
    content.vb: Public Shared Function TransformMany(Of TIn As Class, TOut As Class)(inputs As IEnumerable(Of TIn), context As ITransformationEngineContext, startRule As TransformationRuleBase(Of TIn, TOut)) As IEnumerable(Of TOut)
  overload: NMF.Transformations.TransformationEngine.TransformMany*
  nameWithType.vb: TransformationEngine.TransformMany(Of TIn, TOut)(IEnumerable(Of TIn), ITransformationEngineContext, TransformationRuleBase(Of TIn, TOut))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.TransformMany(Of TIn, TOut)(System.Collections.Generic.IEnumerable(Of TIn), NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.TransformationRuleBase(Of TIn, TOut))
  name.vb: TransformMany(Of TIn, TOut)(IEnumerable(Of TIn), ITransformationEngineContext, TransformationRuleBase(Of TIn, TOut))
- uid: NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.Transformation)
  id: Process``1(``0,NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Process<TIn>(TIn, Transformation)
  nameWithType: TransformationEngine.Process<TIn>(TIn, Transformation)
  fullName: NMF.Transformations.TransformationEngine.Process<TIn>(TIn, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Process
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 511
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input argument using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void Process<TIn>(TIn input, Transformation transformation)

          where TIn : class
    parameters:
    - id: input
      type: '{TIn}'
      description: The input parameter
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public Shared Sub Process(Of TIn As Class)(input As TIn, transformation As Transformation)
  overload: NMF.Transformations.TransformationEngine.Process*
  nameWithType.vb: TransformationEngine.Process(Of TIn)(TIn, Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Process(Of TIn)(TIn, NMF.Transformations.Core.Transformation)
  name.vb: Process(Of TIn)(TIn, Transformation)
- uid: NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  commentId: M:NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  id: ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.Transformation)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: ProcessMany<TIn>(IEnumerable<TIn>, Transformation)
  nameWithType: TransformationEngine.ProcessMany<TIn>(IEnumerable<TIn>, Transformation)
  fullName: NMF.Transformations.TransformationEngine.ProcessMany<TIn>(System.Collections.Generic.IEnumerable<TIn>, NMF.Transformations.Core.Transformation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ProcessMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 524
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input argument using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void ProcessMany<TIn>(IEnumerable<TIn> inputs, Transformation transformation)

          where TIn : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{{TIn}}
      description: The input parameter
    - id: transformation
      type: NMF.Transformations.Core.Transformation
      description: The transformation that shall be used for this operation (must not be null, but can be uninitialized)
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public Shared Sub ProcessMany(Of TIn As Class)(inputs As IEnumerable(Of TIn), transformation As Transformation)
  overload: NMF.Transformations.TransformationEngine.ProcessMany*
  nameWithType.vb: TransformationEngine.ProcessMany(Of TIn)(IEnumerable(Of TIn), Transformation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.ProcessMany(Of TIn)(System.Collections.Generic.IEnumerable(Of TIn), NMF.Transformations.Core.Transformation)
  name.vb: ProcessMany(Of TIn)(IEnumerable(Of TIn), Transformation)
- uid: NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext)
  id: Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Process<TIn>(TIn, ITransformationEngineContext)
  nameWithType: TransformationEngine.Process<TIn>(TIn, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.Process<TIn>(TIn, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Process
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 537
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input argument using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void Process<TIn>(TIn input, ITransformationEngineContext context)

          where TIn : class
    parameters:
    - id: input
      type: '{TIn}'
      description: The input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public Shared Sub Process(Of TIn As Class)(input As TIn, context As ITransformationEngineContext)
  overload: NMF.Transformations.TransformationEngine.Process*
  nameWithType.vb: TransformationEngine.Process(Of TIn)(TIn, ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Process(Of TIn)(TIn, NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: Process(Of TIn)(TIn, ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  commentId: M:NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  id: ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext)
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: ProcessMany<TIn>(IEnumerable<TIn>, ITransformationEngineContext)
  nameWithType: TransformationEngine.ProcessMany<TIn>(IEnumerable<TIn>, ITransformationEngineContext)
  fullName: NMF.Transformations.TransformationEngine.ProcessMany<TIn>(System.Collections.Generic.IEnumerable<TIn>, NMF.Transformations.Core.ITransformationEngineContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ProcessMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 549
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input argument using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void ProcessMany<TIn>(IEnumerable<TIn> inputs, ITransformationEngineContext context)

          where TIn : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{{TIn}}
      description: The input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public Shared Sub ProcessMany(Of TIn As Class)(inputs As IEnumerable(Of TIn), context As ITransformationEngineContext)
  overload: NMF.Transformations.TransformationEngine.ProcessMany*
  nameWithType.vb: TransformationEngine.ProcessMany(Of TIn)(IEnumerable(Of TIn), ITransformationEngineContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.ProcessMany(Of TIn)(System.Collections.Generic.IEnumerable(Of TIn), NMF.Transformations.Core.ITransformationEngineContext)
  name.vb: ProcessMany(Of TIn)(IEnumerable(Of TIn), ITransformationEngineContext)
- uid: NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  commentId: M:NMF.Transformations.TransformationEngine.Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  id: Process``1(``0,NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: Process<TIn>(TIn, ITransformationEngineContext, GeneralTransformationRule<TIn>)
  nameWithType: TransformationEngine.Process<TIn>(TIn, ITransformationEngineContext, GeneralTransformationRule<TIn>)
  fullName: NMF.Transformations.TransformationEngine.Process<TIn>(TIn, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule<TIn>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Process
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 562
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input argument using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void Process<TIn>(TIn input, ITransformationEngineContext context, GeneralTransformationRule<TIn> startRule)

          where TIn : class
    parameters:
    - id: input
      type: '{TIn}'
      description: The input parameter
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    - id: startRule
      type: NMF.Transformations.GeneralTransformationRule{{TIn}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public Shared Sub Process(Of TIn As Class)(input As TIn, context As ITransformationEngineContext, startRule As GeneralTransformationRule(Of TIn))
  overload: NMF.Transformations.TransformationEngine.Process*
  nameWithType.vb: TransformationEngine.Process(Of TIn)(TIn, ITransformationEngineContext, GeneralTransformationRule(Of TIn))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.Process(Of TIn)(TIn, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule(Of TIn))
  name.vb: Process(Of TIn)(TIn, ITransformationEngineContext, GeneralTransformationRule(Of TIn))
- uid: NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  commentId: M:NMF.Transformations.TransformationEngine.ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  id: ProcessMany``1(System.Collections.Generic.IEnumerable{``0},NMF.Transformations.Core.ITransformationEngineContext,NMF.Transformations.GeneralTransformationRule{``0})
  parent: NMF.Transformations.TransformationEngine
  langs:
  - csharp
  - vb
  name: ProcessMany<TIn>(IEnumerable<TIn>, ITransformationEngineContext, GeneralTransformationRule<TIn>)
  nameWithType: TransformationEngine.ProcessMany<TIn>(IEnumerable<TIn>, ITransformationEngineContext, GeneralTransformationRule<TIn>)
  fullName: NMF.Transformations.TransformationEngine.ProcessMany<TIn>(System.Collections.Generic.IEnumerable<TIn>, NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule<TIn>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/TransformationEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ProcessMany
    path: src/Transformations/Transformations/NTL/TransformationEngine.cs
    startLine: 587
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nProcesses the input argument using the provided transformation\n"
  example: []
  syntax:
    content: >-
      public static void ProcessMany<TIn>(IEnumerable<TIn> inputs, ITransformationEngineContext context, GeneralTransformationRule<TIn> startRule)

          where TIn : class
    parameters:
    - id: inputs
      type: System.Collections.Generic.IEnumerable{{TIn}}
      description: The input parameters
    - id: context
      type: NMF.Transformations.Core.ITransformationEngineContext
      description: The context that should be used (must not be null)
    - id: startRule
      type: NMF.Transformations.GeneralTransformationRule{{TIn}}
      description: The rule that should be started with. If this is null, an applicable rule is found.
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public Shared Sub ProcessMany(Of TIn As Class)(inputs As IEnumerable(Of TIn), context As ITransformationEngineContext, startRule As GeneralTransformationRule(Of TIn))
  overload: NMF.Transformations.TransformationEngine.ProcessMany*
  nameWithType.vb: TransformationEngine.ProcessMany(Of TIn)(IEnumerable(Of TIn), ITransformationEngineContext, GeneralTransformationRule(Of TIn))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Transformations.TransformationEngine.ProcessMany(Of TIn)(System.Collections.Generic.IEnumerable(Of TIn), NMF.Transformations.Core.ITransformationEngineContext, NMF.Transformations.GeneralTransformationRule(Of TIn))
  name.vb: ProcessMany(Of TIn)(IEnumerable(Of TIn), ITransformationEngineContext, GeneralTransformationRule(Of TIn))
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.TransformationEngine.Transform*
  commentId: Overload:NMF.Transformations.TransformationEngine.Transform
  name: Transform
  nameWithType: TransformationEngine.Transform
  fullName: NMF.Transformations.TransformationEngine.Transform
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  parent: NMF.Transformations.Core
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
- uid: '{TOut}'
  commentId: '!:TOut'
  definition: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: NMF.Transformations.TransformationEngine.TransformMany*
  commentId: Overload:NMF.Transformations.TransformationEngine.TransformMany
  name: TransformMany
  nameWithType: TransformationEngine.TransformMany
  fullName: NMF.Transformations.TransformationEngine.TransformMany
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object[]>
  nameWithType: IEnumerable<Object[]>
  fullName: System.Collections.Generic.IEnumerable<System.Object[]>
  nameWithType.vb: IEnumerable(Of Object())
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{{TOut}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TOut>
  nameWithType: IEnumerable<TOut>
  fullName: System.Collections.Generic.IEnumerable<TOut>
  nameWithType.vb: IEnumerable(Of TOut)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TOut)
  name.vb: IEnumerable(Of TOut)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Transformations.Core.ITransformationEngineContext
  commentId: T:NMF.Transformations.Core.ITransformationEngineContext
  parent: NMF.Transformations.Core
  name: ITransformationEngineContext
  nameWithType: ITransformationEngineContext
  fullName: NMF.Transformations.Core.ITransformationEngineContext
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: '{TIn1}'
  commentId: '!:TIn1'
  definition: TIn1
  name: TIn1
  nameWithType: TIn1
  fullName: TIn1
- uid: '{TIn2}'
  commentId: '!:TIn2'
  definition: TIn2
  name: TIn2
  nameWithType: TIn2
  fullName: TIn2
- uid: TIn1
  name: TIn1
  nameWithType: TIn1
  fullName: TIn1
- uid: TIn2
  name: TIn2
  nameWithType: TIn2
  fullName: TIn2
- uid: System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tuple<TIn1, TIn2>>
  nameWithType: IEnumerable<Tuple<TIn1, TIn2>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>
  nameWithType.vb: IEnumerable(Of Tuple(Of TIn1, TIn2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))
  name.vb: IEnumerable(Of Tuple(Of TIn1, TIn2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  commentId: T:NMF.Transformations.TransformationRuleBase{`0,`1,`2}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationEngine.Process*
  commentId: Overload:NMF.Transformations.TransformationEngine.Process
  name: Process
  nameWithType: TransformationEngine.Process
  fullName: NMF.Transformations.TransformationEngine.Process
- uid: NMF.Transformations.TransformationEngine.ProcessMany*
  commentId: Overload:NMF.Transformations.TransformationEngine.ProcessMany
  name: ProcessMany
  nameWithType: TransformationEngine.ProcessMany
  fullName: NMF.Transformations.TransformationEngine.ProcessMany
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`2
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2
  commentId: T:NMF.Transformations.GeneralTransformationRule`2
  parent: NMF.Transformations
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TIn}'
  commentId: '!:TIn'
  definition: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: System.Collections.Generic.IEnumerable{{TIn}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TIn>
  nameWithType: IEnumerable<TIn>
  fullName: System.Collections.Generic.IEnumerable<TIn>
  nameWithType.vb: IEnumerable(Of TIn)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TIn)
  name.vb: IEnumerable(Of TIn)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn},{TOut}}
  commentId: T:NMF.Transformations.TransformationRuleBase{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
