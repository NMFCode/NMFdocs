### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  commentId: T:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  id: InPlaceTransformationRuleSource`1
  parent: NMF.Transformations.Linq
  children:
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.CollectionChanged
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Context
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dependencies
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose(System.Boolean)
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecuteBefore
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecutionMetaData
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Filter
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.GetEnumerator
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.HandleDependency(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Successors
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.TransformationRule
  langs:
  - csharp
  - vb
  name: InPlaceTransformationRuleSource<TIn>
  nameWithType: InPlaceTransformationRuleSource<TIn>
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>
  type: Class
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InPlaceTransformationRuleSource
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 289
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nRepresents the usage of a transformation rule with one input argument in a relational pattern\n"
  example: []
  syntax:
    content: 'public class InPlaceTransformationRuleSource<TIn> : ITransformationRuleDependency, INotifyEnumerable<InPlaceComputationWrapper<TIn>>, IEnumerable<InPlaceComputationWrapper<TIn>>, INotifyEnumerable, IEnumerable, INotifyCollectionChanged, INotifiable, IDisposable where TIn : class'
    typeParameters:
    - id: TIn
      description: The type of the transformation rule input argument
    content.vb: Public Class InPlaceTransformationRuleSource(Of TIn As Class) Implements ITransformationRuleDependency, INotifyEnumerable(Of InPlaceComputationWrapper(Of TIn)), IEnumerable(Of InPlaceComputationWrapper(Of TIn)), INotifyEnumerable, IEnumerable, INotifyCollectionChanged, INotifiable, IDisposable
  inheritance:
  - System.Object
  implements:
  - NMF.Transformations.Core.ITransformationRuleDependency
  - NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}
  - System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}
  - NMF.Expressions.INotifyEnumerable
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Expressions.INotifiable
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn)
  name.vb: InPlaceTransformationRuleSource(Of TIn)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext)
  id: '#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext)'
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: InPlaceTransformationRuleSource(InPlaceTransformationRuleBase<TIn>, ITransformationContext)
  nameWithType: InPlaceTransformationRuleSource<TIn>.InPlaceTransformationRuleSource(InPlaceTransformationRuleBase<TIn>, ITransformationContext)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.InPlaceTransformationRuleSource(NMF.Transformations.InPlaceTransformationRuleBase<TIn>, NMF.Transformations.Core.ITransformationContext)
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 297
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nCreates a new TransformationRuleSource instance for the given transformation rule in the given context\n"
  example: []
  syntax:
    content: public InPlaceTransformationRuleSource(InPlaceTransformationRuleBase<TIn> rule, ITransformationContext context)
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}
      description: The transformation rule that should be used as source
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the computations should be used by the current instance
    content.vb: Public Sub New(rule As InPlaceTransformationRuleBase(Of TIn), context As ITransformationContext)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.#ctor*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).New(InPlaceTransformationRuleBase(Of TIn), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).New(NMF.Transformations.InPlaceTransformationRuleBase(Of TIn), NMF.Transformations.Core.ITransformationContext)
  name.vb: New(InPlaceTransformationRuleBase(Of TIn), ITransformationContext)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.TransformationRule
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.TransformationRule
  id: TransformationRule
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: TransformationRule
  nameWithType: InPlaceTransformationRuleSource<TIn>.TransformationRule
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.TransformationRule
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransformationRule
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 318
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets the transformation rule this transformation rule source is responsible for\n"
  example: []
  syntax:
    content: public InPlaceTransformationRuleBase<TIn> TransformationRule { get; }
    parameters: []
    return:
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}
    content.vb: Public Property TransformationRule As InPlaceTransformationRuleBase(Of TIn)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.TransformationRule*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).TransformationRule
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).TransformationRule
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Context
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Context
  id: Context
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: InPlaceTransformationRuleSource<TIn>.Context
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Context
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Context
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 323
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets the context in which the transformation rule source is active\n"
  example: []
  syntax:
    content: public ITransformationContext Context { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.ITransformationContext
    content.vb: Public Property Context As ITransformationContext
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Context*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Context
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Context
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Filter
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Filter
  id: Filter
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: InPlaceTransformationRuleSource<TIn>.Filter
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Filter
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Filter
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 328
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets or sets the filter to be used to filter computations\n"
  example: []
  syntax:
    content: public Func<InPlaceComputationWrapper<TIn>, bool> Filter { get; set; }
    parameters: []
    return:
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean}
    content.vb: Public Property Filter As Func(Of InPlaceComputationWrapper(Of TIn), Boolean)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Filter*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Filter
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Filter
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.HandleDependency(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.HandleDependency(NMF.Transformations.Core.Computation)
  id: HandleDependency(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: HandleDependency(Computation)
  nameWithType: InPlaceTransformationRuleSource<TIn>.HandleDependency(Computation)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.HandleDependency(NMF.Transformations.Core.Computation)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HandleDependency
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 334
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nReceives a new computation from the computation rule\n"
  example: []
  syntax:
    content: public void HandleDependency(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation that is received
    content.vb: Public Sub HandleDependency(computation As Computation)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.HandleDependency*
  implements:
  - NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).HandleDependency(Computation)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).HandleDependency(NMF.Transformations.Core.Computation)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecuteBefore
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecuteBefore
  id: ExecuteBefore
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: ExecuteBefore
  nameWithType: InPlaceTransformationRuleSource<TIn>.ExecuteBefore
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.ExecuteBefore
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecuteBefore
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 348
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets or sets a value indicating whether the computation object should be forwarded before or after the dependencies are resolved\n"
  example: []
  syntax:
    content: public bool ExecuteBefore { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ExecuteBefore As Boolean
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecuteBefore*
  implements:
  - NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).ExecuteBefore
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).ExecuteBefore
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose
  id: Dispose
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: InPlaceTransformationRuleSource<TIn>.Dispose()
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Dispose()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 357
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nClears dependencies\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Dispose()
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Dispose()
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose(System.Boolean)
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: InPlaceTransformationRuleSource<TIn>.Dispose(bool)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Dispose(bool)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 367
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nClears dependencies\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: A value indicating whether Dispose was called
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Dispose(Boolean)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.GetEnumerator
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.GetEnumerator
  id: GetEnumerator
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: InPlaceTransformationRuleSource<TIn>.GetEnumerator()
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 387
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets an enumerator that enumerates the collected computations so far\n"
  example: []
  syntax:
    content: public IEnumerator<InPlaceComputationWrapper<TIn>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}
      description: An enumerator
    content.vb: Public Function GetEnumerator() As IEnumerator(Of InPlaceComputationWrapper(Of TIn))
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}.GetEnumerator
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).GetEnumerator()
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).GetEnumerator()
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Successors
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Successors
  id: Successors
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: InPlaceTransformationRuleSource<TIn>.Successors
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Successors
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 399
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  example: []
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Successors*
  implements:
  - NMF.Expressions.INotifiable.Successors
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Successors
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Successors
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dependencies
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dependencies
  id: Dependencies
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: InPlaceTransformationRuleSource<TIn>.Dependencies
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Dependencies
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 402
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  example: []
  syntax:
    content: public IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dependencies*
  implements:
  - NMF.Expressions.INotifiable.Dependencies
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Dependencies
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Dependencies
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecutionMetaData
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: InPlaceTransformationRuleSource<TIn>.ExecutionMetaData
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 405
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  example: []
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecutionMetaData*
  implements:
  - NMF.Expressions.INotifiable.ExecutionMetaData
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).ExecutionMetaData
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).ExecutionMetaData
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: InPlaceTransformationRuleSource<TIn>.Notify(IList<INotificationResult>)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 408
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  example: []
  syntax:
    content: public INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Notify*
  implements:
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.CollectionChanged
  commentId: E:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.CollectionChanged
  id: CollectionChanged
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: InPlaceTransformationRuleSource<TIn>.CollectionChanged
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.CollectionChanged
  type: Event
  source:
    remote:
      path: Transformations/Transformations/Linq/TransformationRuleSource.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CollectionChanged
    path: src/Transformations/Transformations/Linq/TransformationRuleSource.cs
    startLine: 416
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: "\nGets fired when new elements appear in the trace\n"
  example: []
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).CollectionChanged
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).CollectionChanged
references:
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.ITransformationRuleDependency
  commentId: T:NMF.Transformations.Core.ITransformationRuleDependency
  parent: NMF.Transformations.Core
  name: ITransformationRuleDependency
  nameWithType: ITransformationRuleDependency
  fullName: NMF.Transformations.Core.ITransformationRuleDependency
- uid: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<InPlaceComputationWrapper<TIn>>
  nameWithType: INotifyEnumerable<InPlaceComputationWrapper<TIn>>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>>
  nameWithType.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TIn))
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn))
  name.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TIn))
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<InPlaceComputationWrapper<TIn>>
  nameWithType: IEnumerable<InPlaceComputationWrapper<TIn>>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>>
  nameWithType.vb: IEnumerable(Of InPlaceComputationWrapper(Of TIn))
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn))
  name.vb: IEnumerable(Of InPlaceComputationWrapper(Of TIn))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.#ctor*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.#ctor
  name: InPlaceTransformationRuleSource
  nameWithType: InPlaceTransformationRuleSource<TIn>.InPlaceTransformationRuleSource
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.InPlaceTransformationRuleSource
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).New
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).New
  name.vb: New
- uid: NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.InPlaceTransformationRuleBase`1
  name: InPlaceTransformationRuleBase<TIn>
  nameWithType: InPlaceTransformationRuleBase<TIn>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TIn>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TIn)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TIn)
  name.vb: InPlaceTransformationRuleBase(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: NMF.Transformations.InPlaceTransformationRuleBase`1
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase`1
  name: InPlaceTransformationRuleBase<T>
  nameWithType: InPlaceTransformationRuleBase<T>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<T>
  nameWithType.vb: InPlaceTransformationRuleBase(Of T)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of T)
  name.vb: InPlaceTransformationRuleBase(Of T)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.TransformationRule*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.TransformationRule
  name: TransformationRule
  nameWithType: InPlaceTransformationRuleSource<TIn>.TransformationRule
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.TransformationRule
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).TransformationRule
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).TransformationRule
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Context*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Context
  name: Context
  nameWithType: InPlaceTransformationRuleSource<TIn>.Context
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Context
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Context
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Context
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Filter*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Filter
  name: Filter
  nameWithType: InPlaceTransformationRuleSource<TIn>.Filter
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Filter
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Filter
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Filter
- uid: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean}
  commentId: T:System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<InPlaceComputationWrapper<TIn>, bool>
  nameWithType: Func<InPlaceComputationWrapper<TIn>, bool>
  fullName: System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>, bool>
  nameWithType.vb: Func(Of InPlaceComputationWrapper(Of TIn), Boolean)
  fullName.vb: System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn), Boolean)
  name.vb: Func(Of InPlaceComputationWrapper(Of TIn), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.HandleDependency*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.HandleDependency
  name: HandleDependency
  nameWithType: InPlaceTransformationRuleSource<TIn>.HandleDependency
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.HandleDependency
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).HandleDependency
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).HandleDependency
- uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.ITransformationRuleDependency
  name: HandleDependency(Computation)
  nameWithType: ITransformationRuleDependency.HandleDependency(Computation)
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
    name: HandleDependency
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
    name: HandleDependency
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecuteBefore*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecuteBefore
  name: ExecuteBefore
  nameWithType: InPlaceTransformationRuleSource<TIn>.ExecuteBefore
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.ExecuteBefore
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).ExecuteBefore
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).ExecuteBefore
- uid: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  commentId: P:NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  parent: NMF.Transformations.Core.ITransformationRuleDependency
  name: ExecuteBefore
  nameWithType: ITransformationRuleDependency.ExecuteBefore
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dispose
  name: Dispose
  nameWithType: InPlaceTransformationRuleSource<TIn>.Dispose
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Dispose
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Dispose
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.GetEnumerator*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.GetEnumerator
  name: GetEnumerator
  nameWithType: InPlaceTransformationRuleSource<TIn>.GetEnumerator
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.GetEnumerator
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).GetEnumerator
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<InPlaceComputationWrapper<TIn>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of InPlaceComputationWrapper(Of TIn)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}}}
  commentId: T:System.Collections.Generic.IEnumerator{NMF.Transformations.Linq.InPlaceComputationWrapper{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<InPlaceComputationWrapper<TIn>>
  nameWithType: IEnumerator<InPlaceComputationWrapper<TIn>>
  fullName: System.Collections.Generic.IEnumerator<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>>
  nameWithType.vb: IEnumerator(Of InPlaceComputationWrapper(Of TIn))
  fullName.vb: System.Collections.Generic.IEnumerator(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn))
  name.vb: IEnumerator(Of InPlaceComputationWrapper(Of TIn))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Successors*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Successors
  name: Successors
  nameWithType: InPlaceTransformationRuleSource<TIn>.Successors
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Successors
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Successors
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Successors
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dependencies*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Dependencies
  name: Dependencies
  nameWithType: InPlaceTransformationRuleSource<TIn>.Dependencies
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Dependencies
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Dependencies
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Dependencies
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecutionMetaData*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: InPlaceTransformationRuleSource<TIn>.ExecutionMetaData
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.ExecutionMetaData
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).ExecutionMetaData
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).ExecutionMetaData
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Notify*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`1.Notify
  name: Notify
  nameWithType: InPlaceTransformationRuleSource<TIn>.Notify
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn>.Notify
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn).Notify
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn).Notify
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
