### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  id: GeneralTransformationRule`1
  parent: NMF.Transformations
  children:
  - NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  - NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  - NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  - NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  - NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  - NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  - NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  - NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  - NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  - NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  - NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  - NMF.Transformations.GeneralTransformationRule`1.InputType
  - NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  - NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  - NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  - NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  - NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  - NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  - NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  - NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  - NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  - NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  - NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  - NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  - NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  - NMF.Transformations.GeneralTransformationRule`1.Rule``1
  - NMF.Transformations.GeneralTransformationRule`1.ToString
  - NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  - NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  - NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  - NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  - NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  langs:
  - csharp
  - vb
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  type: Class
  source:
    id: GeneralTransformationRule
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 17
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Defines a transformation rule of a transformation that has one input argument
  example: []
  syntax:
    content: 'public abstract class GeneralTransformationRule<TIn> : GeneralTransformationRule'
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public MustInherit Class GeneralTransformationRule(Of TIn) Inherits GeneralTransformationRule
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  derivedClasses:
  - NMF.Transformations.InPlaceTransformationRuleBase`1
  - NMF.Transformations.TransformationRuleBase`2
  inheritedMembers:
  - NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputType
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
- uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  id: MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<TIn>)
  type: Method
  source:
    id: MarkInstantiatingFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 24
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Marks the current transformation rule instantiating for the specified rule
  example: []
  syntax:
    content: public void MarkInstantiatingFor(GeneralTransformationRule rule, Predicate<TIn> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule
    - id: filter
      type: System.Predicate{{TIn}}
      description: The filter that should filter the inputs where this transformation rule is marked instantiating
    content.vb: Public Sub MarkInstantiatingFor(rule As GeneralTransformationRule, filter As Predicate(Of TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor*
  nameWithType.vb: GeneralTransformationRule(Of TIn).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Rule``1
  id: Rule``1
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule<TRule>()
  type: Method
  source:
    id: Rule
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 51
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Gets the first rule within the rules associated transformation that has the given rule type
  example: []
  syntax:
    content: 'public TRule Rule<TRule>() where TRule : GeneralTransformationRule'
    typeParameters:
    - id: TRule
      description: The type of the transformation rule that is looked for
    return:
      type: '{TRule}'
      description: The first transformation rule within the associated transformation or null, if there is none.
    content.vb: Public Function Rule(Of TRule As GeneralTransformationRule)() As TRule
  overload: NMF.Transformations.GeneralTransformationRule`1.Rule*
  nameWithType.vb: GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  id: WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: WithPattern(ITransformationRulePattern<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(ITransformationRulePattern<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn>)
  type: Method
  source:
    id: WithPattern
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 61
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Registers the given pattern for the current transformation rule
  example: []
  syntax:
    content: public void WithPattern(ITransformationRulePattern<TIn> pattern)
    parameters:
    - id: pattern
      type: NMF.Transformations.ITransformationRulePattern{{TIn}}
      description: The pattern that should be applied based on the current transformation rule
    content.vb: Public Sub WithPattern(pattern As ITransformationRulePattern(Of TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.WithPattern*
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(ITransformationRulePattern(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  id: WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<TIn>>)
  type: Method
  source:
    id: WithPattern
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 74
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Registers the given incremental pattern for the current transformation rule
  example: []
  syntax:
    content: public void WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>> patternCreator)
    parameters:
    - id: patternCreator
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{TIn}}}
      description: The relation pattern that should be applied on the current transformation rule
    content.vb: Public Sub WithPattern(patternCreator As Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.WithPattern*
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  id: WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: WithPattern
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 85
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Registers the given static pattern for the current transformation rule
  example: []
  syntax:
    content: public void WithPattern(Func<ITransformationContext, IEnumerable<TIn>> patternCreator)
    parameters:
    - id: patternCreator
      type: System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{TIn}}}
      description: The relation pattern that should be applied on the current transformation rule
    content.vb: Public Sub WithPattern(patternCreator As Func(Of ITransformationContext, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.WithPattern*
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  id: RequireByType``1
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  type: Method
  source:
    id: RequireByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 97
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires all transformation rules that transform items with the input type
  remarks: This version Always takes the input parameter as input for the dependent transformations. Thus, this method will throw an exception, if the types do not match
  example: []
  syntax:
    content: public void RequireByType<TRequiredInput>()
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformations
    content.vb: Public Sub RequireByType(Of TRequiredInput)()
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireByType*
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  id: RequireByType``1(System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  type: Method
  source:
    id: RequireByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 115
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires all transformation rules that transform items with the input type
  example: []
  syntax:
    content: public void RequireByType<TRequiredInput>(Func<TIn, TRequiredInput> selector)
    parameters:
    - id: selector
      type: System.Func{{TIn},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformations
    content.vb: Public Sub RequireByType(Of TRequiredInput)(selector As Func(Of TIn, TRequiredInput))
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  id: RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  type: Method
  source:
    id: RequireByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 133
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires all transformation rules that transform items with the input type
  example: []
  syntax:
    content: public void RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1> selector1, Func<TIn, TRequiredInput2> selector2)
    parameters:
    - id: selector1
      type: System.Func{{TIn},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub RequireByType(Of TRequiredInput1, TRequiredInput2)(selector1 As Func(Of TIn, TRequiredInput1), selector2 As Func(Of TIn, TRequiredInput2))
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector1 parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector2 parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  id: Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  type: Method
  source:
    id: Require
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 151
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn, TRequiredInput> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn, TRequiredInput)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  id: Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  type: Method
  source:
    id: Require
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 175
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn, TRequiredInput1> selector1, Func<TIn, TRequiredInput2> selector2)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector1 As Func(Of TIn, TRequiredInput1), selector2 As Func(Of TIn, TRequiredInput2)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector1 parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector2 parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  id: RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  type: Method
  source:
    id: RequireManyByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 188
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires all transformation rules that transform S to T with all of the specified objects
  example: []
  syntax:
    content: public void RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>> selector)
    parameters:
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformations
    content.vb: Public Sub RequireManyByType(Of TRequiredInput)(selector As Func(Of TIn, IEnumerable(Of TRequiredInput)))
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  id: RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  type: Method
  source:
    id: RequireManyByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 204
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires all transformation rules that transform S to T with all of the specified objects
  example: []
  syntax:
    content: public void RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector)
    parameters:
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub RequireManyByType(Of TRequiredInput1, TRequiredInput2)(selector As Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
- uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  id: Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Require(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Require(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  type: Method
  source:
    id: Require
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 220
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type
  example: []
  syntax:
    content: public ITransformationRuleDependency Require(GeneralTransformationRule rule, Func<TIn, object[]> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Object[]}
      description: A method that returns the input of the required transformation rule
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(rule As GeneralTransformationRule, selector As Func(Of TIn, Object())) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn, Object()))
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  id: Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  type: Method
  source:
    id: Require
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 234
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Predicate<TIn> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: filter
      type: System.Predicate{{TIn}}
      description: A filter that filters the input arguments that need the specified requirement
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), filter As Predicate(Of TIn)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  id: Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  type: Method
  source:
    id: Require
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 250
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn, TRequiredInput> selector, Predicate<TIn> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    - id: filter
      type: System.Predicate{{TIn}}
      description: A filter that filters the input arguments that need the specified requirement
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn, TRequiredInput), filter As Predicate(Of TIn)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  id: Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  type: Method
  source:
    id: Require
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 270
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type
  example: []
  syntax:
    content: public ITransformationRuleDependency Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn, TRequiredInput1> selector1, Func<TIn, TRequiredInput2> selector2, Predicate<TIn> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    - id: filter
      type: System.Predicate{{TIn}}
      description: A filter that filters the input arguments that need the specified requirement
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function Require(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector1 As Func(Of TIn, TRequiredInput1), selector2 As Func(Of TIn, TRequiredInput2), filter As Predicate(Of TIn)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Require*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector1 parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector2 parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  id: RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  type: Method
  source:
    id: RequireMany
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 286
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires all transformation rules that transform S to T with all of the specified objects
  example: []
  syntax:
    content: public ITransformationRuleDependency RequireMany(GeneralTransformationRule rule, Func<TIn, IEnumerable<object[]>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Object[]}}
      description: A method that selects the input arguments for the dependent transformation rule
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function RequireMany(rule As GeneralTransformationRule, selector As Func(Of TIn, IEnumerable(Of Object()))) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  id: RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  type: Method
  source:
    id: RequireMany
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 299
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type with all of the specified inputs
  example: []
  syntax:
    content: 'public ITransformationRuleDependency RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn, IEnumerable<TRequiredInput>> selector) where TRequiredInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function RequireMany(Of TRequiredInput As Class)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn, IEnumerable(Of TRequiredInput))) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  id: RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  type: Method
  source:
    id: RequireMany
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 318
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Requires the transformation rule with the given type with all of the specified inputs
  example: []
  syntax:
    content: public ITransformationRuleDependency RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function RequireMany(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.RequireMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
- uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  id: Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Call(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Call(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  type: Method
  source:
    id: Call
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 334
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency Call(GeneralTransformationRule rule, Func<TIn, object[]> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Object[]}
      description: A method that selects the input for the dependent transformation rule
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function [Call](rule As GeneralTransformationRule, selector As Func(Of TIn, Object())) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn, Object()))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  id: CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  type: Method
  source:
    id: CallMany
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 347
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type with all of the specified inputs after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency CallMany(GeneralTransformationRule rule, Func<TIn, IEnumerable<object[]>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Object[]}}
      description: A method that selects the input for the dependent transformation rule
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallMany(rule As GeneralTransformationRule, selector As Func(Of TIn, IEnumerable(Of Object()))) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.CallMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  id: CallByType``1(System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  type: Method
  source:
    id: CallByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 359
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls all transformation rules that transform items with the input type after the current transformation rule
  example: []
  syntax:
    content: public void CallByType<TRequiredInput>(Func<TIn, TRequiredInput> selector)
    parameters:
    - id: selector
      type: System.Func{{TIn},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformations
    content.vb: Public Sub CallByType(Of TRequiredInput)(selector As Func(Of TIn, TRequiredInput))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  id: CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  type: Method
  source:
    id: CallByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 377
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls all transformation rules that transform items with the input type after the current transformation rule
  example: []
  syntax:
    content: public void CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1> selector1, Func<TIn, TRequiredInput2> selector2)
    parameters:
    - id: selector1
      type: System.Func{{TIn},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallByType(Of TRequiredInput1, TRequiredInput2)(selector1 As Func(Of TIn, TRequiredInput1), selector2 As Func(Of TIn, TRequiredInput2))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector1 parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector2 parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  id: Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  type: Method
  source:
    id: Call
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 395
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn, TRequiredInput> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function [Call](Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn, TRequiredInput)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  id: Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  type: Method
  source:
    id: Call
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 412
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn, TRequiredInput1> selector1, Func<TIn, TRequiredInput2> selector2)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function [Call](Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector1 As Func(Of TIn, TRequiredInput1), selector2 As Func(Of TIn, TRequiredInput2)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector1 parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector2 parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  id: Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  type: Method
  source:
    id: Call
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 426
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Predicate<TIn> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: filter
      type: System.Predicate{{TIn}}
      description: A filter that filters the input arguments that need the specified requirement
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function [Call](Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), filter As Predicate(Of TIn)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  id: Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  type: Method
  source:
    id: Call
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 442
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn, TRequiredInput> selector, Predicate<TIn> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},{TRequiredInput}}
      description: A method that selects the input for the dependent transformations
    - id: filter
      type: System.Predicate{{TIn}}
      description: A filter that filters the input arguments that need the specified requirement
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function [Call](Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn, TRequiredInput), filter As Predicate(Of TIn)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  id: Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  type: Method
  source:
    id: Call
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 462
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn, TRequiredInput1> selector1, Func<TIn, TRequiredInput2> selector2, Predicate<TIn> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector1
      type: System.Func{{TIn},{TRequiredInput1}}
      description: A method that selects the first input for the dependent transformations
    - id: selector2
      type: System.Func{{TIn},{TRequiredInput2}}
      description: A method that selects the second input for the dependent transformations
    - id: filter
      type: System.Predicate{{TIn}}
      description: A filter that filters the input arguments that need the specified requirement
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function [Call](Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector1 As Func(Of TIn, TRequiredInput1), selector2 As Func(Of TIn, TRequiredInput2), filter As Predicate(Of TIn)) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.Call*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector1 parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector2 parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  id: CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  type: Method
  source:
    id: CallManyByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 476
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls all transformation rules that transform S to T with all of the specified objects after the current transformation rule
  example: []
  syntax:
    content: public void CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>> selector)
    parameters:
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformations
    content.vb: Public Sub CallManyByType(Of TRequiredInput)(selector As Func(Of TIn, IEnumerable(Of TRequiredInput)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallManyByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  id: CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  type: Method
  source:
    id: CallManyByType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 492
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls all transformation rules that transform S to T with all of the specified objects after the current transformation rule
  example: []
  syntax:
    content: public void CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector)
    parameters:
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallManyByType(Of TRequiredInput1, TRequiredInput2)(selector As Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallManyByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  id: CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  type: Method
  source:
    id: CallMany
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 509
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type with all of the specified inputs after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TIn, IEnumerable<TRequiredInput>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the dependent transformation
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallMany(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TIn, IEnumerable(Of TRequiredInput))) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.CallMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the rule parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  id: CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  type: Method
  source:
    id: CallMany
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 527
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Calls the transformation rule with the given type with all of the specified inputs after the current transformation rule
  example: []
  syntax:
    content: public ITransformationRuleDependency CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
      description: A method that selects the inputs for the dependent transformations
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    return:
      type: NMF.Transformations.Core.ITransformationRuleDependency
    content.vb: Public Function CallMany(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))) As ITransformationRuleDependency
  overload: NMF.Transformations.GeneralTransformationRule`1.CallMany*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
- uid: NMF.Transformations.GeneralTransformationRule`1.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`1.InputType
  id: InputType
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: InputType
  nameWithType: GeneralTransformationRule<TIn>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.InputType
  type: Property
  source:
    id: InputType
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 541
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Gets the type signature of the input arguments of this transformation rule
  example: []
  syntax:
    content: public override sealed Type[] InputType { get; }
    parameters: []
    return:
      type: System.Type[]
    content.vb: Public NotOverridable Overrides ReadOnly Property InputType As Type()
  overridden: NMF.Transformations.Core.GeneralTransformationRule.InputType
  overload: NMF.Transformations.GeneralTransformationRule`1.InputType*
  nameWithType.vb: GeneralTransformationRule(Of TIn).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).InputType
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  id: CallFor``1(System.Func{``0,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 552
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput>(Func<TRequiredInput, TIn> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput)(selector As Func(Of TRequiredInput, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  id: CallFor``2(System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 565
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2)(selector As Func(Of TRequiredInput1, TRequiredInput2, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  id: CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 579
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TRequiredInput, TIn> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TRequiredInput, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  id: CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 594
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TRequiredInput1, TRequiredInput2, TIn> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TRequiredInput1, TRequiredInput2, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  id: CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 607
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput>(Func<TRequiredInput, TIn> selector, Predicate<TRequiredInput> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Predicate{{TRequiredInput}}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput)(selector As Func(Of TRequiredInput, TIn), filter As Predicate(Of TRequiredInput))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  id: CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 622
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn> selector, Func<TRequiredInput1, TRequiredInput2, bool> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2)(selector As Func(Of TRequiredInput1, TRequiredInput2, TIn), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  id: CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 638
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TRequiredInput, TIn> selector, Predicate<TRequiredInput> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Predicate{{TRequiredInput}}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallFor(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TRequiredInput, TIn), filter As Predicate(Of TRequiredInput))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  id: CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 655
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TRequiredInput1, TRequiredInput2, TIn> selector, Func<TRequiredInput1, TRequiredInput2, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallFor(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TRequiredInput1, TRequiredInput2, TIn), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 669
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whole collection of input objects
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput)(selector As Func(Of TRequiredInput, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 683
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2)(selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  id: CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 697
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>> selector, Predicate<TRequiredInput> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Predicate{{TRequiredInput}}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput)(selector As Func(Of TRequiredInput, IEnumerable(Of TIn)), filter As Predicate(Of TRequiredInput))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  id: CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 713
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>> selector, Func<TRequiredInput1, TRequiredInput2, bool> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2)(selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 731
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: 'public void CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TRequiredInput, IEnumerable<TIn>> selector) where TRequiredInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput As Class)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TRequiredInput, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 748
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  id: CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 764
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput> rule, Func<TRequiredInput, IEnumerable<TIn>> selector, Predicate<TRequiredInput> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Predicate{{TRequiredInput}}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    content.vb: Public Sub CallForEach(Of TRequiredInput)(rule As GeneralTransformationRule(Of TRequiredInput), selector As Func(Of TRequiredInput, IEnumerable(Of TIn)), filter As Predicate(Of TRequiredInput))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  id: CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 782
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2> rule, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>> selector, Func<TRequiredInput1, TRequiredInput2, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    content.vb: Public Sub CallForEach(Of TRequiredInput1, TRequiredInput2)(rule As GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), selector As Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), filter As Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  id: CallForOutputSensitive``2(System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 796
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TRequiredInput, TRequiredOutput, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  id: CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 810
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  id: CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 825
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, TRequiredOutput, TIn> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TRequiredInput, TRequiredOutput, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  id: CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 841
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  id: CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 855
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn> selector, Func<TRequiredInput, TRequiredOutput, bool> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TRequiredInput, TRequiredOutput, TIn), filter As Func(Of TRequiredInput, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  id: CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 874
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn> selector, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), filter As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  id: CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 894
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, TRequiredOutput, TIn> selector, Func<TRequiredInput, TRequiredOutput, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TRequiredInput, TRequiredOutput, TIn), filter As Func(Of TRequiredInput, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  id: CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 915
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made
  example: []
  syntax:
    content: public void CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn> selector, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), filter As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 933
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whole collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 948
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>> selector)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  id: CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 963
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>> selector, Func<TRequiredInput, TRequiredOutput, bool> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(selector As Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), filter As Func(Of TRequiredInput, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  id: CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 983
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>> selector, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool> filter)
    parameters:
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), filter As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1005
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  id: CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1022
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>> selector)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the inputs for this transformation rule
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  id: CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1039
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput> rule, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>> selector, Func<TRequiredInput, TRequiredOutput, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput
      description: The input argument type of the source transformation rule
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput, TRequiredOutput), selector As Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), filter As Func(Of TRequiredInput, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  id: CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  type: Method
  source:
    id: CallForEachOutputSensitive
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1061
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: >-
    Create a call dependency, i.e., let this transformation be called as soon as a transformation with the input type is made

    This version calls this transformation rule for a whol collection of input objects
  example: []
  syntax:
    content: public void CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput> rule, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>> selector, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool> filter)
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
      description: The dependent transformation rule
    - id: selector
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input for this transformation rule
    - id: filter
      type: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean}
      description: A method that filters the applicable instances of S
    typeParameters:
    - id: TRequiredInput1
      description: The first input argument type of the dependent transformations
    - id: TRequiredInput2
      description: The second input argument type of the dependent transformations
    - id: TRequiredOutput
      description: The output type of the dependent transformation
    content.vb: Public Sub CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(rule As TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), selector As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), filter As Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: This exception is thrown if the rule parameter is passed a null instance.
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  id: TraceInput``1(System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: TraceInput<TKey>(Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(System.Func<TIn, TKey>)
  type: Method
  source:
    id: TraceInput
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1077
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Creates a trace entry for every computation of the current rule for the computation input
  example: []
  syntax:
    content: 'public TraceEntryGroup<TKey, TIn> TraceInput<TKey>(Func<TIn, TKey> traceSelector) where TKey : class'
    parameters:
    - id: traceSelector
      type: System.Func{{TIn},{TKey}}
      description: A method that returns the trace key for the input of a computation
    typeParameters:
    - id: TKey
      description: The type that should be used as key for the trace entry
    return:
      type: NMF.Transformations.TraceEntryGroup{{TKey},{TIn}}
      description: A trace group that can be used as a key for the trace functionality
    content.vb: Public Function TraceInput(Of TKey As Class)(traceSelector As Func(Of TIn, TKey)) As TraceEntryGroup(Of TKey, TIn)
  overload: NMF.Transformations.GeneralTransformationRule`1.TraceInput*
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of TIn, TKey))
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  id: TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TIn>, System.Func<TIn, TKey>)
  type: Method
  source:
    id: TraceInput
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1097
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Creates a trace entry for every computation of the current rule for the computation input
  example: []
  syntax:
    content: 'public void TraceInput<TKey>(TraceEntryGroup<TKey, TIn> traceKey, Func<TIn, TKey> traceSelector) where TKey : class'
    parameters:
    - id: traceKey
      type: NMF.Transformations.TraceEntryGroup{{TKey},{TIn}}
      description: A trace group used as a key for the trace functionality
    - id: traceSelector
      type: System.Func{{TIn},{TKey}}
      description: A method that returns the trace key for the input of a computation
    typeParameters:
    - id: TKey
      description: The type that should be used as key for the trace entry
    content.vb: Public Sub TraceInput(Of TKey As Class)(traceKey As TraceEntryGroup(Of TKey, TIn), traceSelector As Func(Of TIn, TKey))
  overload: NMF.Transformations.GeneralTransformationRule`1.TraceInput*
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TIn), System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  id: CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, bool)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1233
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Specify that the current transformation rule is called whenenver objects are transformed with the given transformation rule
  example: []
  syntax:
    content: public void CallFor(GeneralTransformationRule rule, Func<Computation, TIn> selector, bool needOutput)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule that act as trigger for the current transformation rule
    - id: selector
      type: System.Func{NMF.Transformations.Core.Computation,{TIn}}
      description: A method that selects the input parameters for the current transformation rule
    - id: needOutput
      type: System.Boolean
      description: True, if the call must be made after the output of the trigger rule is created, otherwise false
    content.vb: Public Sub CallFor(rule As GeneralTransformationRule, selector As Func(Of Computation, TIn), needOutput As Boolean)
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the rule parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  id: CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  type: Method
  source:
    id: CallFor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1247
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Specify that the current transformation rule is called whenenver objects are transformed with the given transformation rule
  example: []
  syntax:
    content: public void CallFor(GeneralTransformationRule rule, Func<Computation, TIn> selector, Predicate<Computation> filter, bool needOutput)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule that act as trigger for the current transformation rule
    - id: selector
      type: System.Func{NMF.Transformations.Core.Computation,{TIn}}
      description: A method that selects the input parameters for the current transformation rule
    - id: filter
      type: System.Predicate{NMF.Transformations.Core.Computation}
      description: A method to filter the objects where the reversed dependency is applicable
    - id: needOutput
      type: System.Boolean
      description: True, if the call must be made after the output of the trigger rule is created, otherwise false
    content.vb: Public Sub CallFor(rule As GeneralTransformationRule, selector As Func(Of Computation, TIn), filter As Predicate(Of Computation), needOutput As Boolean)
  overload: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the rule parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  id: CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, bool)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1260
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Specify that the current transformation rule is called whenenver the given types are transformed multiple times
  example: []
  syntax:
    content: public void CallForEach(GeneralTransformationRule rule, Func<Computation, IEnumerable<TIn>> selector, bool needOutput)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule acting as trigger for the current transformation rule
    - id: selector
      type: System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input parameters for the current transformation rule
    - id: needOutput
      type: System.Boolean
      description: True, if the call must be made after the output of the trigger rule is created, otherwise false
    content.vb: Public Sub CallForEach(rule As GeneralTransformationRule, selector As Func(Of Computation, IEnumerable(Of TIn)), needOutput As Boolean)
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the rule parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  id: CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  type: Method
  source:
    id: CallForEach
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1274
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Specify that the current transformation rule is called whenenver the given types are transformed multiple times
  example: []
  syntax:
    content: public void CallForEach(GeneralTransformationRule rule, Func<Computation, IEnumerable<TIn>> selector, Predicate<Computation> filter, bool needOutput)
    parameters:
    - id: rule
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule acting as trigger for the current transformation rule
    - id: selector
      type: System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{{TIn}}}
      description: A method that selects the input parameters for the current transformation rule
    - id: filter
      type: System.Predicate{NMF.Transformations.Core.Computation}
      description: A method that filters the inputs of the transformation rule acting as trigger
    - id: needOutput
      type: System.Boolean
      description: True, if the call must be made after the output of the trigger rule is created, otherwise false
    content.vb: Public Sub CallForEach(rule As GeneralTransformationRule, selector As Func(Of Computation, IEnumerable(Of TIn)), filter As Predicate(Of Computation), needOutput As Boolean)
  overload: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the rule parameter is passed a null instance
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An ArgumentNullException is thrown if the selector parameter is passed a null instance
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
- uid: NMF.Transformations.GeneralTransformationRule`1.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.ToString
  id: ToString
  parent: NMF.Transformations.GeneralTransformationRule`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\NTL\GeneralTransformationRuleBase.cs
    startLine: 1285
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: Gets the name of the transformation rule
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The name of the transformation rule
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: NMF.Transformations.GeneralTransformationRule`1.ToString*
  nameWithType.vb: GeneralTransformationRule(Of TIn).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString()
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  href: NMF.html
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.GeneralTransformationRule.html
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_RegisterDependencies
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_RegisterDependencies
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_RegisterDependencies
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_OutputType
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_CreateComputation_System_Object___NMF_Transformations_Core_IComputationContext_
  name: CreateComputation(object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_CreateComputation_System_Object___NMF_Transformations_Core_IComputationContext_
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    href: NMF.Transformations.Core.IComputationContext.html
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_CreateComputation_System_Object___NMF_Transformations_Core_IComputationContext_
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    href: NMF.Transformations.Core.IComputationContext.html
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Transformation
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Dependencies
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_OutputDelayLevel
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_TransformationDelayLevel
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_IsUnique
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_BaseRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_IsInstantiating_NMF_Transformations_Core_Computation_
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_IsInstantiating_NMF_Transformations_Core_Computation_
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_IsInstantiating_NMF_Transformations_Core_Computation_
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_HasCompliantInput_NMF_Transformations_Core_Computation_
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_HasCompliantInput_NMF_Transformations_Core_Computation_
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_HasCompliantInput_NMF_Transformations_Core_Computation_
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Require_NMF_Transformations_Core_GeneralTransformationRule_
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Require_NMF_Transformations_Core_GeneralTransformationRule_
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Require_NMF_Transformations_Core_GeneralTransformationRule_
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Call_NMF_Transformations_Core_GeneralTransformationRule_
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Call_NMF_Transformations_Core_GeneralTransformationRule_
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_Call_NMF_Transformations_Core_GeneralTransformationRule_
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_MarkInstantiatingFor_NMF_Transformations_Core_GeneralTransformationRule_
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_MarkInstantiatingFor_NMF_Transformations_Core_GeneralTransformationRule_
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_MarkInstantiatingFor_NMF_Transformations_Core_GeneralTransformationRule_
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_MarkInstantiatingFor_NMF_Transformations_Core_GeneralTransformationRule_System_Predicate_NMF_Transformations_Core_Computation__
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_MarkInstantiatingFor_NMF_Transformations_Core_GeneralTransformationRule_System_Predicate_NMF_Transformations_Core_Computation__
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_MarkInstantiatingFor_NMF_Transformations_Core_GeneralTransformationRule_System_Predicate_NMF_Transformations_Core_Computation__
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    href: NMF.Transformations.Core.GeneralTransformationRule.html
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  href: NMF.html
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
- uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_MarkInstantiatingFor_NMF_Transformations_Core_GeneralTransformationRule_System_Predicate__0__
  name: MarkInstantiatingFor
  nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor
  nameWithType.vb: GeneralTransformationRule(Of TIn).MarkInstantiatingFor
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor
- uid: System.Predicate{{TIn}}
  commentId: T:System.Predicate{`0}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<TIn>
  nameWithType: Predicate<TIn>
  fullName: System.Predicate<TIn>
  nameWithType.vb: Predicate(Of TIn)
  fullName.vb: System.Predicate(Of TIn)
  name.vb: Predicate(Of TIn)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Rule*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.Rule
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_Rule__1
  name: Rule
  nameWithType: GeneralTransformationRule<TIn>.Rule
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule
  nameWithType.vb: GeneralTransformationRule(Of TIn).Rule
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule
- uid: '{TRule}'
  commentId: '!:TRule'
  definition: TRule
  name: TRule
  nameWithType: TRule
  fullName: TRule
- uid: TRule
  name: TRule
  nameWithType: TRule
  fullName: TRule
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.WithPattern
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_WithPattern_NMF_Transformations_ITransformationRulePattern__0__
  name: WithPattern
  nameWithType: GeneralTransformationRule<TIn>.WithPattern
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern
- uid: NMF.Transformations.ITransformationRulePattern{{TIn}}
  commentId: T:NMF.Transformations.ITransformationRulePattern{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.ITransformationRulePattern`1
  href: NMF.Transformations.ITransformationRulePattern-1.html
  name: ITransformationRulePattern<TIn>
  nameWithType: ITransformationRulePattern<TIn>
  fullName: NMF.Transformations.ITransformationRulePattern<TIn>
  nameWithType.vb: ITransformationRulePattern(Of TIn)
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn)
  name.vb: ITransformationRulePattern(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    href: NMF.Transformations.ITransformationRulePattern-1.html
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    href: NMF.Transformations.ITransformationRulePattern-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.ITransformationRulePattern`1
  commentId: T:NMF.Transformations.ITransformationRulePattern`1
  href: NMF.Transformations.ITransformationRulePattern-1.html
  name: ITransformationRulePattern<TIn>
  nameWithType: ITransformationRulePattern<TIn>
  fullName: NMF.Transformations.ITransformationRulePattern<TIn>
  nameWithType.vb: ITransformationRulePattern(Of TIn)
  fullName.vb: NMF.Transformations.ITransformationRulePattern(Of TIn)
  name.vb: ITransformationRulePattern(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    href: NMF.Transformations.ITransformationRulePattern-1.html
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
    href: NMF.Transformations.ITransformationRulePattern-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{TIn}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<TIn>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<TIn>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<TIn>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of TIn))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of TIn))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of TIn))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{TIn}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, IEnumerable<TIn>>
  nameWithType: Func<ITransformationContext, IEnumerable<TIn>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<TIn>>
  nameWithType.vb: Func(Of ITransformationContext, IEnumerable(Of TIn))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: Func(Of ITransformationContext, IEnumerable(Of TIn))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.RequireByType
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_RequireByType__1
  name: RequireByType
  nameWithType: GeneralTransformationRule<TIn>.RequireByType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Func{{TIn},{TRequiredInput}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, TRequiredInput>
  nameWithType: Func<TIn, TRequiredInput>
  fullName: System.Func<TIn, TRequiredInput>
  nameWithType.vb: Func(Of TIn, TRequiredInput)
  fullName.vb: System.Func(Of TIn, TRequiredInput)
  name.vb: Func(Of TIn, TRequiredInput)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
- uid: System.Func{{TIn},{TRequiredInput1}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, TRequiredInput1>
  nameWithType: Func<TIn, TRequiredInput1>
  fullName: System.Func<TIn, TRequiredInput1>
  nameWithType.vb: Func(Of TIn, TRequiredInput1)
  fullName.vb: System.Func(Of TIn, TRequiredInput1)
  name.vb: Func(Of TIn, TRequiredInput1)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
- uid: System.Func{{TIn},{TRequiredInput2}}
  commentId: T:System.Func{`0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, TRequiredInput2>
  nameWithType: Func<TIn, TRequiredInput2>
  fullName: System.Func<TIn, TRequiredInput2>
  nameWithType.vb: Func(Of TIn, TRequiredInput2)
  fullName.vb: System.Func(Of TIn, TRequiredInput2)
  name.vb: Func(Of TIn, TRequiredInput2)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.Require
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_Require__1_NMF_Transformations_GeneralTransformationRule___0__System_Func__0___0__
  name: Require
  nameWithType: GeneralTransformationRule<TIn>.Require
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require
- uid: NMF.Transformations.GeneralTransformationRule{{TRequiredInput}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{``0}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  href: NMF.Transformations.GeneralTransformationRule-1.html
  name: GeneralTransformationRule<TRequiredInput>
  nameWithType: GeneralTransformationRule<TRequiredInput>
  fullName: NMF.Transformations.GeneralTransformationRule<TRequiredInput>
  nameWithType.vb: GeneralTransformationRule(Of TRequiredInput)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TRequiredInput)
  name.vb: GeneralTransformationRule(Of TRequiredInput)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-1.html
  - name: <
  - name: TRequiredInput
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
- uid: NMF.Transformations.Core.ITransformationRuleDependency
  commentId: T:NMF.Transformations.Core.ITransformationRuleDependency
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.ITransformationRuleDependency.html
  name: ITransformationRuleDependency
  nameWithType: ITransformationRuleDependency
  fullName: NMF.Transformations.Core.ITransformationRuleDependency
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  href: NMF.Transformations.GeneralTransformationRule-1.html
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-1.html
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{``0,``1}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`2
  href: NMF.Transformations.GeneralTransformationRule-2.html
  name: GeneralTransformationRule<TRequiredInput1, TRequiredInput2>
  nameWithType: GeneralTransformationRule<TRequiredInput1, TRequiredInput2>
  fullName: NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>
  nameWithType.vb: GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2)
  name.vb: GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-2.html
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`2
  commentId: T:NMF.Transformations.GeneralTransformationRule`2
  parent: NMF.Transformations
  href: NMF.Transformations.GeneralTransformationRule-2.html
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    href: NMF.Transformations.GeneralTransformationRule-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_RequireManyByType__1_System_Func__0_System_Collections_Generic_IEnumerable___0___
  name: RequireManyByType
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType
- uid: System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}}
  commentId: T:System.Func{`0,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, IEnumerable<TRequiredInput>>
  nameWithType: Func<TIn, IEnumerable<TRequiredInput>>
  fullName: System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>
  nameWithType.vb: Func(Of TIn, IEnumerable(Of TRequiredInput))
  fullName.vb: System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput))
  name.vb: Func(Of TIn, IEnumerable(Of TRequiredInput))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}}
  commentId: T:System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>
  nameWithType: Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>
  fullName: System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>
  nameWithType.vb: Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))
  fullName.vb: System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2)))
  name.vb: Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-2
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.tuple-2
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
- uid: System.Func{{TIn},System.Object[]}
  commentId: T:System.Func{`0,System.Object[]}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, object[]>
  nameWithType: Func<TIn, object[]>
  fullName: System.Func<TIn, object[]>
  nameWithType.vb: Func(Of TIn, Object())
  fullName.vb: System.Func(Of TIn, Object())
  name.vb: Func(Of TIn, Object())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.RequireMany
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_RequireMany_NMF_Transformations_Core_GeneralTransformationRule_System_Func__0_System_Collections_Generic_IEnumerable_System_Object_____
  name: RequireMany
  nameWithType: GeneralTransformationRule<TIn>.RequireMany
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany
- uid: System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Object[]}}
  commentId: T:System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, IEnumerable<object[]>>
  nameWithType: Func<TIn, IEnumerable<object[]>>
  fullName: System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>
  nameWithType.vb: Func(Of TIn, IEnumerable(Of Object()))
  fullName.vb: System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object()))
  name.vb: Func(Of TIn, IEnumerable(Of Object()))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.Call
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_Call_NMF_Transformations_Core_GeneralTransformationRule_System_Func__0_System_Object____
  name: Call
  nameWithType: GeneralTransformationRule<TIn>.Call
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.CallMany
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_CallMany_NMF_Transformations_Core_GeneralTransformationRule_System_Func__0_System_Collections_Generic_IEnumerable_System_Object_____
  name: CallMany
  nameWithType: GeneralTransformationRule<TIn>.CallMany
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.CallByType
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_CallByType__1_System_Func__0___0__
  name: CallByType
  nameWithType: GeneralTransformationRule<TIn>.CallByType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.CallManyByType
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_CallManyByType__1_System_Func__0_System_Collections_Generic_IEnumerable___0___
  name: CallManyByType
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType
- uid: NMF.Transformations.Core.GeneralTransformationRule.InputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.InputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  href: NMF.Transformations.Core.GeneralTransformationRule.html#NMF_Transformations_Core_GeneralTransformationRule_InputType
  name: InputType
  nameWithType: GeneralTransformationRule.InputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.InputType
- uid: NMF.Transformations.GeneralTransformationRule`1.InputType*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.InputType
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).InputType
- uid: System.Type[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.CallFor
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_CallFor__1_System_Func___0__0__
  name: CallFor
  nameWithType: GeneralTransformationRule<TIn>.CallFor
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor
- uid: System.Func{{TRequiredInput},{TIn}}
  commentId: T:System.Func{``0,`0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TRequiredInput, TIn>
  nameWithType: Func<TRequiredInput, TIn>
  fullName: System.Func<TRequiredInput, TIn>
  nameWithType.vb: Func(Of TRequiredInput, TIn)
  fullName.vb: System.Func(Of TRequiredInput, TIn)
  name.vb: Func(Of TRequiredInput, TIn)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}}
  commentId: T:System.Func{``0,``1,`0}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TRequiredInput1, TRequiredInput2, TIn>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, TIn>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, TIn>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, TIn)
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, TIn)
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, TIn)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Predicate{{TRequiredInput}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<TRequiredInput>
  nameWithType: Predicate<TRequiredInput>
  fullName: System.Predicate<TRequiredInput>
  nameWithType.vb: Predicate(Of TRequiredInput)
  fullName.vb: System.Predicate(Of TRequiredInput)
  name.vb: Predicate(Of TRequiredInput)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: TRequiredInput
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean}
  commentId: T:System.Func{``0,``1,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TRequiredInput1, TRequiredInput2, bool>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, bool>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, bool>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, Boolean)
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, Boolean)
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.CallForEach
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_CallForEach__1_System_Func___0_System_Collections_Generic_IEnumerable__0___
  name: CallForEach
  nameWithType: GeneralTransformationRule<TIn>.CallForEach
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach
- uid: System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TRequiredInput, IEnumerable<TIn>>
  nameWithType: Func<TRequiredInput, IEnumerable<TIn>>
  fullName: System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>
  nameWithType.vb: Func(Of TRequiredInput, IEnumerable(Of TIn))
  fullName.vb: System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: Func(Of TRequiredInput, IEnumerable(Of TIn))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}}
  commentId: T:System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn))
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_CallForOutputSensitive__2_System_Func___0___1__0__
  name: CallForOutputSensitive
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive
- uid: System.Func{{TRequiredInput},{TRequiredOutput},{TIn}}
  commentId: T:System.Func{``0,``1,`0}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TRequiredInput, TRequiredOutput, TIn>
  nameWithType: Func<TRequiredInput, TRequiredOutput, TIn>
  fullName: System.Func<TRequiredInput, TRequiredOutput, TIn>
  nameWithType.vb: Func(Of TRequiredInput, TRequiredOutput, TIn)
  fullName.vb: System.Func(Of TRequiredInput, TRequiredOutput, TIn)
  name.vb: Func(Of TRequiredInput, TRequiredOutput, TIn)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}}
  commentId: T:System.Func{``0,``1,``2,`0}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn)
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn)
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}}
  commentId: T:NMF.Transformations.TransformationRuleBase{``0,``1}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  href: NMF.Transformations.TransformationRuleBase-2.html
  name: TransformationRuleBase<TRequiredInput, TRequiredOutput>
  nameWithType: TransformationRuleBase<TRequiredInput, TRequiredOutput>
  fullName: NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>
  nameWithType.vb: TransformationRuleBase(Of TRequiredInput, TRequiredOutput)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput)
  name.vb: TransformationRuleBase(Of TRequiredInput, TRequiredOutput)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  href: NMF.Transformations.TransformationRuleBase-2.html
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}}
  commentId: T:NMF.Transformations.TransformationRuleBase{``0,``1,``2}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`3
  href: NMF.Transformations.TransformationRuleBase-3.html
  name: TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  nameWithType: TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  fullName: NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  nameWithType.vb: TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  name.vb: TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  href: NMF.Transformations.TransformationRuleBase-3.html
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean}
  commentId: T:System.Func{``0,``1,System.Boolean}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TRequiredInput, TRequiredOutput, bool>
  nameWithType: Func<TRequiredInput, TRequiredOutput, bool>
  fullName: System.Func<TRequiredInput, TRequiredOutput, bool>
  nameWithType.vb: Func(Of TRequiredInput, TRequiredOutput, Boolean)
  fullName.vb: System.Func(Of TRequiredInput, TRequiredOutput, Boolean)
  name.vb: Func(Of TRequiredInput, TRequiredOutput, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean}
  commentId: T:System.Func{``0,``1,``2,System.Boolean}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean)
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean)
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_CallForEachOutputSensitive__2_System_Func___0___1_System_Collections_Generic_IEnumerable__0___
  name: CallForEachOutputSensitive
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive
- uid: System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
  commentId: T:System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>
  nameWithType: Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>
  fullName: System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>
  nameWithType.vb: Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn))
  fullName.vb: System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}}
  commentId: T:System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>
  nameWithType: Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>
  fullName: System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>
  nameWithType.vb: Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn))
  fullName.vb: System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn))
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.TraceInput
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_TraceInput__1_System_Func__0___0__
  name: TraceInput
  nameWithType: GeneralTransformationRule<TIn>.TraceInput
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput
- uid: System.Func{{TIn},{TKey}}
  commentId: T:System.Func{`0,``0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TIn, TKey>
  nameWithType: Func<TIn, TKey>
  fullName: System.Func<TIn, TKey>
  nameWithType.vb: Func(Of TIn, TKey)
  fullName.vb: System.Func(Of TIn, TKey)
  name.vb: Func(Of TIn, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Transformations.TraceEntryGroup{{TKey},{TIn}}
  commentId: T:NMF.Transformations.TraceEntryGroup{``0,`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.TraceEntryGroup`2
  href: NMF.Transformations.TraceEntryGroup-2.html
  name: TraceEntryGroup<TKey, TIn>
  nameWithType: TraceEntryGroup<TKey, TIn>
  fullName: NMF.Transformations.TraceEntryGroup<TKey, TIn>
  nameWithType.vb: TraceEntryGroup(Of TKey, TIn)
  fullName.vb: NMF.Transformations.TraceEntryGroup(Of TKey, TIn)
  name.vb: TraceEntryGroup(Of TKey, TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    href: NMF.Transformations.TraceEntryGroup-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    href: NMF.Transformations.TraceEntryGroup-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.TraceEntryGroup`2
  commentId: T:NMF.Transformations.TraceEntryGroup`2
  href: NMF.Transformations.TraceEntryGroup-2.html
  name: TraceEntryGroup<TKey, TOut>
  nameWithType: TraceEntryGroup<TKey, TOut>
  fullName: NMF.Transformations.TraceEntryGroup<TKey, TOut>
  nameWithType.vb: TraceEntryGroup(Of TKey, TOut)
  fullName.vb: NMF.Transformations.TraceEntryGroup(Of TKey, TOut)
  name.vb: TraceEntryGroup(Of TKey, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    href: NMF.Transformations.TraceEntryGroup-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    href: NMF.Transformations.TraceEntryGroup-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: System.Func{NMF.Transformations.Core.Computation,{TIn}}
  commentId: T:System.Func{NMF.Transformations.Core.Computation,`0}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Computation, TIn>
  nameWithType: Func<Computation, TIn>
  fullName: System.Func<NMF.Transformations.Core.Computation, TIn>
  nameWithType.vb: Func(Of Computation, TIn)
  fullName.vb: System.Func(Of NMF.Transformations.Core.Computation, TIn)
  name.vb: Func(Of Computation, TIn)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: ','
  - name: " "
  - name: TIn
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Predicate{NMF.Transformations.Core.Computation}
  commentId: T:System.Predicate{NMF.Transformations.Core.Computation}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<Computation>
  nameWithType: Predicate<Computation>
  fullName: System.Predicate<NMF.Transformations.Core.Computation>
  nameWithType.vb: Predicate(Of Computation)
  fullName.vb: System.Predicate(Of NMF.Transformations.Core.Computation)
  name.vb: Predicate(Of Computation)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
- uid: System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{{TIn}}}
  commentId: T:System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<Computation, IEnumerable<TIn>>
  nameWithType: Func<Computation, IEnumerable<TIn>>
  fullName: System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>
  nameWithType.vb: Func(Of Computation, IEnumerable(Of TIn))
  fullName.vb: System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: Func(Of Computation, IEnumerable(Of TIn))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.ToString*
  commentId: Overload:NMF.Transformations.GeneralTransformationRule`1.ToString
  href: NMF.Transformations.GeneralTransformationRule-1.html#NMF_Transformations_GeneralTransformationRule_1_ToString
  name: ToString
  nameWithType: GeneralTransformationRule<TIn>.ToString
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString
  nameWithType.vb: GeneralTransformationRule(Of TIn).ToString
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
