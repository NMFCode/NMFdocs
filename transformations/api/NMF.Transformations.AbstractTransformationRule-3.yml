### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.AbstractTransformationRule`3
  commentId: T:NMF.Transformations.AbstractTransformationRule`3
  id: AbstractTransformationRule`3
  parent: NMF.Transformations
  children:
  - NMF.Transformations.AbstractTransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  langs:
  - csharp
  - vb
  name: AbstractTransformationRule<TIn1, TIn2, TOut>
  nameWithType: AbstractTransformationRule<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.AbstractTransformationRule<TIn1, TIn2, TOut>
  type: Class
  source:
    remote:
      path: Transformations/Transformations/NTL/AbstractTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AbstractTransformationRule
    path: src/Transformations/Transformations/NTL/AbstractTransformationRule.cs
    startLine: 40
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nDefines a transformation rule with two input arguments that is abstract, i.e. it cannot create an output\nThis means that there must exist transformation rules that are marked instantiating for this rule. \n"
  example: []
  syntax:
    content: 'public abstract class AbstractTransformationRule<TIn1, TIn2, TOut> : TransformationRule<TIn1, TIn2, TOut> where TIn1 : class where TIn2 : class where TOut : class'
    typeParameters:
    - id: TIn1
      description: The type of the first input argument for this transformation rule
    - id: TIn2
      description: The type of the second input argument for this transformation rule
    - id: TOut
      description: The type of output, that is generated in an instantiating rule
    content.vb: >-
      Public MustInherit Class AbstractTransformationRule(Of TIn1 As Class, TIn2 As Class, TOut As Class)
          Inherits TransformationRule(Of TIn1, TIn2, TOut)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  - NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}
  inheritedMembers:
  - NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.NeedDependenciesForOutputCreation
  - NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.CreateOutput({TIn1},{TIn2},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.Transform({TIn1},{TIn2},{TOut},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.MarkInstantiatingFor``3
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.MarkInstantiatingFor``3(System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.OutputType
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireByType``3(System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireByType``3(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireManyByType``3(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallByType``3(System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallByType``3(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyByType``3(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput2}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.TraceOutput``1(System.Func{{TIn1},{TIn2},{TOut},{TKey}})
  - NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},{TOut}},System.Func{{TIn1},{TIn2},{TOut},{TKey}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Rule``1
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.InputType
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(NMF.Transformations.ITransformationRulePattern{{TIn1},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.ToString
  - NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - NMF.Transformations.Core.GeneralTransformationRule.InputType
  - NMF.Transformations.Core.GeneralTransformationRule.OutputType
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean)
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean)
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  nameWithType.vb: AbstractTransformationRule(Of TIn1, TIn2, TOut)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Transformations.AbstractTransformationRule(Of TIn1, TIn2, TOut)
  name.vb: AbstractTransformationRule(Of TIn1, TIn2, TOut)
- uid: NMF.Transformations.AbstractTransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.AbstractTransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  id: CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.AbstractTransformationRule`3
  langs:
  - csharp
  - vb
  name: CreateOutput(TIn1, TIn2, ITransformationContext)
  nameWithType: AbstractTransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, ITransformationContext)
  fullName: NMF.Transformations.AbstractTransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/AbstractTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateOutput
    path: src/Transformations/Transformations/NTL/AbstractTransformationRule.cs
    startLine: 53
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates the output of this transformation rule\n"
  remarks: Creation of transformation rule outputs is not supported for abstract transformation rules and thus, calling this method will result in an InvalidOperationException
  example: []
  syntax:
    content: public override TOut CreateOutput(TIn1 input1, TIn2 input2, ITransformationContext context)
    parameters:
    - id: input1
      type: '{TIn1}'
      description: The first input argument for this computation
    - id: input2
      type: '{TIn2}'
      description: The second input argument for this computation
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the output is required
    return:
      type: '{TOut}'
      description: The output for this transformation
    content.vb: Public Overrides Function CreateOutput(input1 As TIn1, input2 As TIn2, context As ITransformationContext) As TOut
  overridden: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.CreateOutput({TIn1},{TIn2},NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Transformations.AbstractTransformationRule`3.CreateOutput*
  nameWithType.vb: AbstractTransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, ITransformationContext)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Transformations.AbstractTransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`2
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  commentId: T:NMF.Transformations.TransformationRuleBase{`0,`1,`2}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}
  commentId: T:NMF.Transformations.TransformationRule{`0,`1,`2}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRule`3
  name: TransformationRule<TIn1, TIn2, TOut>
  nameWithType: TransformationRule<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut)
  name.vb: TransformationRule(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule{`0,`1,`2}.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRule`3.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule{`0,`1,`2}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateComputation
    fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule(Of TIn1, TIn2, TOut).CreateComputation
    fullName: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.CreateOutput({TIn1},{TIn2},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{`0,`1,`2}.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(TIn1, TIn2, ITransformationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateOutput
    fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule(Of TIn1, TIn2, TOut).CreateOutput
    fullName: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}.Transform({TIn1},{TIn2},{TOut},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{`0,`1,`2}.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
  name: Transform(TIn1, TIn2, TOut, ITransformationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.Transform(TIn1, TIn2, TOut, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.Transform(TIn1, TIn2, TOut, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).Transform(TIn1, TIn2, TOut, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).Transform(TIn1, TIn2, TOut, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule<TIn1, TIn2, TOut>.Transform
    fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule(Of TIn1, TIn2, TOut).Transform
    fullName: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).Transform
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.MarkInstantiatingFor``3
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.MarkInstantiatingFor``3
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
    name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
    name: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.MarkInstantiatingFor``3(System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.OutputType
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireByType``3(System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.RequireByType``3(System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
    name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireByType``3(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: RequireByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: RequireByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireManyByType``3(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallByType``3(System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallByType``3(System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
    name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
    name: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallByType``3(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: CallByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: CallByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},{TRequiredInput}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Call<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Call(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyByType``3(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{{TOut},System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TOut},{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{{TOut}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput2}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TOut},System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{{TIn1},{TIn2},{TOut},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.TraceOutput``1(System.Func{{TIn1},{TIn2},{TOut},{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.TraceOutput``1(System.Func{`0,`1,`2,``0})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  name: TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(System.Func<TIn1, TIn2, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},{TOut}},System.Func{{TIn1},{TIn2},{TOut},{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{`0,`1,`2}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  parent: NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}}
  definition: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TOut>, System.Func<TIn1, TIn2, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TOut), System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  name: MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Rule``1
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule<TRule>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule(Of TRule)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule{`0,`1}.InputType
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).InputType
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(NMF.Transformations.ITransformationRulePattern{{TIn1},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  name: WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireByType``2
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  name: RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireByType``1(System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  name: RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  name: Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallByType``2
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  name: CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``2(System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallByType``1(System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallByType``1(System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  name: CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},{TRequiredInput1}},System.Func{{TIn1},{TIn2},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``2(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallManyByType``1(System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn1}},System.Func{{TRequiredInput},{TIn2}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn1}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn2}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{{TIn1},{TIn2}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{{TIn1},{TIn2}}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  name: Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn1},{TIn2},System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0,`1}.ToString
  parent: NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}}
  definition: NMF.Transformations.GeneralTransformationRule`2.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).ToString
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
    nameWithType: GeneralTransformationRule.RegisterDependencies
    fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.InputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.InputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: InputType
  nameWithType: GeneralTransformationRule.InputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.InputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: GeneralTransformationRule.CreateComputation
    fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
    nameWithType: GeneralTransformationRule.IsInstantiating
    fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
    nameWithType: GeneralTransformationRule.HasCompliantInput
    fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
    nameWithType: GeneralTransformationRule.Require
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
    nameWithType: GeneralTransformationRule.Call
    fullName: NMF.Transformations.Core.GeneralTransformationRule.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule.MarkInstantiatingFor
    fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  name: ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  name: ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext, Boolean)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext, Boolean)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationContext, System.Boolean)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationContext, System.Boolean)
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  name: ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext, Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext, Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext, Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut), System.Boolean))
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext, Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  name: ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext, Boolean, Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(ITransformationContext, Boolean, Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationContext, System.Boolean, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationContext, System.Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut), System.Boolean))
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)(ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  name: ToComputationSource<TIn1, TIn2, TOut>()
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>()
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>()
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)()
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)()
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)()
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  name: ToComputationSource<TIn1, TIn2, TOut>(Boolean)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(Boolean)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(System.Boolean)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(System.Boolean)
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)(Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean)
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean)
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  name: ToComputationSource<TIn1, TIn2, TOut>(Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut), System.Boolean))
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)(Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase{`0,`1,`2}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TIn1},{TIn2},{TOut}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  name: ToComputationSource<TIn1, TIn2, TOut>(Boolean, Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(Boolean, Func<TransformationComputationWrapper<TIn1, TIn2, TOut>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>(System.Boolean, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TIn1, TIn2, TOut>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(Boolean, Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)(System.Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TIn1, TIn2, TOut), System.Boolean))
  name.vb: ToComputationSource(Of TIn1, TIn2, TOut)(Boolean, Func(Of TransformationComputationWrapper(Of TIn1, TIn2, TOut), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TIn1, TIn2, TOut>
    nameWithType: IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TIn1, TIn2, TOut)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations.GeneralTransformationRule`2
  commentId: T:NMF.Transformations.GeneralTransformationRule`2
  parent: NMF.Transformations
  name: GeneralTransformationRule<TIn1, TIn2>
  nameWithType: GeneralTransformationRule<TIn1, TIn2>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2)
  name.vb: GeneralTransformationRule(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`3
  commentId: T:NMF.Transformations.TransformationRule`3
  name: TransformationRule<TIn1, TIn2, TOut>
  nameWithType: TransformationRule<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut)
  name.vb: TransformationRule(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3
    name: TransformationRule
    nameWithType: TransformationRule
    fullName: NMF.Transformations.TransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`3.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule`3.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  isExternal: true
  name: CreateComputation(Object[], IComputationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateComputation(Object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateComputation(System.Object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateComputation(System.Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateComputation
    fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
    nameWithType: TransformationRule(Of TIn1, TIn2, TOut).CreateComputation
    fullName: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateComputation
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
    nameWithType: IComputationContext
    fullName: NMF.Transformations.Core.IComputationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(TIn1, TIn2, ITransformationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateOutput(TIn1, TIn2, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule<TIn1, TIn2, TOut>.CreateOutput
    fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.CreateOutput(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
    nameWithType: TransformationRule(Of TIn1, TIn2, TOut).CreateOutput
    fullName: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).CreateOutput
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
  name: Transform(TIn1, TIn2, TOut, ITransformationContext)
  nameWithType: TransformationRule<TIn1, TIn2, TOut>.Transform(TIn1, TIn2, TOut, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.Transform(TIn1, TIn2, TOut, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn1, TIn2, TOut).Transform(TIn1, TIn2, TOut, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).Transform(TIn1, TIn2, TOut, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule<TIn1, TIn2, TOut>.Transform
    fullName: NMF.Transformations.TransformationRule<TIn1, TIn2, TOut>.Transform
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`3.Transform(`0,`1,`2,NMF.Transformations.Core.ITransformationContext)
    name: Transform
    nameWithType: TransformationRule(Of TIn1, TIn2, TOut).Transform
    fullName: NMF.Transformations.TransformationRule(Of TIn1, TIn2, TOut).Transform
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  commentId: M:NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>()
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
    name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3
    name: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.MarkInstantiatingFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.MarkInstantiatingFor``3(System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).MarkInstantiatingFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase`3.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.OutputType
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).OutputType
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
    name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Action{`2,``2})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: RequireByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: RequireByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Require<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Require<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Require(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Require(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.RequireMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
    name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Action{`2,``2})
    name: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Action{`2,``2})
    name: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``3(System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: CallByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallByType``2(System.Func{`0,`1,``0},System.Action{`2,``1})
    name: CallByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Action{`2,``2})
    name: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Call<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.Call<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,``0},System.Action{`2,``1})
    name: Call(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).Call(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``3(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`2,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallMany<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Action{`2,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallMany(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean},System.Action{`2,``2})
    name: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallFor<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean},System.Action{`2,``1})
    name: CallFor(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallFor(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach<TRequiredInput, TRequiredOutput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallForEach<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean},System.Action{``1,System.Collections.Generic.IEnumerable{`2}})
    name: CallForEach(Of TRequiredInput, TRequiredOutput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, TRequiredInput1>, Func<TIn1, TIn2, TOut, TRequiredInput2>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, TRequiredInput1>, System.Func<TIn1, TIn2, TOut, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, TRequiredInput1), System.Func(Of TIn1, TIn2, TOut, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, TRequiredInput1), Func(Of TIn1, TIn2, TOut, TRequiredInput2), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,``1},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, TRequiredInput>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, TRequiredInput), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,``0},System.Func{`0,`1,`2,System.Boolean})
    name: CallOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, Boolean>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TOut, IEnumerable<TRequiredInput>>, Func<TIn1, TIn2, TOut, Boolean>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<TIn1, TIn2, TOut, System.Boolean>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of TIn1, TIn2, TOut, System.Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn1, TIn2, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive<TRequiredInput>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.CallManyOutputSensitive<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,`2,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,`2,System.Boolean})
    name: CallManyOutputSensitive(Of TRequiredInput)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).CallManyOutputSensitive(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
  isExternal: true
  name: TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(System.Func<TIn1, TIn2, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of TIn1, TIn2, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(System.Func{`0,`1,`2,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
  isExternal: true
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn1, TIn2, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TOut>, System.Func<TIn1, TIn2, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TOut), System.Func(Of TIn1, TIn2, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn1, TIn2, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
    name: TraceOutput<TKey>
    nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
    fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>.TraceOutput<TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`2},System.Func{`0,`1,`2,``0})
    name: TraceOutput(Of TKey)
    nameWithType: TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
    fullName: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut).TraceOutput(Of TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
    nameWithType: TraceEntryGroup
    fullName: NMF.Transformations.TraceEntryGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(GeneralTransformationRule, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Boolean})
    name: MarkInstantiatingFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).MarkInstantiatingFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule<TRule>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Rule``1
    name: Rule(Of TRule)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`2.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).InputType
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
  name: WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(ITransformationRulePattern<TIn1, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn1, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn1, TIn2))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn1, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(NMF.Transformations.ITransformationRulePattern{`0,`1})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.ITransformationRulePattern`2
    name: ITransformationRulePattern
    nameWithType: ITransformationRulePattern
    fullName: NMF.Transformations.ITransformationRulePattern
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, INotifyEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern(Func<ITransformationContext, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: WithPattern
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).WithPattern
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).WithPattern
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
  name: RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: RequireByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
  isExternal: true
  name: RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireByType``1(System.Func{`0,`1,``0})
    name: RequireByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Require(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Require(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Require(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  isExternal: true
  name: Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Require
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Require
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Require
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Require
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``2
  name: CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)()
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``2(System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
  isExternal: true
  name: CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>(System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallByType``1(System.Func{`0,`1,``0})
    name: CallByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, TRequiredInput1>, Func<TIn1, TIn2, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, TRequiredInput1>, System.Func<TIn1, TIn2, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, TRequiredInput1), System.Func(Of TIn1, TIn2, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, TRequiredInput1), Func(Of TIn1, TIn2, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: Call(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: Call(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: Call(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>(System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)(System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallManyByType<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallManyByType``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallManyByType(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn1, TIn2, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn1, TIn2, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn1, TIn2, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn1, TIn2, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn1>, Func<TRequiredInput1, TRequiredInput2, TIn2>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TIn2), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallFor(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn1>, Func<TRequiredInput, TIn2>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn1>, System.Func<TRequiredInput, TIn2>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn1), System.Func(Of TRequiredInput, TIn2), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn1), Func(Of TRequiredInput, TIn2), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Func{``0,`1},System.Func{``0,System.Boolean})
    name: CallFor(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn1), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn2), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,`1},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn1>, Func<TRequiredInput, TRequiredOutput, TIn2>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn1>, System.Func<TRequiredInput, TRequiredOutput, TIn2>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn1), System.Func(Of TRequiredInput, TRequiredOutput, TIn2), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn1), Func(Of TRequiredInput, TRequiredOutput, TIn2), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,`1},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach<TRequiredInput1, TRequiredInput2>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput1, TRequiredInput2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEach(Of TRequiredInput1, TRequiredInput2)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput1, TRequiredInput2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, System.Boolean))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach<TRequiredInput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach<TRequiredInput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,System.Boolean})
    name: CallForEach(Of TRequiredInput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(Of TRequiredInput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput1
    nameWithType: TRequiredInput1
    fullName: TRequiredInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredInput2
    nameWithType: TRequiredInput2
    fullName: TRequiredInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<Tuple<TIn1, TIn2>>>, Func<TRequiredInput, TRequiredOutput, Boolean>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Func<TRequiredInput, TRequiredOutput, System.Boolean>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Func(Of TRequiredInput, TRequiredOutput, System.Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of Tuple(Of TIn1, TIn2))), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRequiredInput
    nameWithType: TRequiredInput
    fullName: TRequiredInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRequiredOutput
    nameWithType: TRequiredOutput
    fullName: TRequiredOutput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor(GeneralTransformationRule, Func<Computation, Tuple<TIn1, TIn2>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Tuple<TIn1, TIn2>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Tuple(Of TIn1, TIn2)), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, Tuple(Of TIn1, TIn2)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallFor
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Tuple{`0,`1}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallFor
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<Tuple<TIn1, TIn2>>>, Predicate<Computation>, Boolean)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<System.Tuple<TIn1, TIn2>>>, System.Predicate<NMF.Transformations.Core.Computation>, System.Boolean)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TIn1, TIn2))), System.Predicate(Of NMF.Transformations.Core.Computation), System.Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of Tuple(Of TIn1, TIn2))), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallForEach
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallForEach
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).RequireMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).RequireMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
  isExternal: true
  name: Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call(GeneralTransformationRule, Func<TIn1, TIn2, Object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn1, TIn2, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.Call
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Object[]})
    name: Call
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).Call
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).Call
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany(GeneralTransformationRule, Func<TIn1, TIn2, IEnumerable<Object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn1, TIn2, System.Collections.Generic.IEnumerable<System.Object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn1, TIn2, System.Collections.Generic.IEnumerable(Of System.Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn1, TIn2, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.CallMany
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).CallMany
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).CallMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.GeneralTransformationRule`2.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`2.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn1, TIn2).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule<TIn1, TIn2>.ToString
    fullName: NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`2.ToString
    name: ToString
    nameWithType: GeneralTransformationRule(Of TIn1, TIn2).ToString
    fullName: NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2).ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions
  commentId: T:NMF.Transformations.Linq.IncrementalExtensions
  parent: NMF.Transformations.Linq
  name: IncrementalExtensions
  nameWithType: IncrementalExtensions
  fullName: NMF.Transformations.Linq.IncrementalExtensions
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  isExternal: true
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Boolean)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Boolean)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext, System.Boolean)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext, System.Boolean)
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), System.Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Boolean, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Boolean, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext, System.Boolean, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext, System.Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), System.Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    nameWithType: ITransformationContext
    fullName: NMF.Transformations.Core.ITransformationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  isExternal: true
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Boolean)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Boolean)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, System.Boolean)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), System.Boolean)
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), System.Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Boolean, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Boolean, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, Boolean>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, System.Boolean, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, System.Boolean>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), System.Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), System.Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource<TInput1, TInput2, TOutput>
    nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
    name: ToComputationSource(Of TInput1, TInput2, TOutput)
    nameWithType: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
    fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    nameWithType: TransformationComputationWrapper
    fullName: NMF.Transformations.Linq.TransformationComputationWrapper
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput1
    nameWithType: TInput1
    fullName: TInput1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInput2
    nameWithType: TInput2
    fullName: TInput2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
- uid: NMF.Transformations.AbstractTransformationRule`3.CreateOutput*
  commentId: Overload:NMF.Transformations.AbstractTransformationRule`3.CreateOutput
  name: CreateOutput
  nameWithType: AbstractTransformationRule<TIn1, TIn2, TOut>.CreateOutput
  fullName: NMF.Transformations.AbstractTransformationRule<TIn1, TIn2, TOut>.CreateOutput
  nameWithType.vb: AbstractTransformationRule(Of TIn1, TIn2, TOut).CreateOutput
  fullName.vb: NMF.Transformations.AbstractTransformationRule(Of TIn1, TIn2, TOut).CreateOutput
- uid: '{TIn1}'
  commentId: '!:TIn1'
  definition: TIn1
  name: TIn1
  nameWithType: TIn1
  fullName: TIn1
- uid: '{TIn2}'
  commentId: '!:TIn2'
  definition: TIn2
  name: TIn2
  nameWithType: TIn2
  fullName: TIn2
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: '{TOut}'
  commentId: '!:TOut'
  definition: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
- uid: TIn1
  name: TIn1
  nameWithType: TIn1
  fullName: TIn1
- uid: TIn2
  name: TIn2
  nameWithType: TIn2
  fullName: TIn2
- uid: TOut
  name: TOut
  nameWithType: TOut
  fullName: TOut
