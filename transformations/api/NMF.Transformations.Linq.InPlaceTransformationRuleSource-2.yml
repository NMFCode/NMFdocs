### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  commentId: T:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  id: InPlaceTransformationRuleSource`2
  parent: NMF.Transformations.Linq
  children:
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0,`1},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.CollectionChanged
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Context
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dependencies
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose(System.Boolean)
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecuteBefore
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecutionMetaData
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Filter
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.GetEnumerator
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.HandleDependency(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Successors
  - NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.TransformationRule
  langs:
  - csharp
  - vb
  name: InPlaceTransformationRuleSource<TIn1, TIn2>
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>
  type: Class
  source:
    id: InPlaceTransformationRuleSource
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 424
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Represents the usage of a transformation rule with two input arguments in a relational pattern
  example: []
  syntax:
    content: 'public class InPlaceTransformationRuleSource<TIn1, TIn2> : ITransformationRuleDependency, INotifyEnumerable<InPlaceComputationWrapper<TIn1, TIn2>>, IEnumerable<InPlaceComputationWrapper<TIn1, TIn2>>, INotifyEnumerable, IEnumerable, INotifyCollectionChanged, INotifiable, IDisposable where TIn1 : class where TIn2 : class'
    typeParameters:
    - id: TIn1
      description: The type of the first transformation rule input argument
    - id: TIn2
      description: The type of the second transformation rule input argument
    content.vb: Public Class InPlaceTransformationRuleSource(Of TIn1 As Class, TIn2 As Class) Implements ITransformationRuleDependency, INotifyEnumerable(Of InPlaceComputationWrapper(Of TIn1, TIn2)), IEnumerable(Of InPlaceComputationWrapper(Of TIn1, TIn2)), INotifyEnumerable, IEnumerable, INotifyCollectionChanged, INotifiable, IDisposable
  inheritance:
  - System.Object
  implements:
  - NMF.Transformations.Core.ITransformationRuleDependency
  - NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}
  - System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}
  - NMF.Expressions.INotifyEnumerable
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Expressions.INotifiable
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2)
  name.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0,`1},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0,`1},NMF.Transformations.Core.ITransformationContext)
  id: '#ctor(NMF.Transformations.InPlaceTransformationRuleBase{`0,`1},NMF.Transformations.Core.ITransformationContext)'
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: InPlaceTransformationRuleSource(InPlaceTransformationRuleBase<TIn1, TIn2>, ITransformationContext)
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.InPlaceTransformationRuleSource(InPlaceTransformationRuleBase<TIn1, TIn2>, ITransformationContext)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.InPlaceTransformationRuleSource(NMF.Transformations.InPlaceTransformationRuleBase<TIn1, TIn2>, NMF.Transformations.Core.ITransformationContext)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 433
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new TransformationRuleSource instance for the given transformation rule in the given context
  example: []
  syntax:
    content: public InPlaceTransformationRuleSource(InPlaceTransformationRuleBase<TIn1, TIn2> rule, ITransformationContext context)
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TIn1},{TIn2}}
      description: The transformation rule that should be used as source
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the computations should be used by the current instance
    content.vb: Public Sub New(rule As InPlaceTransformationRuleBase(Of TIn1, TIn2), context As ITransformationContext)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.#ctor*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).New(InPlaceTransformationRuleBase(Of TIn1, TIn2), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).New(NMF.Transformations.InPlaceTransformationRuleBase(Of TIn1, TIn2), NMF.Transformations.Core.ITransformationContext)
  name.vb: New(InPlaceTransformationRuleBase(Of TIn1, TIn2), ITransformationContext)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.TransformationRule
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.TransformationRule
  id: TransformationRule
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: TransformationRule
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.TransformationRule
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.TransformationRule
  type: Property
  source:
    id: TransformationRule
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 454
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets the transformation rule this transformation rule source is responsible for
  example: []
  syntax:
    content: public InPlaceTransformationRuleBase<TIn1, TIn2> TransformationRule { get; }
    parameters: []
    return:
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TIn1},{TIn2}}
    content.vb: Public Property TransformationRule As InPlaceTransformationRuleBase(Of TIn1, TIn2)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.TransformationRule*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).TransformationRule
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).TransformationRule
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Context
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Context
  id: Context
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Context
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Context
  type: Property
  source:
    id: Context
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 459
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets the context in which the transformation rule source is active
  example: []
  syntax:
    content: public ITransformationContext Context { get; }
    parameters: []
    return:
      type: NMF.Transformations.Core.ITransformationContext
    content.vb: Public Property Context As ITransformationContext
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Context*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Context
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Context
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Filter
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Filter
  id: Filter
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Filter
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Filter
  type: Property
  source:
    id: Filter
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 464
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets or sets the filter to be used to filter computations
  example: []
  syntax:
    content: public Func<InPlaceComputationWrapper<TIn1, TIn2>, bool> Filter { get; set; }
    parameters: []
    return:
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}},System.Boolean}
    content.vb: Public Property Filter As Func(Of InPlaceComputationWrapper(Of TIn1, TIn2), Boolean)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Filter*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Filter
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Filter
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.HandleDependency(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.HandleDependency(NMF.Transformations.Core.Computation)
  id: HandleDependency(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: HandleDependency(Computation)
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.HandleDependency(Computation)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.HandleDependency(NMF.Transformations.Core.Computation)
  type: Method
  source:
    id: HandleDependency
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 470
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Receives a new computation from the computation rule
  example: []
  syntax:
    content: public void HandleDependency(Computation computation)
    parameters:
    - id: computation
      type: NMF.Transformations.Core.Computation
      description: The computation that is received
    content.vb: Public Sub HandleDependency(computation As Computation)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.HandleDependency*
  implements:
  - NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).HandleDependency(Computation)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).HandleDependency(NMF.Transformations.Core.Computation)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecuteBefore
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecuteBefore
  id: ExecuteBefore
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: ExecuteBefore
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.ExecuteBefore
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.ExecuteBefore
  type: Property
  source:
    id: ExecuteBefore
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 484
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets or sets a value indicating whether the computation object should be forwarded before or after the dependencies are resolved
  example: []
  syntax:
    content: public bool ExecuteBefore { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ExecuteBefore As Boolean
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecuteBefore*
  implements:
  - NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecuteBefore
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecuteBefore
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose
  id: Dispose
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Dispose()
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Dispose()
  type: Method
  source:
    id: Dispose
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 493
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Clears dependencies
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Dispose()
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Dispose()
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose(System.Boolean)
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Dispose(bool)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Dispose(bool)
  type: Method
  source:
    id: Dispose
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 503
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Clears dependencies
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: A value indicating whether Dispose was called
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose*
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Dispose(Boolean)
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.GetEnumerator
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.GetEnumerator
  id: GetEnumerator
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.GetEnumerator()
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 523
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets an enumerator that enumerates the collected computations so far
  example: []
  syntax:
    content: public IEnumerator<InPlaceComputationWrapper<TIn1, TIn2>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}
      description: An enumerator
    content.vb: Public Function GetEnumerator() As IEnumerator(Of InPlaceComputationWrapper(Of TIn1, TIn2))
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}.GetEnumerator
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).GetEnumerator()
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).GetEnumerator()
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Successors
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Successors
  id: Successors
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Successors
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Successors
  type: Property
  source:
    id: Successors
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 535
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: The nodes that will get notified by this node.
  example: []
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Successors*
  implements:
  - NMF.Expressions.INotifiable.Successors
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Successors
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Successors
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dependencies
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dependencies
  id: Dependencies
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Dependencies
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Dependencies
  type: Property
  source:
    id: Dependencies
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 538
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Nodes that notify this node.
  example: []
  syntax:
    content: public IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dependencies*
  implements:
  - NMF.Expressions.INotifiable.Dependencies
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Dependencies
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Dependencies
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecutionMetaData
  commentId: P:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.ExecutionMetaData
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.ExecutionMetaData
  type: Property
  source:
    id: ExecutionMetaData
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 541
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Used by the execution engine during incremental execution.
  example: []
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecutionMetaData*
  implements:
  - NMF.Expressions.INotifiable.ExecutionMetaData
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecutionMetaData
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecutionMetaData
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Notify(IList<INotificationResult>)
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    id: Notify
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 544
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets called when one of the dependencies signals a notification.
  example: []
  syntax:
    content: public INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
      description: Contains information about what triggered this notification.
    return:
      type: NMF.Expressions.INotificationResult
      description: An object describing the changes that happened in this notification.
    content.vb: Public Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Notify*
  implements:
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.CollectionChanged
  commentId: E:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.CollectionChanged
  id: CollectionChanged
  parent: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.CollectionChanged
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.CollectionChanged
  type: Event
  source:
    id: CollectionChanged
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Transformations\Transformations\Linq\TransformationRuleSource.cs
    startLine: 552
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Gets fired when new elements appear in the trace
  example: []
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).CollectionChanged
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).CollectionChanged
references:
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  href: NMF.html
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
    href: NMF.Transformations.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
    href: NMF.Transformations.Linq.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.ITransformationRuleDependency
  commentId: T:NMF.Transformations.Core.ITransformationRuleDependency
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.ITransformationRuleDependency.html
  name: ITransformationRuleDependency
  nameWithType: ITransformationRuleDependency
  fullName: NMF.Transformations.Core.ITransformationRuleDependency
- uid: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0,`1}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  name: INotifyEnumerable<InPlaceComputationWrapper<TIn1, TIn2>>
  nameWithType: INotifyEnumerable<InPlaceComputationWrapper<TIn1, TIn2>>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn1, TIn2>>
  nameWithType.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TIn1, TIn2))
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn1, TIn2))
  name.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TIn1, TIn2))
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<InPlaceComputationWrapper<TIn1, TIn2>>
  nameWithType: IEnumerable<InPlaceComputationWrapper<TIn1, TIn2>>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn1, TIn2>>
  nameWithType.vb: IEnumerable(Of InPlaceComputationWrapper(Of TIn1, TIn2))
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn1, TIn2))
  name.vb: IEnumerable(Of InPlaceComputationWrapper(Of TIn1, TIn2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.specialized.inotifycollectionchanged
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  href: NMF.html
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.specialized
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.specialized
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.#ctor*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.#ctor
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2__ctor_NMF_Transformations_InPlaceTransformationRuleBase__0__1__NMF_Transformations_Core_ITransformationContext_
  name: InPlaceTransformationRuleSource
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.InPlaceTransformationRuleSource
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.InPlaceTransformationRuleSource
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).New
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).New
  name.vb: New
- uid: NMF.Transformations.InPlaceTransformationRuleBase{{TIn1},{TIn2}}
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase{`0,`1}
  parent: NMF.Transformations
  definition: NMF.Transformations.InPlaceTransformationRuleBase`2
  href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  name: InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType: InPlaceTransformationRuleBase<TIn1, TIn2>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TIn1, TIn2)
  name.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.ITransformationContext.html
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: NMF.Transformations.InPlaceTransformationRuleBase`2
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase`2
  href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  name: InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType: InPlaceTransformationRuleBase<TIn1, TIn2>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TIn1, TIn2)
  name.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  href: NMF.html
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.TransformationRule*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.TransformationRule
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_TransformationRule
  name: TransformationRule
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.TransformationRule
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.TransformationRule
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).TransformationRule
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).TransformationRule
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Context*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Context
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_Context
  name: Context
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Context
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Context
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Context
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Context
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Filter*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Filter
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_Filter
  name: Filter
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Filter
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Filter
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Filter
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Filter
- uid: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}},System.Boolean}
  commentId: T:System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0,`1},System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<InPlaceComputationWrapper<TIn1, TIn2>, bool>
  nameWithType: Func<InPlaceComputationWrapper<TIn1, TIn2>, bool>
  fullName: System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn1, TIn2>, bool>
  nameWithType.vb: Func(Of InPlaceComputationWrapper(Of TIn1, TIn2), Boolean)
  fullName.vb: System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn1, TIn2), Boolean)
  name.vb: Func(Of InPlaceComputationWrapper(Of TIn1, TIn2), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.HandleDependency*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.HandleDependency
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_HandleDependency_NMF_Transformations_Core_Computation_
  name: HandleDependency
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.HandleDependency
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.HandleDependency
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).HandleDependency
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).HandleDependency
- uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.ITransformationRuleDependency
  href: NMF.Transformations.Core.ITransformationRuleDependency.html#NMF_Transformations_Core_ITransformationRuleDependency_HandleDependency_NMF_Transformations_Core_Computation_
  name: HandleDependency(Computation)
  nameWithType: ITransformationRuleDependency.HandleDependency(Computation)
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
    name: HandleDependency
    href: NMF.Transformations.Core.ITransformationRuleDependency.html#NMF_Transformations_Core_ITransformationRuleDependency_HandleDependency_NMF_Transformations_Core_Computation_
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationRuleDependency.HandleDependency(NMF.Transformations.Core.Computation)
    name: HandleDependency
    href: NMF.Transformations.Core.ITransformationRuleDependency.html#NMF_Transformations_Core_ITransformationRuleDependency_HandleDependency_NMF_Transformations_Core_Computation_
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    href: NMF.Transformations.Core.Computation.html
  - name: )
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.Computation.html
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecuteBefore*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecuteBefore
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_ExecuteBefore
  name: ExecuteBefore
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.ExecuteBefore
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.ExecuteBefore
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecuteBefore
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecuteBefore
- uid: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  commentId: P:NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
  parent: NMF.Transformations.Core.ITransformationRuleDependency
  href: NMF.Transformations.Core.ITransformationRuleDependency.html#NMF_Transformations_Core_ITransformationRuleDependency_ExecuteBefore
  name: ExecuteBefore
  nameWithType: ITransformationRuleDependency.ExecuteBefore
  fullName: NMF.Transformations.Core.ITransformationRuleDependency.ExecuteBefore
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dispose
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_Dispose
  name: Dispose
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Dispose
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Dispose
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Dispose
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.GetEnumerator*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.GetEnumerator
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_GetEnumerator
  name: GetEnumerator
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.GetEnumerator
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.GetEnumerator
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).GetEnumerator
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<InPlaceComputationWrapper<TIn1, TIn2>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn1, TIn2>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of InPlaceComputationWrapper(Of TIn1, TIn2)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn1, TIn2)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{`0,`1}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn1},{TIn2}}}
  commentId: T:System.Collections.Generic.IEnumerator{NMF.Transformations.Linq.InPlaceComputationWrapper{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<InPlaceComputationWrapper<TIn1, TIn2>>
  nameWithType: IEnumerator<InPlaceComputationWrapper<TIn1, TIn2>>
  fullName: System.Collections.Generic.IEnumerator<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn1, TIn2>>
  nameWithType.vb: IEnumerator(Of InPlaceComputationWrapper(Of TIn1, TIn2))
  fullName.vb: System.Collections.Generic.IEnumerator(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn1, TIn2))
  name.vb: IEnumerator(Of InPlaceComputationWrapper(Of TIn1, TIn2))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Successors*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Successors
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_Successors
  name: Successors
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Successors
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Successors
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Successors
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Successors
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dependencies*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Dependencies
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_Dependencies
  name: Dependencies
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Dependencies
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Dependencies
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Dependencies
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Dependencies
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecutionMetaData*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.ExecutionMetaData
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.ExecutionMetaData
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.ExecutionMetaData
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecutionMetaData
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).ExecutionMetaData
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Notify*
  commentId: Overload:NMF.Transformations.Linq.InPlaceTransformationRuleSource`2.Notify
  href: NMF.Transformations.Linq.InPlaceTransformationRuleSource-2.html#NMF_Transformations_Linq_InPlaceTransformationRuleSource_2_Notify_System_Collections_Generic_IList_NMF_Expressions_INotificationResult__
  name: Notify
  nameWithType: InPlaceTransformationRuleSource<TIn1, TIn2>.Notify
  fullName: NMF.Transformations.Linq.InPlaceTransformationRuleSource<TIn1, TIn2>.Notify
  nameWithType.vb: InPlaceTransformationRuleSource(Of TIn1, TIn2).Notify
  fullName.vb: NMF.Transformations.Linq.InPlaceTransformationRuleSource(Of TIn1, TIn2).Notify
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.specialized.inotifycollectionchanged.collectionchanged
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.specialized.notifycollectionchangedeventhandler
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
