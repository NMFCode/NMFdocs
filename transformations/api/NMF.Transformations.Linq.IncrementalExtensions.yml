### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Linq.IncrementalExtensions
  commentId: T:NMF.Transformations.Linq.IncrementalExtensions
  id: IncrementalExtensions
  parent: NMF.Transformations.Linq
  children:
  - NMF.Transformations.Linq.IncrementalExtensions.SelectMany``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}})
  - NMF.Transformations.Linq.IncrementalExtensions.SelectMany``3(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - NMF.Transformations.Linq.IncrementalExtensions.Select``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  - NMF.Transformations.Linq.IncrementalExtensions.Where``1(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  langs:
  - csharp
  - vb
  name: IncrementalExtensions
  nameWithType: IncrementalExtensions
  fullName: NMF.Transformations.Linq.IncrementalExtensions
  type: Class
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: IncrementalExtensions
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 14
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: This class contains the extension methods necessary for the NMF Transformations relational extensions
  example: []
  syntax:
    content: public static class IncrementalExtensions
    content.vb: Public Module IncrementalExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 24
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule, ITransformationContext context) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput), context As ITransformationContext) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput), NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>, NMF.Transformations.Core.ITransformationContext, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 42
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule, ITransformationContext context, bool allowNull) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput), context As ITransformationContext, allowNull As Boolean) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput), NMF.Transformations.Core.ITransformationContext, Boolean)
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext, Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>, NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 62
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule, ITransformationContext context, Func<TransformationComputationWrapper<TInput, TOutput>, bool> filter) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput), context As ITransformationContext, filter As Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean)) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext, Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput), NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext, Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext, bool, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, ITransformationContext, bool, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>, NMF.Transformations.Core.ITransformationContext, bool, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 81
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule, ITransformationContext context, bool allowNull, Func<TransformationComputationWrapper<TInput, TOutput>, bool> filter) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput), context As ITransformationContext, allowNull As Boolean, filter As Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean)) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput), NMF.Transformations.Core.ITransformationContext, Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 101
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule, ITransformationContext context) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput), context As ITransformationContext) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 121
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule, ITransformationContext context, bool allowNull) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput), context As ITransformationContext, allowNull As Boolean) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext, Boolean)
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 143
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule, ITransformationContext context, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool> filter) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput), context As ITransformationContext, filter As Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean)) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, bool, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, ITransformationContext, bool, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, NMF.Transformations.Core.ITransformationContext, bool, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 164
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule, ITransformationContext context, bool allowNull, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool> filter) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput), context As ITransformationContext, allowNull As Boolean, filter As Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean)) As INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), NMF.Transformations.Core.ITransformationContext, Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), ITransformationContext, Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1})
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 183
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput)) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput))
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean)
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 200
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule, bool allowNull) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput), allowNull As Boolean) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput), Boolean)
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 217
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule, Func<TransformationComputationWrapper<TInput, TOutput>, bool> filter) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput), filter As Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput), System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, bool, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput, TOutput>(TransformationRuleBase<TInput, TOutput>, bool, Func<TransformationComputationWrapper<TInput, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput, TOutput>(NMF.Transformations.TransformationRuleBase<TInput, TOutput>, bool, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 235
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>> ToComputationSource<TInput, TOutput>(this TransformationRuleBase<TInput, TOutput> rule, bool allowNull, Func<TransformationComputationWrapper<TInput, TOutput>, bool> filter) where TInput : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput, TOutput), allowNull As Boolean, filter As Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), Boolean, Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput, TOutput), Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput, TOutput)(TransformationRuleBase(Of TInput, TOutput), Boolean, Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 252
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput)) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 271
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule, bool allowNull) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput), allowNull As Boolean) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean)
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 290
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool> filter) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput), filter As Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  id: ToComputationSource``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Boolean,System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, bool, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(TransformationRuleBase<TInput1, TInput2, TOutput>, bool, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2, TOutput>(NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>, bool, System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 310
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>> ToComputationSource<TInput1, TInput2, TOutput>(this TransformationRuleBase<TInput1, TInput2, TOutput> rule, bool allowNull, Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool> filter) where TInput1 : class where TInput2 : class where TOutput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    - id: TOutput
      description: The output type of the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class, TOutput As Class)(rule As TransformationRuleBase(Of TInput1, TInput2, TOutput), allowNull As Boolean, filter As Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2, TOutput)(NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean, System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2, TOutput)(TransformationRuleBase(Of TInput1, TInput2, TOutput), Boolean, Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 327
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule, ITransformationContext context) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput), context As ITransformationContext) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 343
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule, ITransformationContext context, bool allowNull) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput), context As ITransformationContext, allowNull As Boolean) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext, Boolean)
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 361
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule, ITransformationContext context, Func<InPlaceComputationWrapper<TInput>, bool> filter) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput), context As ITransformationContext, filter As Func(Of InPlaceComputationWrapper(Of TInput), Boolean)) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 378
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule, ITransformationContext context, bool allowNull, Func<InPlaceComputationWrapper<TInput>, bool> filter) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput), context As ITransformationContext, allowNull As Boolean, filter As Func(Of InPlaceComputationWrapper(Of TInput), Boolean)) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext, Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 396
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule, ITransformationContext context) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2), context As ITransformationContext) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2), NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>, NMF.Transformations.Core.ITransformationContext, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 414
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule, ITransformationContext context, bool allowNull) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2), context As ITransformationContext, allowNull As Boolean) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2), NMF.Transformations.Core.ITransformationContext, Boolean)
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext, Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>, NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 434
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule, ITransformationContext context, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool> filter) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2), context As ITransformationContext, filter As Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean)) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2), NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>, NMF.Transformations.Core.ITransformationContext, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 453
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule, ITransformationContext context, bool allowNull, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool> filter) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context in which the rule is used as source of computations
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2), context As ITransformationContext, allowNull As Boolean, filter As Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean)) As INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2), NMF.Transformations.Core.ITransformationContext, Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 470
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput>>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput)) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 486
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput>>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule, bool allowNull) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput), allowNull As Boolean) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), Boolean)
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 502
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput>>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule, Func<InPlaceComputationWrapper<TInput>, bool> filter) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput), filter As Func(Of InPlaceComputationWrapper(Of TInput), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  id: ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 519
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput>>> ToComputationSource<TInput>(this InPlaceTransformationRuleBase<TInput> rule, bool allowNull, Func<InPlaceComputationWrapper<TInput>, bool> filter) where TInput : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput
      description: The type of the input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput As Class)(rule As InPlaceTransformationRuleBase(Of TInput), allowNull As Boolean, filter As Func(Of InPlaceComputationWrapper(Of TInput), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1})
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 535
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2)) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2))
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean)
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean)
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>, bool)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 552
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule, bool allowNull) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2), allowNull As Boolean) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2), Boolean)
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), Boolean)
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 570
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool> filter) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2), filter As Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2), System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  id: ToComputationSource``2(NMF.Transformations.InPlaceTransformationRuleBase{``0,``1},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, bool, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput1, TInput2>(InPlaceTransformationRuleBase<TInput1, TInput2>, bool, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput1, TInput2>(NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput1, TInput2>, bool>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ToComputationSource
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 589
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Creates a new computation source from a transformation rule
  example: []
  syntax:
    content: 'public static Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>> ToComputationSource<TInput1, TInput2>(this InPlaceTransformationRuleBase<TInput1, TInput2> rule, bool allowNull, Func<InPlaceComputationWrapper<TInput1, TInput2>, bool> filter) where TInput1 : class where TInput2 : class'
    parameters:
    - id: rule
      type: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
      description: The rule that should be taken as a source of computation objects
    - id: allowNull
      type: System.Boolean
      description: A boolean value indicating whether null values should be allowed
    - id: filter
      type: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}},System.Boolean}
      description: A method or lambda expression to filter the computation objects
    typeParameters:
    - id: TInput1
      description: The type of the first input arguments for the transformation rule
    - id: TInput2
      description: The type of the second input arguments for the transformation rule
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}}
      description: A source of computations that can further be dealt with
    content.vb: Public Shared Function ToComputationSource(Of TInput1 As Class, TInput2 As Class)(rule As InPlaceTransformationRuleBase(Of TInput1, TInput2), allowNull As Boolean, filter As Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean)) As Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2)))
  overload: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), Boolean, Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput1, TInput2)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2), Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
  name.vb: ToComputationSource(Of TInput1, TInput2)(InPlaceTransformationRuleBase(Of TInput1, TInput2), Boolean, Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean))
- uid: NMF.Transformations.Linq.IncrementalExtensions.Where``1(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.Where``1(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(Func<ITransformationContext, INotifyEnumerable<T>>, Expression<Func<T, bool>>)
  nameWithType: IncrementalExtensions.Where<T>(Func<ITransformationContext, INotifyEnumerable<T>>, Expression<Func<T, bool>>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.Where<T>(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T>>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Where
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 607
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Filters the given monad instance with the given filter operator
  remarks: Please see the documentation of the Where extension method and its use with the LINQ-syntax for more details
  example: []
  syntax:
    content: public static Func<ITransformationContext, INotifyEnumerable<T>> Where<T>(this Func<ITransformationContext, INotifyEnumerable<T>> items, Expression<Func<T, bool>> filter)
    parameters:
    - id: items
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T}}}
      description: The monad instance that should be filtered
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The filter that should be applied to the monad
    typeParameters:
    - id: T
      description: The inner type of the monad instance
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T}}}
      description: A filtered monad instance
    content.vb: Public Shared Function Where(Of T)(items As Func(Of ITransformationContext, INotifyEnumerable(Of T)), filter As Expression(Of Func(Of T, Boolean))) As Func(Of ITransformationContext, INotifyEnumerable(Of T))
  overload: NMF.Transformations.Linq.IncrementalExtensions.Where*
  nameWithType.vb: IncrementalExtensions.Where(Of T)(Func(Of ITransformationContext, INotifyEnumerable(Of T)), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.Where(Of T)(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T)), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Where(Of T)(Func(Of ITransformationContext, INotifyEnumerable(Of T)), Expression(Of Func(Of T, Boolean)))
- uid: NMF.Transformations.Linq.IncrementalExtensions.Select``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.Select``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Select``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: Select<T1, T2>(Func<ITransformationContext, INotifyEnumerable<T1>>, Expression<Func<T1, T2>>)
  nameWithType: IncrementalExtensions.Select<T1, T2>(Func<ITransformationContext, INotifyEnumerable<T1>>, Expression<Func<T1, T2>>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.Select<T1, T2>(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T1>>, System.Linq.Expressions.Expression<System.Func<T1, T2>>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Select
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 623
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Binds the Monad IRelationalSource to child items
  example: []
  syntax:
    content: public static Func<ITransformationContext, INotifyEnumerable<T2>> Select<T1, T2>(this Func<ITransformationContext, INotifyEnumerable<T1>> items, Expression<Func<T1, T2>> selector)
    parameters:
    - id: items
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T1}}}
      description: The monad instance whose child items should be selected
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2}}}
      description: A method that selects the result items from a source item
    typeParameters:
    - id: T1
      description: The inner type of the input monad instance
    - id: T2
      description: The inner type of the result monad instance
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T2}}}
      description: A monad instance of the result type that is based on the source monad instance
    content.vb: Public Shared Function [Select](Of T1, T2)(items As Func(Of ITransformationContext, INotifyEnumerable(Of T1)), selector As Expression(Of Func(Of T1, T2))) As Func(Of ITransformationContext, INotifyEnumerable(Of T2))
  overload: NMF.Transformations.Linq.IncrementalExtensions.Select*
  nameWithType.vb: IncrementalExtensions.Select(Of T1, T2)(Func(Of ITransformationContext, INotifyEnumerable(Of T1)), Expression(Of Func(Of T1, T2)))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.Select(Of T1, T2)(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T1)), System.Linq.Expressions.Expression(Of System.Func(Of T1, T2)))
  name.vb: Select(Of T1, T2)(Func(Of ITransformationContext, INotifyEnumerable(Of T1)), Expression(Of Func(Of T1, T2)))
- uid: NMF.Transformations.Linq.IncrementalExtensions.SelectMany``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.SelectMany``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}})
  id: SelectMany``2(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<T1, T2>(Func<ITransformationContext, INotifyEnumerable<T1>>, Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>>)
  nameWithType: IncrementalExtensions.SelectMany<T1, T2>(Func<ITransformationContext, INotifyEnumerable<T1>>, Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.SelectMany<T1, T2>(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T1>>, System.Linq.Expressions.Expression<System.Func<T1, System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<T2>>>>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SelectMany
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 640
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Binds the Monad IRelationalSource to child items
  remarks: Please see the documentation of the SelectMany extension method and its use with the LINQ-syntax for more details
  example: []
  syntax:
    content: public static Func<ITransformationContext, INotifyEnumerable<T2>> SelectMany<T1, T2>(this Func<ITransformationContext, INotifyEnumerable<T1>> items, Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>> selector)
    parameters:
    - id: items
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T1}}}
      description: The monad instance which children are to be selected
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T1},System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{T2}}}}}
      description: A method that selects the output
    typeParameters:
    - id: T1
      description: The inner type of the outer monad instance
    - id: T2
      description: The inner type of the inner monad instance
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T2}}}
      description: A monad instance with items selected by the given selector function
    content.vb: Public Shared Function SelectMany(Of T1, T2)(items As Func(Of ITransformationContext, INotifyEnumerable(Of T1)), selector As Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2))))) As Func(Of ITransformationContext, INotifyEnumerable(Of T2))
  overload: NMF.Transformations.Linq.IncrementalExtensions.SelectMany*
  nameWithType.vb: IncrementalExtensions.SelectMany(Of T1, T2)(Func(Of ITransformationContext, INotifyEnumerable(Of T1)), Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2)))))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.SelectMany(Of T1, T2)(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T1)), System.Linq.Expressions.Expression(Of System.Func(Of T1, System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of T2)))))
  name.vb: SelectMany(Of T1, T2)(Func(Of ITransformationContext, INotifyEnumerable(Of T1)), Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2)))))
- uid: NMF.Transformations.Linq.IncrementalExtensions.SelectMany``3(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.SelectMany``3(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: NMF.Transformations.Linq.IncrementalExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<T1, T2, T3>(Func<ITransformationContext, INotifyEnumerable<T1>>, Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>>, Expression<Func<T1, T2, T3>>)
  nameWithType: IncrementalExtensions.SelectMany<T1, T2, T3>(Func<ITransformationContext, INotifyEnumerable<T1>>, Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>>, Expression<Func<T1, T2, T3>>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.SelectMany<T1, T2, T3>(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T1>>, System.Linq.Expressions.Expression<System.Func<T1, System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<T2>>>>, System.Linq.Expressions.Expression<System.Func<T1, T2, T3>>)
  type: Method
  source:
    remote:
      path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: SelectMany
    path: src/Transformations/Transformations/Linq/IncrementalExtensions.cs
    startLine: 665
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations.Linq
  summary: Binds the Monad IRelationalSource to child items
  remarks: Please see the documentation of the SelectMany extension method and its use with the LINQ-syntax for more details
  example: []
  syntax:
    content: public static Func<ITransformationContext, INotifyEnumerable<T3>> SelectMany<T1, T2, T3>(this Func<ITransformationContext, INotifyEnumerable<T1>> items, Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>> func, Expression<Func<T1, T2, T3>> selector)
    parameters:
    - id: items
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T1}}}
      description: The monad instance which children are to be selected
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{T1},System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{T2}}}}}
      description: The operator that should be applied in the bind function
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3}}}
      description: A method that selects the output
    typeParameters:
    - id: T1
      description: The inner type of the outer monad instance
    - id: T2
      description: The inner type of the inner monad instance
    - id: T3
      description: The inner type of the return monad
    return:
      type: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T3}}}
      description: A monad instance with items selected by the given selector function
    content.vb: Public Shared Function SelectMany(Of T1, T2, T3)(items As Func(Of ITransformationContext, INotifyEnumerable(Of T1)), func As Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2)))), selector As Expression(Of Func(Of T1, T2, T3))) As Func(Of ITransformationContext, INotifyEnumerable(Of T3))
  overload: NMF.Transformations.Linq.IncrementalExtensions.SelectMany*
  nameWithType.vb: IncrementalExtensions.SelectMany(Of T1, T2, T3)(Func(Of ITransformationContext, INotifyEnumerable(Of T1)), Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2)))), Expression(Of Func(Of T1, T2, T3)))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.SelectMany(Of T1, T2, T3)(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T1)), System.Linq.Expressions.Expression(Of System.Func(Of T1, System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of T2)))), System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3)))
  name.vb: SelectMany(Of T1, T2, T3)(Func(Of ITransformationContext, INotifyEnumerable(Of T1)), Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2)))), Expression(Of Func(Of T1, T2, T3)))
references:
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  href: NMF.html
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
    href: NMF.Transformations.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
    href: NMF.Transformations.Linq.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource*
  commentId: Overload:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource
  href: NMF.Transformations.Linq.IncrementalExtensions.html#NMF_Transformations_Linq_IncrementalExtensions_ToComputationSource__2_NMF_Transformations_TransformationRuleBase___0___1__NMF_Transformations_Core_ITransformationContext_
  name: ToComputationSource
  nameWithType: IncrementalExtensions.ToComputationSource
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource
- uid: NMF.Transformations.TransformationRuleBase{{TInput},{TOutput}}
  commentId: T:NMF.Transformations.TransformationRuleBase{``0,``1}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  href: NMF.Transformations.TransformationRuleBase-2.html
  name: TransformationRuleBase<TInput, TOutput>
  nameWithType: TransformationRuleBase<TInput, TOutput>
  fullName: NMF.Transformations.TransformationRuleBase<TInput, TOutput>
  nameWithType.vb: TransformationRuleBase(Of TInput, TOutput)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TInput, TOutput)
  name.vb: TransformationRuleBase(Of TInput, TOutput)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: <
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  href: NMF.Transformations.Core.ITransformationContext.html
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Transformations.Linq.TransformationComputationWrapper-2.html
  name: INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>
  nameWithType: INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.TransformationComputationWrapper<TInput, TOutput>>
  nameWithType.vb: INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput))
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput, TOutput))
  name.vb: INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput))
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-2.html
  - name: <
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  href: NMF.Transformations.TransformationRuleBase-2.html
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  href: NMF.html
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  href: NMF.html
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Transformations
    name: Transformations
    href: NMF.Transformations.html
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
    href: NMF.Transformations.Core.html
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}},System.Boolean}
  commentId: T:System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1},System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TransformationComputationWrapper<TInput, TOutput>, bool>
  nameWithType: Func<TransformationComputationWrapper<TInput, TOutput>, bool>
  fullName: System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput, TOutput>, bool>
  nameWithType.vb: Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean)
  fullName.vb: System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput, TOutput), Boolean)
  name.vb: Func(Of TransformationComputationWrapper(Of TInput, TOutput), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-2.html
  - name: <
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{{TInput1},{TInput2},{TOutput}}
  commentId: T:NMF.Transformations.TransformationRuleBase{``0,``1,``2}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`3
  href: NMF.Transformations.TransformationRuleBase-3.html
  name: TransformationRuleBase<TInput1, TInput2, TOutput>
  nameWithType: TransformationRuleBase<TInput1, TInput2, TOutput>
  fullName: NMF.Transformations.TransformationRuleBase<TInput1, TInput2, TOutput>
  nameWithType.vb: TransformationRuleBase(Of TInput1, TInput2, TOutput)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TInput1, TInput2, TOutput)
  name.vb: TransformationRuleBase(Of TInput1, TInput2, TOutput)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  name: INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>
  nameWithType: INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>>
  nameWithType.vb: INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput))
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput))
  name.vb: INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput))
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`3
  commentId: T:NMF.Transformations.TransformationRuleBase`3
  href: NMF.Transformations.TransformationRuleBase-3.html
  name: TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType: TransformationRuleBase<TIn1, TIn2, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut)
  name.vb: TransformationRuleBase(Of TIn1, TIn2, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    href: NMF.Transformations.TransformationRuleBase-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}},System.Boolean}
  commentId: T:System.Func{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2},System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>
  nameWithType: Func<TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>
  fullName: System.Func<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>, bool>
  nameWithType.vb: Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean)
  fullName.vb: System.Func(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean)
  name.vb: Func(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput},{TOutput}}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1}}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput, TOutput>>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.TransformationComputationWrapper<TInput, TOutput>>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput)))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput, TOutput)))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput, TOutput)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-2.html
  - name: <
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`2
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
  - name: )
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{{TInput1},{TInput2},{TOutput}}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.TransformationComputationWrapper{``0,``1,``2}}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<TransformationComputationWrapper<TInput1, TInput2, TOutput>>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.TransformationComputationWrapper<TInput1, TInput2, TOutput>>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput)))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.TransformationComputationWrapper(Of TInput1, TInput2, TOutput)))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of TransformationComputationWrapper(Of TInput1, TInput2, TOutput)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.TransformationComputationWrapper`3
    name: TransformationComputationWrapper
    href: NMF.Transformations.Linq.TransformationComputationWrapper-3.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: ','
  - name: " "
  - name: TOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{{TInput}}
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase{``0}
  parent: NMF.Transformations
  definition: NMF.Transformations.InPlaceTransformationRuleBase`1
  href: NMF.Transformations.InPlaceTransformationRuleBase-1.html
  name: InPlaceTransformationRuleBase<TInput>
  nameWithType: InPlaceTransformationRuleBase<TInput>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TInput>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TInput)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TInput)
  name.vb: InPlaceTransformationRuleBase(Of TInput)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-1.html
  - name: <
  - name: TInput
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{``0}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Transformations.Linq.InPlaceComputationWrapper-1.html
  name: INotifyEnumerable<InPlaceComputationWrapper<TInput>>
  nameWithType: INotifyEnumerable<InPlaceComputationWrapper<TInput>>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>>
  nameWithType.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput))
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput))
  name.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput))
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-1.html
  - name: <
  - name: TInput
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase`1
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase`1
  href: NMF.Transformations.InPlaceTransformationRuleBase-1.html
  name: InPlaceTransformationRuleBase<T>
  nameWithType: InPlaceTransformationRuleBase<T>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<T>
  nameWithType.vb: InPlaceTransformationRuleBase(Of T)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of T)
  name.vb: InPlaceTransformationRuleBase(Of T)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}},System.Boolean}
  commentId: T:System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<InPlaceComputationWrapper<TInput>, bool>
  nameWithType: Func<InPlaceComputationWrapper<TInput>, bool>
  fullName: System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>
  nameWithType.vb: Func(Of InPlaceComputationWrapper(Of TInput), Boolean)
  fullName.vb: System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean)
  name.vb: Func(Of InPlaceComputationWrapper(Of TInput), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-1.html
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{{TInput1},{TInput2}}
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase{``0,``1}
  parent: NMF.Transformations
  definition: NMF.Transformations.InPlaceTransformationRuleBase`2
  href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  name: InPlaceTransformationRuleBase<TInput1, TInput2>
  nameWithType: InPlaceTransformationRuleBase<TInput1, TInput2>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TInput1, TInput2>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TInput1, TInput2)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TInput1, TInput2)
  name.vb: InPlaceTransformationRuleBase(Of TInput1, TInput2)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  name: INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>
  nameWithType: INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput1, TInput2>>
  nameWithType.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2))
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput1, TInput2))
  name.vb: INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2))
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: )
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase`2
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase`2
  href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  name: InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType: InPlaceTransformationRuleBase<TIn1, TIn2>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TIn1, TIn2>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TIn1, TIn2)
  name.vb: InPlaceTransformationRuleBase(Of TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: <
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`2
    name: InPlaceTransformationRuleBase
    href: NMF.Transformations.InPlaceTransformationRuleBase-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TIn1
  - name: ','
  - name: " "
  - name: TIn2
  - name: )
- uid: System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}},System.Boolean}
  commentId: T:System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1},System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>
  nameWithType: Func<InPlaceComputationWrapper<TInput1, TInput2>, bool>
  fullName: System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput1, TInput2>, bool>
  nameWithType.vb: Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean)
  fullName.vb: System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput1, TInput2), Boolean)
  name.vb: Func(Of InPlaceComputationWrapper(Of TInput1, TInput2), Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput}}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{``0}}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput>>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput>>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput)))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput)))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-1.html
  - name: <
  - name: TInput
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: )
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{{TInput1},{TInput2}}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Transformations.Linq.InPlaceComputationWrapper{``0,``1}}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<InPlaceComputationWrapper<TInput1, TInput2>>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput1, TInput2>>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2)))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput1, TInput2)))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of InPlaceComputationWrapper(Of TInput1, TInput2)))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: <
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`2
    name: InPlaceComputationWrapper
    href: NMF.Transformations.Linq.InPlaceComputationWrapper-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TInput1
  - name: ','
  - name: " "
  - name: TInput2
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.Where*
  commentId: Overload:NMF.Transformations.Linq.IncrementalExtensions.Where
  href: NMF.Transformations.Linq.IncrementalExtensions.html#NMF_Transformations_Linq_IncrementalExtensions_Where__1_System_Func_NMF_Transformations_Core_ITransformationContext_NMF_Expressions_INotifyEnumerable___0___System_Linq_Expressions_Expression_System_Func___0_System_Boolean___
  name: Where
  nameWithType: IncrementalExtensions.Where
  fullName: NMF.Transformations.Linq.IncrementalExtensions.Where
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<T>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<T>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T, bool>>
  nameWithType: Expression<Func<T, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: NMF.Transformations.Linq.IncrementalExtensions.Select*
  commentId: Overload:NMF.Transformations.Linq.IncrementalExtensions.Select
  href: NMF.Transformations.Linq.IncrementalExtensions.html#NMF_Transformations_Linq_IncrementalExtensions_Select__2_System_Func_NMF_Transformations_Core_ITransformationContext_NMF_Expressions_INotifyEnumerable___0___System_Linq_Expressions_Expression_System_Func___0___1___
  name: Select
  nameWithType: IncrementalExtensions.Select
  fullName: NMF.Transformations.Linq.IncrementalExtensions.Select
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T1}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``0}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<T1>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<T1>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T1>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T1))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T1))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T1))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T1
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2>>
  nameWithType: Expression<Func<T1, T2>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2>>
  nameWithType.vb: Expression(Of Func(Of T1, T2))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2))
  name.vb: Expression(Of Func(Of T1, T2))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T2}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``1}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<T2>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<T2>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T2>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T2))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T2))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T2))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T2
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: )
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.SelectMany*
  commentId: Overload:NMF.Transformations.Linq.IncrementalExtensions.SelectMany
  href: NMF.Transformations.Linq.IncrementalExtensions.html#NMF_Transformations_Linq_IncrementalExtensions_SelectMany__2_System_Func_NMF_Transformations_Core_ITransformationContext_NMF_Expressions_INotifyEnumerable___0___System_Linq_Expressions_Expression_System_Func___0_System_Func_NMF_Transformations_Core_ITransformationContext_System_Collections_Generic_IEnumerable___1_____
  name: SelectMany
  nameWithType: IncrementalExtensions.SelectMany
  fullName: NMF.Transformations.Linq.IncrementalExtensions.SelectMany
- uid: System.Linq.Expressions.Expression{System.Func{{T1},System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{T2}}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{``1}}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>>
  nameWithType: Expression<Func<T1, Func<ITransformationContext, IEnumerable<T2>>>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<T2>>>>
  nameWithType.vb: Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2))))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of T2))))
  name.vb: Expression(Of Func(Of T1, Func(Of ITransformationContext, IEnumerable(Of T2))))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3>>
  nameWithType: Expression<Func<T1, T2, T3>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3))
  name.vb: Expression(Of Func(Of T1, T2, T3))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
  - name: )
- uid: System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{T3}}}
  commentId: T:System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{``2}}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<ITransformationContext, INotifyEnumerable<T3>>
  nameWithType: Func<ITransformationContext, INotifyEnumerable<T3>>
  fullName: System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<T3>>
  nameWithType.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T3))
  fullName.vb: System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of T3))
  name.vb: Func(Of ITransformationContext, INotifyEnumerable(Of T3))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T3
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
    href: NMF.Transformations.Core.ITransformationContext.html
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T3
  - name: )
  - name: )
