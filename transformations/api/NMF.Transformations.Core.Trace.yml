### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.Core.Trace
  commentId: T:NMF.Transformations.Core.Trace
  id: Trace
  parent: NMF.Transformations.Core
  children:
  - NMF.Transformations.Core.Trace.#ctor
  - NMF.Transformations.Core.Trace.#ctor(System.Collections.Generic.ICollection{NMF.Transformations.Core.ITraceEntry})
  - NMF.Transformations.Core.Trace.Computations
  - NMF.Transformations.Core.Trace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  - NMF.Transformations.Core.Trace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  langs:
  - csharp
  - vb
  name: Trace
  nameWithType: Trace
  fullName: NMF.Transformations.Core.Trace
  type: Class
  source:
    remote:
      path: Transformations/Transformations.Core/Core/Trace.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Trace
    path: src/Transformations/Transformations.Core/Core/Trace.cs
    startLine: 12
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nRepresents a trace class based on a collection of computations\n"
  example: []
  syntax:
    content: 'public class Trace : AbstractTrace, ITransformationTrace'
    content.vb: >-
      Public Class Trace
          Inherits AbstractTrace
          Implements ITransformationTrace
  inheritance:
  - System.Object
  - NMF.Transformations.Core.AbstractTrace
  implements:
  - NMF.Transformations.Core.ITransformationTrace
  inheritedMembers:
  - NMF.Transformations.Core.AbstractTrace.TraceIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  - NMF.Transformations.Core.AbstractTrace.TraceAllIn(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.AbstractTrace.Trace(System.Object[])
  - NMF.Transformations.Core.AbstractTrace.TraceManyIn(NMF.Transformations.Core.GeneralTransformationRule,System.Collections.Generic.IEnumerable{System.Object[]})
  - NMF.Transformations.Core.AbstractTrace.TraceMany(System.Type[],System.Type,System.Collections.Generic.IEnumerable{System.Object[]})
  - NMF.Transformations.Core.AbstractTrace.TraceAll(System.Type[],System.Type)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},{TIn})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.Resolve``2({TIn})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}},{TIn1},{TIn2})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.Resolve``3({TIn1},{TIn2})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.TransformationRuleBase{{TOut}},System.Object[])
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.Resolve``1(System.Object[])
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},System.Predicate{{TIn}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveWhere``2(System.Predicate{{TIn}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},{TIn})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},System.Collections.Generic.IEnumerable{{TIn}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveMany``2(System.Collections.Generic.IEnumerable{{TIn}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveMany``2({TIn})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.TransformationRuleBase{{TOut}},System.Predicate{System.Object[]})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveWhere``1(System.Type[],System.Predicate{System.Object[]})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},System.Predicate{{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindWhere``2(System.Predicate{{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}},System.Predicate{{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindWhere``3(System.Predicate{{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.TransformationRuleBase{{TOut}},System.Predicate{{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindWhere``1(System.Type[],System.Predicate{{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.GeneralTransformationRule{{TIn}},System.Predicate{{TIn}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.TransformationRuleBase{{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}},System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveWhere``3(System.Func{{TIn1},{TIn2},System.Boolean})
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAll``1(System.Type[])
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAll``2
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAll``3
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},{TIn}[])
  - NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveMany``2({TIn}[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Transformations.Core.Trace.#ctor
  commentId: M:NMF.Transformations.Core.Trace.#ctor
  id: '#ctor'
  parent: NMF.Transformations.Core.Trace
  langs:
  - csharp
  - vb
  name: Trace()
  nameWithType: Trace.Trace()
  fullName: NMF.Transformations.Core.Trace.Trace()
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations.Core/Core/Trace.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations.Core/Core/Trace.cs
    startLine: 19
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nCreates a trace object for an empty set of computations\n"
  example: []
  syntax:
    content: public Trace()
    content.vb: Public Sub New
  overload: NMF.Transformations.Core.Trace.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Transformations.Core.Trace.#ctor(System.Collections.Generic.ICollection{NMF.Transformations.Core.ITraceEntry})
  commentId: M:NMF.Transformations.Core.Trace.#ctor(System.Collections.Generic.ICollection{NMF.Transformations.Core.ITraceEntry})
  id: '#ctor(System.Collections.Generic.ICollection{NMF.Transformations.Core.ITraceEntry})'
  parent: NMF.Transformations.Core.Trace
  langs:
  - csharp
  - vb
  name: Trace(ICollection<ITraceEntry>)
  nameWithType: Trace.Trace(ICollection<ITraceEntry>)
  fullName: NMF.Transformations.Core.Trace.Trace(System.Collections.Generic.ICollection<NMF.Transformations.Core.ITraceEntry>)
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations.Core/Core/Trace.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations.Core/Core/Trace.cs
    startLine: 25
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nCreates the trace for the given collection of computations\n"
  example: []
  syntax:
    content: public Trace(ICollection<ITraceEntry> computations)
    parameters:
    - id: computations
      type: System.Collections.Generic.ICollection{NMF.Transformations.Core.ITraceEntry}
      description: The collection of computations
    content.vb: Public Sub New(computations As ICollection(Of ITraceEntry))
  overload: NMF.Transformations.Core.Trace.#ctor*
  nameWithType.vb: Trace.Trace(ICollection(Of ITraceEntry))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Transformations.Core.Trace.Trace(System.Collections.Generic.ICollection(Of NMF.Transformations.Core.ITraceEntry))
  name.vb: Trace(ICollection(Of ITraceEntry))
- uid: NMF.Transformations.Core.Trace.Computations
  commentId: P:NMF.Transformations.Core.Trace.Computations
  id: Computations
  parent: NMF.Transformations.Core.Trace
  langs:
  - csharp
  - vb
  name: Computations
  nameWithType: Trace.Computations
  fullName: NMF.Transformations.Core.Trace.Computations
  type: Property
  source:
    remote:
      path: Transformations/Transformations.Core/Core/Trace.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Computations
    path: src/Transformations/Transformations.Core/Core/Trace.cs
    startLine: 33
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nThe computations, the trace is based upon\n"
  example: []
  syntax:
    content: public override IEnumerable<ITraceEntry> Computations { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.ITraceEntry}
    content.vb: Public Overrides ReadOnly Property Computations As IEnumerable(Of ITraceEntry)
  overridden: NMF.Transformations.Core.AbstractTrace.Computations
  overload: NMF.Transformations.Core.Trace.Computations*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: NMF.Transformations.Core.Trace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  commentId: M:NMF.Transformations.Core.Trace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  id: RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  parent: NMF.Transformations.Core.Trace
  langs:
  - csharp
  - vb
  name: RevokeEntry(ITraceEntry)
  nameWithType: Trace.RevokeEntry(ITraceEntry)
  fullName: NMF.Transformations.Core.Trace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/Trace.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RevokeEntry
    path: src/Transformations/Transformations.Core/Core/Trace.cs
    startLine: 43
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nRevokes the given computation and deletes it from the trace\n"
  example: []
  syntax:
    content: public override void RevokeEntry(ITraceEntry traceEntry)
    parameters:
    - id: traceEntry
      type: NMF.Transformations.Core.ITraceEntry
      description: The computation that is to be revoked
    content.vb: Public Overrides Sub RevokeEntry(traceEntry As ITraceEntry)
  overridden: NMF.Transformations.Core.AbstractTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  overload: NMF.Transformations.Core.Trace.RevokeEntry*
  implements:
  - NMF.Transformations.Core.ITransformationTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Transformations.Core.Trace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  commentId: M:NMF.Transformations.Core.Trace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  id: PublishEntry(NMF.Transformations.Core.ITraceEntry)
  parent: NMF.Transformations.Core.Trace
  langs:
  - csharp
  - vb
  name: PublishEntry(ITraceEntry)
  nameWithType: Trace.PublishEntry(ITraceEntry)
  fullName: NMF.Transformations.Core.Trace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  type: Method
  source:
    remote:
      path: Transformations/Transformations.Core/Core/Trace.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PublishEntry
    path: src/Transformations/Transformations.Core/Core/Trace.cs
    startLine: 54
  assemblies:
  - NMF.Transformations.Core
  namespace: NMF.Transformations.Core
  summary: "\nPublishes the given computation to the trace\n"
  example: []
  syntax:
    content: public override void PublishEntry(ITraceEntry traceEntry)
    parameters:
    - id: traceEntry
      type: NMF.Transformations.Core.ITraceEntry
      description: The computation that should be added to the trace
    content.vb: Public Overrides Sub PublishEntry(traceEntry As ITraceEntry)
  overridden: NMF.Transformations.Core.AbstractTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  overload: NMF.Transformations.Core.Trace.PublishEntry*
  implements:
  - NMF.Transformations.Core.ITransformationTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.AbstractTrace
  commentId: T:NMF.Transformations.Core.AbstractTrace
  parent: NMF.Transformations.Core
  name: AbstractTrace
  nameWithType: AbstractTrace
  fullName: NMF.Transformations.Core.AbstractTrace
- uid: NMF.Transformations.Core.ITransformationTrace
  commentId: T:NMF.Transformations.Core.ITransformationTrace
  parent: NMF.Transformations.Core
  name: ITransformationTrace
  nameWithType: ITransformationTrace
  fullName: NMF.Transformations.Core.ITransformationTrace
- uid: NMF.Transformations.Core.AbstractTrace.TraceIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  commentId: M:NMF.Transformations.Core.AbstractTrace.TraceIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  parent: NMF.Transformations.Core.AbstractTrace
  isExternal: true
  name: TraceIn(GeneralTransformationRule, Object[])
  nameWithType: AbstractTrace.TraceIn(GeneralTransformationRule, Object[])
  fullName: NMF.Transformations.Core.AbstractTrace.TraceIn(NMF.Transformations.Core.GeneralTransformationRule, System.Object[])
  nameWithType.vb: AbstractTrace.TraceIn(GeneralTransformationRule, Object())
  fullName.vb: NMF.Transformations.Core.AbstractTrace.TraceIn(NMF.Transformations.Core.GeneralTransformationRule, System.Object())
  name.vb: TraceIn(GeneralTransformationRule, Object())
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
    name: TraceIn
    nameWithType: AbstractTrace.TraceIn
    fullName: NMF.Transformations.Core.AbstractTrace.TraceIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
    name: TraceIn
    nameWithType: AbstractTrace.TraceIn
    fullName: NMF.Transformations.Core.AbstractTrace.TraceIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.AbstractTrace.TraceAllIn(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.AbstractTrace.TraceAllIn(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.AbstractTrace
  name: TraceAllIn(GeneralTransformationRule)
  nameWithType: AbstractTrace.TraceAllIn(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.AbstractTrace.TraceAllIn(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceAllIn(NMF.Transformations.Core.GeneralTransformationRule)
    name: TraceAllIn
    nameWithType: AbstractTrace.TraceAllIn
    fullName: NMF.Transformations.Core.AbstractTrace.TraceAllIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceAllIn(NMF.Transformations.Core.GeneralTransformationRule)
    name: TraceAllIn
    nameWithType: AbstractTrace.TraceAllIn
    fullName: NMF.Transformations.Core.AbstractTrace.TraceAllIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.AbstractTrace.Trace(System.Object[])
  commentId: M:NMF.Transformations.Core.AbstractTrace.Trace(System.Object[])
  parent: NMF.Transformations.Core.AbstractTrace
  isExternal: true
  name: Trace(Object[])
  nameWithType: AbstractTrace.Trace(Object[])
  fullName: NMF.Transformations.Core.AbstractTrace.Trace(System.Object[])
  nameWithType.vb: AbstractTrace.Trace(Object())
  fullName.vb: NMF.Transformations.Core.AbstractTrace.Trace(System.Object())
  name.vb: Trace(Object())
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.Trace(System.Object[])
    name: Trace
    nameWithType: AbstractTrace.Trace
    fullName: NMF.Transformations.Core.AbstractTrace.Trace
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.Trace(System.Object[])
    name: Trace
    nameWithType: AbstractTrace.Trace
    fullName: NMF.Transformations.Core.AbstractTrace.Trace
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.AbstractTrace.TraceManyIn(NMF.Transformations.Core.GeneralTransformationRule,System.Collections.Generic.IEnumerable{System.Object[]})
  commentId: M:NMF.Transformations.Core.AbstractTrace.TraceManyIn(NMF.Transformations.Core.GeneralTransformationRule,System.Collections.Generic.IEnumerable{System.Object[]})
  parent: NMF.Transformations.Core.AbstractTrace
  isExternal: true
  name: TraceManyIn(GeneralTransformationRule, IEnumerable<Object[]>)
  nameWithType: AbstractTrace.TraceManyIn(GeneralTransformationRule, IEnumerable<Object[]>)
  fullName: NMF.Transformations.Core.AbstractTrace.TraceManyIn(NMF.Transformations.Core.GeneralTransformationRule, System.Collections.Generic.IEnumerable<System.Object[]>)
  nameWithType.vb: AbstractTrace.TraceManyIn(GeneralTransformationRule, IEnumerable(Of Object()))
  fullName.vb: NMF.Transformations.Core.AbstractTrace.TraceManyIn(NMF.Transformations.Core.GeneralTransformationRule, System.Collections.Generic.IEnumerable(Of System.Object()))
  name.vb: TraceManyIn(GeneralTransformationRule, IEnumerable(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceManyIn(NMF.Transformations.Core.GeneralTransformationRule,System.Collections.Generic.IEnumerable{System.Object[]})
    name: TraceManyIn
    nameWithType: AbstractTrace.TraceManyIn
    fullName: NMF.Transformations.Core.AbstractTrace.TraceManyIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceManyIn(NMF.Transformations.Core.GeneralTransformationRule,System.Collections.Generic.IEnumerable{System.Object[]})
    name: TraceManyIn
    nameWithType: AbstractTrace.TraceManyIn
    fullName: NMF.Transformations.Core.AbstractTrace.TraceManyIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.AbstractTrace.TraceMany(System.Type[],System.Type,System.Collections.Generic.IEnumerable{System.Object[]})
  commentId: M:NMF.Transformations.Core.AbstractTrace.TraceMany(System.Type[],System.Type,System.Collections.Generic.IEnumerable{System.Object[]})
  parent: NMF.Transformations.Core.AbstractTrace
  isExternal: true
  name: TraceMany(Type[], Type, IEnumerable<Object[]>)
  nameWithType: AbstractTrace.TraceMany(Type[], Type, IEnumerable<Object[]>)
  fullName: NMF.Transformations.Core.AbstractTrace.TraceMany(System.Type[], System.Type, System.Collections.Generic.IEnumerable<System.Object[]>)
  nameWithType.vb: AbstractTrace.TraceMany(Type(), Type, IEnumerable(Of Object()))
  fullName.vb: NMF.Transformations.Core.AbstractTrace.TraceMany(System.Type(), System.Type, System.Collections.Generic.IEnumerable(Of System.Object()))
  name.vb: TraceMany(Type(), Type, IEnumerable(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceMany(System.Type[],System.Type,System.Collections.Generic.IEnumerable{System.Object[]})
    name: TraceMany
    nameWithType: AbstractTrace.TraceMany
    fullName: NMF.Transformations.Core.AbstractTrace.TraceMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceMany(System.Type[],System.Type,System.Collections.Generic.IEnumerable{System.Object[]})
    name: TraceMany
    nameWithType: AbstractTrace.TraceMany
    fullName: NMF.Transformations.Core.AbstractTrace.TraceMany
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.AbstractTrace.TraceAll(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.AbstractTrace.TraceAll(System.Type[],System.Type)
  parent: NMF.Transformations.Core.AbstractTrace
  isExternal: true
  name: TraceAll(Type[], Type)
  nameWithType: AbstractTrace.TraceAll(Type[], Type)
  fullName: NMF.Transformations.Core.AbstractTrace.TraceAll(System.Type[], System.Type)
  nameWithType.vb: AbstractTrace.TraceAll(Type(), Type)
  fullName.vb: NMF.Transformations.Core.AbstractTrace.TraceAll(System.Type(), System.Type)
  name.vb: TraceAll(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceAll(System.Type[],System.Type)
    name: TraceAll
    nameWithType: AbstractTrace.TraceAll
    fullName: NMF.Transformations.Core.AbstractTrace.TraceAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.TraceAll(System.Type[],System.Type)
    name: TraceAll
    nameWithType: AbstractTrace.TraceAll
    fullName: NMF.Transformations.Core.AbstractTrace.TraceAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  name: ResolveIn(GeneralTransformationRule, Object[])
  nameWithType: TraceExtensions.ResolveIn(GeneralTransformationRule, Object[])
  fullName: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.GeneralTransformationRule, System.Object[])
  nameWithType.vb: TraceExtensions.ResolveIn(GeneralTransformationRule, Object())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.GeneralTransformationRule, System.Object())
  name.vb: ResolveIn(GeneralTransformationRule, Object())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
    name: ResolveIn
    nameWithType: TraceExtensions.ResolveIn
    fullName: NMF.Transformations.TraceExtensions.ResolveIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
    name: ResolveIn
    nameWithType: TraceExtensions.ResolveIn
    fullName: NMF.Transformations.TraceExtensions.ResolveIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},{TIn})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  name: ResolveIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType: TraceExtensions.ResolveIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, TIn)
  fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn, TOut>(NMF.Transformations.TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType.vb: TraceExtensions.ResolveIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn, TOut), TIn)
  name.vb: ResolveIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.Resolve``2({TIn})
  commentId: M:NMF.Transformations.TraceExtensions.Resolve``2(NMF.Transformations.Core.ITransformationTrace,``0)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.Resolve``2(NMF.Transformations.Core.ITransformationTrace,``0)
  name: Resolve<TIn, TOut>(TIn)
  nameWithType: TraceExtensions.Resolve<TIn, TOut>(TIn)
  fullName: NMF.Transformations.TraceExtensions.Resolve<TIn, TOut>(TIn)
  nameWithType.vb: TraceExtensions.Resolve(Of TIn, TOut)(TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.Resolve(Of TIn, TOut)(TIn)
  name.vb: Resolve(Of TIn, TOut)(TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.Resolve``2(``0)
    name: Resolve<TIn, TOut>
    nameWithType: TraceExtensions.Resolve<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.Resolve<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.Resolve``2(``0)
    name: Resolve(Of TIn, TOut)
    nameWithType: TraceExtensions.Resolve(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.Resolve(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}},{TIn1},{TIn2})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
  name: ResolveIn<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>, TIn1, TIn2)
  nameWithType: TraceExtensions.ResolveIn<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>, TIn1, TIn2)
  fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn1, TIn2, TOut>(NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>, TIn1, TIn2)
  nameWithType.vb: TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut), TIn1, TIn2)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut), TIn1, TIn2)
  name.vb: ResolveIn(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut), TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
    name: ResolveIn<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.ResolveIn<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
    name: ResolveIn(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.Resolve``3({TIn1},{TIn2})
  commentId: M:NMF.Transformations.TraceExtensions.Resolve``3(NMF.Transformations.Core.ITransformationTrace,``0,``1)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.Resolve``3(NMF.Transformations.Core.ITransformationTrace,``0,``1)
  name: Resolve<TIn1, TIn2, TOut>(TIn1, TIn2)
  nameWithType: TraceExtensions.Resolve<TIn1, TIn2, TOut>(TIn1, TIn2)
  fullName: NMF.Transformations.TraceExtensions.Resolve<TIn1, TIn2, TOut>(TIn1, TIn2)
  nameWithType.vb: TraceExtensions.Resolve(Of TIn1, TIn2, TOut)(TIn1, TIn2)
  fullName.vb: NMF.Transformations.TraceExtensions.Resolve(Of TIn1, TIn2, TOut)(TIn1, TIn2)
  name.vb: Resolve(Of TIn1, TIn2, TOut)(TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.Resolve``3(``0,``1)
    name: Resolve<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.Resolve<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.Resolve<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.Resolve``3(``0,``1)
    name: Resolve(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.Resolve(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.Resolve(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.TransformationRuleBase{{TOut}},System.Object[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Object[])
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Object[])
  name: ResolveIn<TOut>(TransformationRuleBase<TOut>, Object[])
  nameWithType: TraceExtensions.ResolveIn<TOut>(TransformationRuleBase<TOut>, Object[])
  fullName: NMF.Transformations.TraceExtensions.ResolveIn<TOut>(NMF.Transformations.TransformationRuleBase<TOut>, System.Object[])
  nameWithType.vb: TraceExtensions.ResolveIn(Of TOut)(TransformationRuleBase(Of TOut), Object())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(Of TOut)(NMF.Transformations.TransformationRuleBase(Of TOut), System.Object())
  name.vb: ResolveIn(Of TOut)(TransformationRuleBase(Of TOut), Object())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.TransformationRuleBase{``0},System.Object[])
    name: ResolveIn<TOut>
    nameWithType: TraceExtensions.ResolveIn<TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveIn<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.TransformationRuleBase{``0},System.Object[])
    name: ResolveIn(Of TOut)
    nameWithType: TraceExtensions.ResolveIn(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveIn(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.Resolve``1(System.Object[])
  commentId: M:NMF.Transformations.TraceExtensions.Resolve``1(NMF.Transformations.Core.ITransformationTrace,System.Object[])
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.Resolve``1(NMF.Transformations.Core.ITransformationTrace,System.Object[])
  name: Resolve<TOut>(Object[])
  nameWithType: TraceExtensions.Resolve<TOut>(Object[])
  fullName: NMF.Transformations.TraceExtensions.Resolve<TOut>(System.Object[])
  nameWithType.vb: TraceExtensions.Resolve(Of TOut)(Object())
  fullName.vb: NMF.Transformations.TraceExtensions.Resolve(Of TOut)(System.Object())
  name.vb: Resolve(Of TOut)(Object())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.Resolve``1(System.Object[])
    name: Resolve<TOut>
    nameWithType: TraceExtensions.Resolve<TOut>
    fullName: NMF.Transformations.TraceExtensions.Resolve<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.Resolve``1(System.Object[])
    name: Resolve(Of TOut)
    nameWithType: TraceExtensions.Resolve(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.Resolve(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
  name: ResolveInWhere<TIn, TOut>(TransformationRuleBase<TIn, TOut>, Predicate<TIn>)
  nameWithType: TraceExtensions.ResolveInWhere<TIn, TOut>(TransformationRuleBase<TIn, TOut>, Predicate<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn, TOut>(NMF.Transformations.TransformationRuleBase<TIn, TOut>, System.Predicate<TIn>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn, TOut), System.Predicate(Of TIn))
  name.vb: ResolveInWhere(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
    name: ResolveInWhere<TIn, TOut>
    nameWithType: TraceExtensions.ResolveInWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
    name: ResolveInWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveInWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveWhere``2(System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``0})
  name: ResolveWhere<TIn, TOut>(Predicate<TIn>)
  nameWithType: TraceExtensions.ResolveWhere<TIn, TOut>(Predicate<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn, TOut>(System.Predicate<TIn>)
  nameWithType.vb: TraceExtensions.ResolveWhere(Of TIn, TOut)(Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn, TOut)(System.Predicate(Of TIn))
  name.vb: ResolveWhere(Of TIn, TOut)(Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``2(System.Predicate{``0})
    name: ResolveWhere<TIn, TOut>
    nameWithType: TraceExtensions.ResolveWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``2(System.Predicate{``0})
    name: ResolveWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},{TIn})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  name: ResolveManyIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, TIn)
  fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>(NMF.Transformations.TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType.vb: TraceExtensions.ResolveManyIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn, TOut), TIn)
  name.vb: ResolveManyIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveManyIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveManyIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveManyIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},System.Collections.Generic.IEnumerable{{TIn}})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
  name: ResolveManyIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, IEnumerable<TIn>)
  nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, IEnumerable<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>(NMF.Transformations.TransformationRuleBase<TIn, TOut>, System.Collections.Generic.IEnumerable<TIn>)
  nameWithType.vb: TraceExtensions.ResolveManyIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), IEnumerable(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn, TOut), System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: ResolveManyIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), IEnumerable(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
    name: ResolveManyIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
    name: ResolveManyIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveManyIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveMany``2(System.Collections.Generic.IEnumerable{{TIn}})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,System.Collections.Generic.IEnumerable{``0})
  name: ResolveMany<TIn, TOut>(IEnumerable<TIn>)
  nameWithType: TraceExtensions.ResolveMany<TIn, TOut>(IEnumerable<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>(System.Collections.Generic.IEnumerable<TIn>)
  nameWithType.vb: TraceExtensions.ResolveMany(Of TIn, TOut)(IEnumerable(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)(System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: ResolveMany(Of TIn, TOut)(IEnumerable(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(System.Collections.Generic.IEnumerable{``0})
    name: ResolveMany<TIn, TOut>
    nameWithType: TraceExtensions.ResolveMany<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(System.Collections.Generic.IEnumerable{``0})
    name: ResolveMany(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveMany(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveMany``2({TIn})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0)
  name: ResolveMany<TIn, TOut>(TIn)
  nameWithType: TraceExtensions.ResolveMany<TIn, TOut>(TIn)
  fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>(TIn)
  nameWithType.vb: TraceExtensions.ResolveMany(Of TIn, TOut)(TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)(TIn)
  name.vb: ResolveMany(Of TIn, TOut)(TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(``0)
    name: ResolveMany<TIn, TOut>
    nameWithType: TraceExtensions.ResolveMany<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(``0)
    name: ResolveMany(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveMany(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.TransformationRuleBase{{TOut}},System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
  name: ResolveInWhere<TOut>(TransformationRuleBase<TOut>, Predicate<Object[]>)
  nameWithType: TraceExtensions.ResolveInWhere<TOut>(TransformationRuleBase<TOut>, Predicate<Object[]>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TOut>(NMF.Transformations.TransformationRuleBase<TOut>, System.Predicate<System.Object[]>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(Of TOut)(TransformationRuleBase(Of TOut), Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TOut)(NMF.Transformations.TransformationRuleBase(Of TOut), System.Predicate(Of System.Object()))
  name.vb: ResolveInWhere(Of TOut)(TransformationRuleBase(Of TOut), Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
    name: ResolveInWhere<TOut>
    nameWithType: TraceExtensions.ResolveInWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
    name: ResolveInWhere(Of TOut)
    nameWithType: TraceExtensions.ResolveInWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveWhere``1(System.Type[],System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{System.Object[]})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{System.Object[]})
  name: ResolveWhere<TOut>(Type[], Predicate<Object[]>)
  nameWithType: TraceExtensions.ResolveWhere<TOut>(Type[], Predicate<Object[]>)
  fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TOut>(System.Type[], System.Predicate<System.Object[]>)
  nameWithType.vb: TraceExtensions.ResolveWhere(Of TOut)(Type(), Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveWhere(Of TOut)(System.Type(), System.Predicate(Of System.Object()))
  name.vb: ResolveWhere(Of TOut)(Type(), Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``1(System.Type[],System.Predicate{System.Object[]})
    name: ResolveWhere<TOut>
    nameWithType: TraceExtensions.ResolveWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``1(System.Type[],System.Predicate{System.Object[]})
    name: ResolveWhere(Of TOut)
    nameWithType: TraceExtensions.ResolveWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},System.Predicate{{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
  name: FindInWhere<TIn, TOut>(TransformationRuleBase<TIn, TOut>, Predicate<TOut>)
  nameWithType: TraceExtensions.FindInWhere<TIn, TOut>(TransformationRuleBase<TIn, TOut>, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn, TOut>(NMF.Transformations.TransformationRuleBase<TIn, TOut>, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindInWhere(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn, TOut), System.Predicate(Of TOut))
  name.vb: FindInWhere(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
    name: FindInWhere<TIn, TOut>
    nameWithType: TraceExtensions.FindInWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
    name: FindInWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.FindInWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindWhere``2(System.Predicate{{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``1})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``1})
  name: FindWhere<TIn, TOut>(Predicate<TOut>)
  nameWithType: TraceExtensions.FindWhere<TIn, TOut>(Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn, TOut>(System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindWhere(Of TIn, TOut)(Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindWhere(Of TIn, TOut)(System.Predicate(Of TOut))
  name.vb: FindWhere(Of TIn, TOut)(Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``2(System.Predicate{``1})
    name: FindWhere<TIn, TOut>
    nameWithType: TraceExtensions.FindWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``2(System.Predicate{``1})
    name: FindWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.FindWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}},System.Predicate{{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
  name: FindInWhere<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>, Predicate<TOut>)
  nameWithType: TraceExtensions.FindInWhere<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn1, TIn2, TOut>(NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut), System.Predicate(Of TOut))
  name.vb: FindInWhere(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
    name: FindInWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindInWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
    name: FindInWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindWhere``3(System.Predicate{{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``2})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``2})
  name: FindWhere<TIn1, TIn2, TOut>(Predicate<TOut>)
  nameWithType: TraceExtensions.FindWhere<TIn1, TIn2, TOut>(Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn1, TIn2, TOut>(System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)(Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)(System.Predicate(Of TOut))
  name.vb: FindWhere(Of TIn1, TIn2, TOut)(Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``3(System.Predicate{``2})
    name: FindWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``3(System.Predicate{``2})
    name: FindWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.TransformationRuleBase{{TOut}},System.Predicate{{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
  name: FindInWhere<TOut>(TransformationRuleBase<TOut>, Predicate<TOut>)
  nameWithType: TraceExtensions.FindInWhere<TOut>(TransformationRuleBase<TOut>, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindInWhere<TOut>(NMF.Transformations.TransformationRuleBase<TOut>, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindInWhere(Of TOut)(TransformationRuleBase(Of TOut), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindInWhere(Of TOut)(NMF.Transformations.TransformationRuleBase(Of TOut), System.Predicate(Of TOut))
  name.vb: FindInWhere(Of TOut)(TransformationRuleBase(Of TOut), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
    name: FindInWhere<TOut>
    nameWithType: TraceExtensions.FindInWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindInWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
    name: FindInWhere(Of TOut)
    nameWithType: TraceExtensions.FindInWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindInWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindWhere``1(System.Type[],System.Predicate{{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{``0})
  name: FindWhere<TOut>(Type[], Predicate<TOut>)
  nameWithType: TraceExtensions.FindWhere<TOut>(Type[], Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindWhere<TOut>(System.Type[], System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindWhere(Of TOut)(Type(), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindWhere(Of TOut)(System.Type(), System.Predicate(Of TOut))
  name.vb: FindWhere(Of TOut)(Type(), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``1(System.Type[],System.Predicate{``0})
    name: FindWhere<TOut>
    nameWithType: TraceExtensions.FindWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``1(System.Type[],System.Predicate{``0})
    name: FindWhere(Of TOut)
    nameWithType: TraceExtensions.FindWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.GeneralTransformationRule{{TIn}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
  name: TraceInWhere<TIn>(GeneralTransformationRule<TIn>, Predicate<TIn>)
  nameWithType: TraceExtensions.TraceInWhere<TIn>(GeneralTransformationRule<TIn>, Predicate<TIn>)
  fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn>(NMF.Transformations.GeneralTransformationRule<TIn>, System.Predicate<TIn>)
  nameWithType.vb: TraceExtensions.TraceInWhere(Of TIn)(GeneralTransformationRule(Of TIn), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn)(NMF.Transformations.GeneralTransformationRule(Of TIn), System.Predicate(Of TIn))
  name.vb: TraceInWhere(Of TIn)(GeneralTransformationRule(Of TIn), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
    name: TraceInWhere<TIn>
    nameWithType: TraceExtensions.TraceInWhere<TIn>
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
    name: TraceInWhere(Of TIn)
    nameWithType: TraceExtensions.TraceInWhere(Of TIn)
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.GeneralTransformationRule{{TIn1},{TIn2}},System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
  name: TraceInWhere<TIn1, TIn2>(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: TraceExtensions.TraceInWhere<TIn1, TIn2>(GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn1, TIn2>(NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TraceExtensions.TraceInWhere(Of TIn1, TIn2)(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn1, TIn2)(NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: TraceInWhere(Of TIn1, TIn2)(GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
    name: TraceInWhere<TIn1, TIn2>
    nameWithType: TraceExtensions.TraceInWhere<TIn1, TIn2>
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn1, TIn2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
    name: TraceInWhere(Of TIn1, TIn2)
    nameWithType: TraceExtensions.TraceInWhere(Of TIn1, TIn2)
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn1, TIn2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  name: TraceInWhere(GeneralTransformationRule, Predicate<Object[]>)
  nameWithType: TraceExtensions.TraceInWhere(GeneralTransformationRule, Predicate<Object[]>)
  fullName: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<System.Object[]>)
  nameWithType.vb: TraceExtensions.TraceInWhere(GeneralTransformationRule, Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of System.Object()))
  name.vb: TraceInWhere(GeneralTransformationRule, Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: TraceInWhere
    nameWithType: TraceExtensions.TraceInWhere
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: TraceInWhere
    nameWithType: TraceExtensions.TraceInWhere
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
  name: ResolveInWhere(GeneralTransformationRule, Predicate<ITraceEntry>)
  nameWithType: TraceExtensions.ResolveInWhere(GeneralTransformationRule, Predicate<ITraceEntry>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.ITraceEntry>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(GeneralTransformationRule, Predicate(Of ITraceEntry))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.ITraceEntry))
  name.vb: ResolveInWhere(GeneralTransformationRule, Predicate(Of ITraceEntry))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
    name: ResolveInWhere
    nameWithType: TraceExtensions.ResolveInWhere
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
    name: ResolveInWhere
    nameWithType: TraceExtensions.ResolveInWhere
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.TransformationRuleBase{{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0})
  name: FindAllIn<TOut>(TransformationRuleBase<TOut>)
  nameWithType: TraceExtensions.FindAllIn<TOut>(TransformationRuleBase<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindAllIn<TOut>(NMF.Transformations.TransformationRuleBase<TOut>)
  nameWithType.vb: TraceExtensions.FindAllIn(Of TOut)(TransformationRuleBase(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindAllIn(Of TOut)(NMF.Transformations.TransformationRuleBase(Of TOut))
  name.vb: FindAllIn(Of TOut)(TransformationRuleBase(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.TransformationRuleBase{``0})
    name: FindAllIn<TOut>
    nameWithType: TraceExtensions.FindAllIn<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAllIn<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.TransformationRuleBase{``0})
    name: FindAllIn(Of TOut)
    nameWithType: TraceExtensions.FindAllIn(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAllIn(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1})
  name: FindAllIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>)
  nameWithType: TraceExtensions.FindAllIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn, TOut>(NMF.Transformations.TransformationRuleBase<TIn, TOut>)
  nameWithType.vb: TraceExtensions.FindAllIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn, TOut))
  name.vb: FindAllIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.TransformationRuleBase{``0,``1})
    name: FindAllIn<TIn, TOut>
    nameWithType: TraceExtensions.FindAllIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.TransformationRuleBase{``0,``1})
    name: FindAllIn(Of TIn, TOut)
    nameWithType: TraceExtensions.FindAllIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}})
  commentId: M:NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  name: FindAllIn<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>)
  nameWithType: TraceExtensions.FindAllIn<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn1, TIn2, TOut>(NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>)
  nameWithType.vb: TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut))
  name.vb: FindAllIn(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
    name: FindAllIn<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindAllIn<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2})
    name: FindAllIn(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.TransformationRuleBase{{TIn1},{TIn2},{TOut}},System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
  name: ResolveInWhere<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>, Func<TIn1, TIn2, Boolean>)
  nameWithType: TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>(TransformationRuleBase<TIn1, TIn2, TOut>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>(NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: ResolveInWhere(Of TIn1, TIn2, TOut)(TransformationRuleBase(Of TIn1, TIn2, TOut), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
    name: ResolveInWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
    name: ResolveInWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveWhere``3(System.Func{{TIn1},{TIn2},System.Boolean})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Func{``0,``1,System.Boolean})
  name: ResolveWhere<TIn1, TIn2, TOut>(Func<TIn1, TIn2, Boolean>)
  nameWithType: TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>(Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>(System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)(Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)(System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: ResolveWhere(Of TIn1, TIn2, TOut)(Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``3(System.Func{``0,``1,System.Boolean})
    name: ResolveWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``3(System.Func{``0,``1,System.Boolean})
    name: ResolveWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAll``1(System.Type[])
  commentId: M:NMF.Transformations.TraceExtensions.FindAll``1(NMF.Transformations.Core.ITransformationTrace,System.Type[])
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindAll``1(NMF.Transformations.Core.ITransformationTrace,System.Type[])
  name: FindAll<TOut>(Type[])
  nameWithType: TraceExtensions.FindAll<TOut>(Type[])
  fullName: NMF.Transformations.TraceExtensions.FindAll<TOut>(System.Type[])
  nameWithType.vb: TraceExtensions.FindAll(Of TOut)(Type())
  fullName.vb: NMF.Transformations.TraceExtensions.FindAll(Of TOut)(System.Type())
  name.vb: FindAll(Of TOut)(Type())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAll``1(System.Type[])
    name: FindAll<TOut>
    nameWithType: TraceExtensions.FindAll<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAll<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAll``1(System.Type[])
    name: FindAll(Of TOut)
    nameWithType: TraceExtensions.FindAll(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAll(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAll``2
  commentId: M:NMF.Transformations.TraceExtensions.FindAll``2(NMF.Transformations.Core.ITransformationTrace)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindAll``2(NMF.Transformations.Core.ITransformationTrace)
  name: FindAll<TIn, TOut>()
  nameWithType: TraceExtensions.FindAll<TIn, TOut>()
  fullName: NMF.Transformations.TraceExtensions.FindAll<TIn, TOut>()
  nameWithType.vb: TraceExtensions.FindAll(Of TIn, TOut)()
  fullName.vb: NMF.Transformations.TraceExtensions.FindAll(Of TIn, TOut)()
  name.vb: FindAll(Of TIn, TOut)()
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAll``2
    name: FindAll<TIn, TOut>
    nameWithType: TraceExtensions.FindAll<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAll<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAll``2
    name: FindAll(Of TIn, TOut)
    nameWithType: TraceExtensions.FindAll(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAll(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.FindAll``3
  commentId: M:NMF.Transformations.TraceExtensions.FindAll``3(NMF.Transformations.Core.ITransformationTrace)
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.FindAll``3(NMF.Transformations.Core.ITransformationTrace)
  name: FindAll<TIn1, TIn2, TOut>()
  nameWithType: TraceExtensions.FindAll<TIn1, TIn2, TOut>()
  fullName: NMF.Transformations.TraceExtensions.FindAll<TIn1, TIn2, TOut>()
  nameWithType.vb: TraceExtensions.FindAll(Of TIn1, TIn2, TOut)()
  fullName.vb: NMF.Transformations.TraceExtensions.FindAll(Of TIn1, TIn2, TOut)()
  name.vb: FindAll(Of TIn1, TIn2, TOut)()
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAll``3
    name: FindAll<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindAll<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAll<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAll``3
    name: FindAll(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindAll(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAll(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{{TIn},{TOut}},{TIn}[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
  name: ResolveManyIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, TIn[])
  nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>(TransformationRuleBase<TIn, TOut>, TIn[])
  fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>(NMF.Transformations.TransformationRuleBase<TIn, TOut>, TIn[])
  nameWithType.vb: TraceExtensions.ResolveManyIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), TIn())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)(NMF.Transformations.TransformationRuleBase(Of TIn, TOut), TIn())
  name.vb: ResolveManyIn(Of TIn, TOut)(TransformationRuleBase(Of TIn, TOut), TIn())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
    name: ResolveManyIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
    name: ResolveManyIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveManyIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITransformationTrace.NMF.Transformations.TraceExtensions.ResolveMany``2({TIn}[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0[])
  parent: NMF.Transformations.TraceExtensions
  definition: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0[])
  name: ResolveMany<TIn, TOut>(TIn[])
  nameWithType: TraceExtensions.ResolveMany<TIn, TOut>(TIn[])
  fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>(TIn[])
  nameWithType.vb: TraceExtensions.ResolveMany(Of TIn, TOut)(TIn())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)(TIn())
  name.vb: ResolveMany(Of TIn, TOut)(TIn())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(``0[])
    name: ResolveMany<TIn, TOut>
    nameWithType: TraceExtensions.ResolveMany<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(``0[])
    name: ResolveMany(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveMany(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
  isExternal: true
  name: ResolveIn(ITransformationTrace, GeneralTransformationRule, Object[])
  nameWithType: TraceExtensions.ResolveIn(ITransformationTrace, GeneralTransformationRule, Object[])
  fullName: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.Core.GeneralTransformationRule, System.Object[])
  nameWithType.vb: TraceExtensions.ResolveIn(ITransformationTrace, GeneralTransformationRule, Object())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.Core.GeneralTransformationRule, System.Object())
  name.vb: ResolveIn(ITransformationTrace, GeneralTransformationRule, Object())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
    name: ResolveIn
    nameWithType: TraceExtensions.ResolveIn
    fullName: NMF.Transformations.TraceExtensions.ResolveIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Object[])
    name: ResolveIn
    nameWithType: TraceExtensions.ResolveIn
    fullName: NMF.Transformations.TraceExtensions.ResolveIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions
  commentId: T:NMF.Transformations.TraceExtensions
  parent: NMF.Transformations
  name: TraceExtensions
  nameWithType: TraceExtensions
  fullName: NMF.Transformations.TraceExtensions
- uid: NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  name: ResolveIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType: TraceExtensions.ResolveIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, TIn)
  fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType.vb: TraceExtensions.ResolveIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn, TOut), TIn)
  name.vb: ResolveIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.Resolve``2(NMF.Transformations.Core.ITransformationTrace,``0)
  commentId: M:NMF.Transformations.TraceExtensions.Resolve``2(NMF.Transformations.Core.ITransformationTrace,``0)
  name: Resolve<TIn, TOut>(ITransformationTrace, TIn)
  nameWithType: TraceExtensions.Resolve<TIn, TOut>(ITransformationTrace, TIn)
  fullName: NMF.Transformations.TraceExtensions.Resolve<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, TIn)
  nameWithType.vb: TraceExtensions.Resolve(Of TIn, TOut)(ITransformationTrace, TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.Resolve(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, TIn)
  name.vb: Resolve(Of TIn, TOut)(ITransformationTrace, TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.Resolve``2(NMF.Transformations.Core.ITransformationTrace,``0)
    name: Resolve<TIn, TOut>
    nameWithType: TraceExtensions.Resolve<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.Resolve<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.Resolve``2(NMF.Transformations.Core.ITransformationTrace,``0)
    name: Resolve(Of TIn, TOut)
    nameWithType: TraceExtensions.Resolve(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.Resolve(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
  name: ResolveIn<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>, TIn1, TIn2)
  nameWithType: TraceExtensions.ResolveIn<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>, TIn1, TIn2)
  fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>, TIn1, TIn2)
  nameWithType.vb: TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut), TIn1, TIn2)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut), TIn1, TIn2)
  name.vb: ResolveIn(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut), TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
    name: ResolveIn<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.ResolveIn<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveIn<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},``0,``1)
    name: ResolveIn(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveIn(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.Resolve``3(NMF.Transformations.Core.ITransformationTrace,``0,``1)
  commentId: M:NMF.Transformations.TraceExtensions.Resolve``3(NMF.Transformations.Core.ITransformationTrace,``0,``1)
  name: Resolve<TIn1, TIn2, TOut>(ITransformationTrace, TIn1, TIn2)
  nameWithType: TraceExtensions.Resolve<TIn1, TIn2, TOut>(ITransformationTrace, TIn1, TIn2)
  fullName: NMF.Transformations.TraceExtensions.Resolve<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace, TIn1, TIn2)
  nameWithType.vb: TraceExtensions.Resolve(Of TIn1, TIn2, TOut)(ITransformationTrace, TIn1, TIn2)
  fullName.vb: NMF.Transformations.TraceExtensions.Resolve(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace, TIn1, TIn2)
  name.vb: Resolve(Of TIn1, TIn2, TOut)(ITransformationTrace, TIn1, TIn2)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.Resolve``3(NMF.Transformations.Core.ITransformationTrace,``0,``1)
    name: Resolve<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.Resolve<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.Resolve<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.Resolve``3(NMF.Transformations.Core.ITransformationTrace,``0,``1)
    name: Resolve(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.Resolve(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.Resolve(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Object[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Object[])
  isExternal: true
  name: ResolveIn<TOut>(ITransformationTrace, TransformationRuleBase<TOut>, Object[])
  nameWithType: TraceExtensions.ResolveIn<TOut>(ITransformationTrace, TransformationRuleBase<TOut>, Object[])
  fullName: NMF.Transformations.TraceExtensions.ResolveIn<TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TOut>, System.Object[])
  nameWithType.vb: TraceExtensions.ResolveIn(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut), Object())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveIn(Of TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TOut), System.Object())
  name.vb: ResolveIn(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut), Object())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Object[])
    name: ResolveIn<TOut>
    nameWithType: TraceExtensions.ResolveIn<TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveIn<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Object[])
    name: ResolveIn(Of TOut)
    nameWithType: TraceExtensions.ResolveIn(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveIn(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.Resolve``1(NMF.Transformations.Core.ITransformationTrace,System.Object[])
  commentId: M:NMF.Transformations.TraceExtensions.Resolve``1(NMF.Transformations.Core.ITransformationTrace,System.Object[])
  isExternal: true
  name: Resolve<TOut>(ITransformationTrace, Object[])
  nameWithType: TraceExtensions.Resolve<TOut>(ITransformationTrace, Object[])
  fullName: NMF.Transformations.TraceExtensions.Resolve<TOut>(NMF.Transformations.Core.ITransformationTrace, System.Object[])
  nameWithType.vb: TraceExtensions.Resolve(Of TOut)(ITransformationTrace, Object())
  fullName.vb: NMF.Transformations.TraceExtensions.Resolve(Of TOut)(NMF.Transformations.Core.ITransformationTrace, System.Object())
  name.vb: Resolve(Of TOut)(ITransformationTrace, Object())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.Resolve``1(NMF.Transformations.Core.ITransformationTrace,System.Object[])
    name: Resolve<TOut>
    nameWithType: TraceExtensions.Resolve<TOut>
    fullName: NMF.Transformations.TraceExtensions.Resolve<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.Resolve``1(NMF.Transformations.Core.ITransformationTrace,System.Object[])
    name: Resolve(Of TOut)
    nameWithType: TraceExtensions.Resolve(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.Resolve(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
  isExternal: true
  name: ResolveInWhere<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, Predicate<TIn>)
  nameWithType: TraceExtensions.ResolveInWhere<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, Predicate<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn, TOut>, System.Predicate<TIn>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn, TOut), System.Predicate(Of TIn))
  name.vb: ResolveInWhere(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
    name: ResolveInWhere<TIn, TOut>
    nameWithType: TraceExtensions.ResolveInWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``0})
    name: ResolveInWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveInWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``0})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``0})
  isExternal: true
  name: ResolveWhere<TIn, TOut>(ITransformationTrace, Predicate<TIn>)
  nameWithType: TraceExtensions.ResolveWhere<TIn, TOut>(ITransformationTrace, Predicate<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, System.Predicate<TIn>)
  nameWithType.vb: TraceExtensions.ResolveWhere(Of TIn, TOut)(ITransformationTrace, Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, System.Predicate(Of TIn))
  name.vb: ResolveWhere(Of TIn, TOut)(ITransformationTrace, Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``0})
    name: ResolveWhere<TIn, TOut>
    nameWithType: TraceExtensions.ResolveWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``0})
    name: ResolveWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  commentId: M:NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
  name: ResolveManyIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, TIn)
  fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn, TOut>, TIn)
  nameWithType.vb: TraceExtensions.ResolveManyIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn, TOut), TIn)
  name.vb: ResolveManyIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveManyIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0)
    name: ResolveManyIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveManyIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: ResolveManyIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, IEnumerable<TIn>)
  nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, IEnumerable<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn, TOut>, System.Collections.Generic.IEnumerable<TIn>)
  nameWithType.vb: TraceExtensions.ResolveManyIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), IEnumerable(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn, TOut), System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: ResolveManyIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), IEnumerable(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
    name: ResolveManyIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Collections.Generic.IEnumerable{``0})
    name: ResolveManyIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveManyIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: ResolveMany<TIn, TOut>(ITransformationTrace, IEnumerable<TIn>)
  nameWithType: TraceExtensions.ResolveMany<TIn, TOut>(ITransformationTrace, IEnumerable<TIn>)
  fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, System.Collections.Generic.IEnumerable<TIn>)
  nameWithType.vb: TraceExtensions.ResolveMany(Of TIn, TOut)(ITransformationTrace, IEnumerable(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, System.Collections.Generic.IEnumerable(Of TIn))
  name.vb: ResolveMany(Of TIn, TOut)(ITransformationTrace, IEnumerable(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,System.Collections.Generic.IEnumerable{``0})
    name: ResolveMany<TIn, TOut>
    nameWithType: TraceExtensions.ResolveMany<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,System.Collections.Generic.IEnumerable{``0})
    name: ResolveMany(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveMany(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0)
  commentId: M:NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0)
  name: ResolveMany<TIn, TOut>(ITransformationTrace, TIn)
  nameWithType: TraceExtensions.ResolveMany<TIn, TOut>(ITransformationTrace, TIn)
  fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, TIn)
  nameWithType.vb: TraceExtensions.ResolveMany(Of TIn, TOut)(ITransformationTrace, TIn)
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, TIn)
  name.vb: ResolveMany(Of TIn, TOut)(ITransformationTrace, TIn)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0)
    name: ResolveMany<TIn, TOut>
    nameWithType: TraceExtensions.ResolveMany<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0)
    name: ResolveMany(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveMany(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
  isExternal: true
  name: ResolveInWhere<TOut>(ITransformationTrace, TransformationRuleBase<TOut>, Predicate<Object[]>)
  nameWithType: TraceExtensions.ResolveInWhere<TOut>(ITransformationTrace, TransformationRuleBase<TOut>, Predicate<Object[]>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TOut>, System.Predicate<System.Object[]>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut), Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TOut), System.Predicate(Of System.Object()))
  name.vb: ResolveInWhere(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut), Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
    name: ResolveInWhere<TOut>
    nameWithType: TraceExtensions.ResolveInWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{System.Object[]})
    name: ResolveInWhere(Of TOut)
    nameWithType: TraceExtensions.ResolveInWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{System.Object[]})
  isExternal: true
  name: ResolveWhere<TOut>(ITransformationTrace, Type[], Predicate<Object[]>)
  nameWithType: TraceExtensions.ResolveWhere<TOut>(ITransformationTrace, Type[], Predicate<Object[]>)
  fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TOut>(NMF.Transformations.Core.ITransformationTrace, System.Type[], System.Predicate<System.Object[]>)
  nameWithType.vb: TraceExtensions.ResolveWhere(Of TOut)(ITransformationTrace, Type(), Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveWhere(Of TOut)(NMF.Transformations.Core.ITransformationTrace, System.Type(), System.Predicate(Of System.Object()))
  name.vb: ResolveWhere(Of TOut)(ITransformationTrace, Type(), Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{System.Object[]})
    name: ResolveWhere<TOut>
    nameWithType: TraceExtensions.ResolveWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{System.Object[]})
    name: ResolveWhere(Of TOut)
    nameWithType: TraceExtensions.ResolveWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
  commentId: M:NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
  isExternal: true
  name: FindInWhere<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, Predicate<TOut>)
  nameWithType: TraceExtensions.FindInWhere<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn, TOut>, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindInWhere(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn, TOut), System.Predicate(Of TOut))
  name.vb: FindInWhere(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
    name: FindInWhere<TIn, TOut>
    nameWithType: TraceExtensions.FindInWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{``1})
    name: FindInWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.FindInWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``1})
  commentId: M:NMF.Transformations.TraceExtensions.FindWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``1})
  isExternal: true
  name: FindWhere<TIn, TOut>(ITransformationTrace, Predicate<TOut>)
  nameWithType: TraceExtensions.FindWhere<TIn, TOut>(ITransformationTrace, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindWhere(Of TIn, TOut)(ITransformationTrace, Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindWhere(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, System.Predicate(Of TOut))
  name.vb: FindWhere(Of TIn, TOut)(ITransformationTrace, Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``1})
    name: FindWhere<TIn, TOut>
    nameWithType: TraceExtensions.FindWhere<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``2(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``1})
    name: FindWhere(Of TIn, TOut)
    nameWithType: TraceExtensions.FindWhere(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindWhere(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
  commentId: M:NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
  isExternal: true
  name: FindInWhere<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>, Predicate<TOut>)
  nameWithType: TraceExtensions.FindInWhere<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut), System.Predicate(Of TOut))
  name.vb: FindInWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
    name: FindInWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindInWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindInWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Predicate{``2})
    name: FindInWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindInWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``2})
  commentId: M:NMF.Transformations.TraceExtensions.FindWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``2})
  isExternal: true
  name: FindWhere<TIn1, TIn2, TOut>(ITransformationTrace, Predicate<TOut>)
  nameWithType: TraceExtensions.FindWhere<TIn1, TIn2, TOut>(ITransformationTrace, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace, System.Predicate(Of TOut))
  name.vb: FindWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``2})
    name: FindWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Predicate{``2})
    name: FindWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
  commentId: M:NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
  isExternal: true
  name: FindInWhere<TOut>(ITransformationTrace, TransformationRuleBase<TOut>, Predicate<TOut>)
  nameWithType: TraceExtensions.FindInWhere<TOut>(ITransformationTrace, TransformationRuleBase<TOut>, Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindInWhere<TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TOut>, System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindInWhere(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindInWhere(Of TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TOut), System.Predicate(Of TOut))
  name.vb: FindInWhere(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
    name: FindInWhere<TOut>
    nameWithType: TraceExtensions.FindInWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindInWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0},System.Predicate{``0})
    name: FindInWhere(Of TOut)
    nameWithType: TraceExtensions.FindInWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindInWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{``0})
  commentId: M:NMF.Transformations.TraceExtensions.FindWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{``0})
  isExternal: true
  name: FindWhere<TOut>(ITransformationTrace, Type[], Predicate<TOut>)
  nameWithType: TraceExtensions.FindWhere<TOut>(ITransformationTrace, Type[], Predicate<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindWhere<TOut>(NMF.Transformations.Core.ITransformationTrace, System.Type[], System.Predicate<TOut>)
  nameWithType.vb: TraceExtensions.FindWhere(Of TOut)(ITransformationTrace, Type(), Predicate(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindWhere(Of TOut)(NMF.Transformations.Core.ITransformationTrace, System.Type(), System.Predicate(Of TOut))
  name.vb: FindWhere(Of TOut)(ITransformationTrace, Type(), Predicate(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{``0})
    name: FindWhere<TOut>
    nameWithType: TraceExtensions.FindWhere<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindWhere<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindWhere``1(NMF.Transformations.Core.ITransformationTrace,System.Type[],System.Predicate{``0})
    name: FindWhere(Of TOut)
    nameWithType: TraceExtensions.FindWhere(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindWhere(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
  commentId: M:NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
  isExternal: true
  name: TraceInWhere<TIn>(ITransformationTrace, GeneralTransformationRule<TIn>, Predicate<TIn>)
  nameWithType: TraceExtensions.TraceInWhere<TIn>(ITransformationTrace, GeneralTransformationRule<TIn>, Predicate<TIn>)
  fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.GeneralTransformationRule<TIn>, System.Predicate<TIn>)
  nameWithType.vb: TraceExtensions.TraceInWhere(Of TIn)(ITransformationTrace, GeneralTransformationRule(Of TIn), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.GeneralTransformationRule(Of TIn), System.Predicate(Of TIn))
  name.vb: TraceInWhere(Of TIn)(ITransformationTrace, GeneralTransformationRule(Of TIn), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
    name: TraceInWhere<TIn>
    nameWithType: TraceExtensions.TraceInWhere<TIn>
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{``0})
    name: TraceInWhere(Of TIn)
    nameWithType: TraceExtensions.TraceInWhere(Of TIn)
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: TraceInWhere<TIn1, TIn2>(ITransformationTrace, GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  nameWithType: TraceExtensions.TraceInWhere<TIn1, TIn2>(ITransformationTrace, GeneralTransformationRule<TIn1, TIn2>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn1, TIn2>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.GeneralTransformationRule<TIn1, TIn2>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TraceExtensions.TraceInWhere(Of TIn1, TIn2)(ITransformationTrace, GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn1, TIn2)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.GeneralTransformationRule(Of TIn1, TIn2), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: TraceInWhere(Of TIn1, TIn2)(ITransformationTrace, GeneralTransformationRule(Of TIn1, TIn2), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
    name: TraceInWhere<TIn1, TIn2>
    nameWithType: TraceExtensions.TraceInWhere<TIn1, TIn2>
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere<TIn1, TIn2>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Boolean})
    name: TraceInWhere(Of TIn1, TIn2)
    nameWithType: TraceExtensions.TraceInWhere(Of TIn1, TIn2)
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere(Of TIn1, TIn2)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.GeneralTransformationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  commentId: M:NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
  isExternal: true
  name: TraceInWhere(ITransformationTrace, GeneralTransformationRule, Predicate<Object[]>)
  nameWithType: TraceExtensions.TraceInWhere(ITransformationTrace, GeneralTransformationRule, Predicate<Object[]>)
  fullName: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<System.Object[]>)
  nameWithType.vb: TraceExtensions.TraceInWhere(ITransformationTrace, GeneralTransformationRule, Predicate(Of Object()))
  fullName.vb: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of System.Object()))
  name.vb: TraceInWhere(ITransformationTrace, GeneralTransformationRule, Predicate(Of Object()))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: TraceInWhere
    nameWithType: TraceExtensions.TraceInWhere
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.TraceInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{System.Object[]})
    name: TraceInWhere
    nameWithType: TraceExtensions.TraceInWhere
    fullName: NMF.Transformations.TraceExtensions.TraceInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
  isExternal: true
  name: ResolveInWhere(ITransformationTrace, GeneralTransformationRule, Predicate<ITraceEntry>)
  nameWithType: TraceExtensions.ResolveInWhere(ITransformationTrace, GeneralTransformationRule, Predicate<ITraceEntry>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.ITraceEntry>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(ITransformationTrace, GeneralTransformationRule, Predicate(Of ITraceEntry))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.ITraceEntry))
  name.vb: ResolveInWhere(ITransformationTrace, GeneralTransformationRule, Predicate(Of ITraceEntry))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
    name: ResolveInWhere
    nameWithType: TraceExtensions.ResolveInWhere
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.ITraceEntry})
    name: ResolveInWhere
    nameWithType: TraceExtensions.ResolveInWhere
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0})
  commentId: M:NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0})
  name: FindAllIn<TOut>(ITransformationTrace, TransformationRuleBase<TOut>)
  nameWithType: TraceExtensions.FindAllIn<TOut>(ITransformationTrace, TransformationRuleBase<TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindAllIn<TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TOut>)
  nameWithType.vb: TraceExtensions.FindAllIn(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindAllIn(Of TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TOut))
  name.vb: FindAllIn(Of TOut)(ITransformationTrace, TransformationRuleBase(Of TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0})
    name: FindAllIn<TOut>
    nameWithType: TraceExtensions.FindAllIn<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAllIn<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``1(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0})
    name: FindAllIn(Of TOut)
    nameWithType: TraceExtensions.FindAllIn(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAllIn(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`1
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1})
  commentId: M:NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1})
  name: FindAllIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>)
  nameWithType: TraceExtensions.FindAllIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn, TOut>)
  nameWithType.vb: TraceExtensions.FindAllIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn, TOut))
  name.vb: FindAllIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1})
    name: FindAllIn<TIn, TOut>
    nameWithType: TraceExtensions.FindAllIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1})
    name: FindAllIn(Of TIn, TOut)
    nameWithType: TraceExtensions.FindAllIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  commentId: M:NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
  name: FindAllIn<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>)
  nameWithType: TraceExtensions.FindAllIn<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>)
  fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>)
  nameWithType.vb: TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut))
  fullName.vb: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut))
  name.vb: FindAllIn(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
    name: FindAllIn<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindAllIn<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAllIn<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAllIn``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2})
    name: FindAllIn(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAllIn(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: ResolveInWhere<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>, Func<TIn1, TIn2, Boolean>)
  nameWithType: TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>(ITransformationTrace, TransformationRuleBase<TIn1, TIn2, TOut>, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn1, TIn2, TOut>, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut), Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn1, TIn2, TOut), System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: ResolveInWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn1, TIn2, TOut), Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
    name: ResolveInWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveInWhere``3(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Boolean})
    name: ResolveInWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveInWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TraceExtensions.ResolveWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: ResolveWhere<TIn1, TIn2, TOut>(ITransformationTrace, Func<TIn1, TIn2, Boolean>)
  nameWithType: TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>(ITransformationTrace, Func<TIn1, TIn2, Boolean>)
  fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace, System.Func<TIn1, TIn2, System.Boolean>)
  nameWithType.vb: TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, Func(Of TIn1, TIn2, Boolean))
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace, System.Func(Of TIn1, TIn2, System.Boolean))
  name.vb: ResolveWhere(Of TIn1, TIn2, TOut)(ITransformationTrace, Func(Of TIn1, TIn2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Func{``0,``1,System.Boolean})
    name: ResolveWhere<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveWhere``3(NMF.Transformations.Core.ITransformationTrace,System.Func{``0,``1,System.Boolean})
    name: ResolveWhere(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveWhere(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn1
    nameWithType: TIn1
    fullName: TIn1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn2
    nameWithType: TIn2
    fullName: TIn2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindAll``1(NMF.Transformations.Core.ITransformationTrace,System.Type[])
  commentId: M:NMF.Transformations.TraceExtensions.FindAll``1(NMF.Transformations.Core.ITransformationTrace,System.Type[])
  isExternal: true
  name: FindAll<TOut>(ITransformationTrace, Type[])
  nameWithType: TraceExtensions.FindAll<TOut>(ITransformationTrace, Type[])
  fullName: NMF.Transformations.TraceExtensions.FindAll<TOut>(NMF.Transformations.Core.ITransformationTrace, System.Type[])
  nameWithType.vb: TraceExtensions.FindAll(Of TOut)(ITransformationTrace, Type())
  fullName.vb: NMF.Transformations.TraceExtensions.FindAll(Of TOut)(NMF.Transformations.Core.ITransformationTrace, System.Type())
  name.vb: FindAll(Of TOut)(ITransformationTrace, Type())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAll``1(NMF.Transformations.Core.ITransformationTrace,System.Type[])
    name: FindAll<TOut>
    nameWithType: TraceExtensions.FindAll<TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAll<TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAll``1(NMF.Transformations.Core.ITransformationTrace,System.Type[])
    name: FindAll(Of TOut)
    nameWithType: TraceExtensions.FindAll(Of TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAll(Of TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindAll``2(NMF.Transformations.Core.ITransformationTrace)
  commentId: M:NMF.Transformations.TraceExtensions.FindAll``2(NMF.Transformations.Core.ITransformationTrace)
  name: FindAll<TIn, TOut>(ITransformationTrace)
  nameWithType: TraceExtensions.FindAll<TIn, TOut>(ITransformationTrace)
  fullName: NMF.Transformations.TraceExtensions.FindAll<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace)
  nameWithType.vb: TraceExtensions.FindAll(Of TIn, TOut)(ITransformationTrace)
  fullName.vb: NMF.Transformations.TraceExtensions.FindAll(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace)
  name.vb: FindAll(Of TIn, TOut)(ITransformationTrace)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAll``2(NMF.Transformations.Core.ITransformationTrace)
    name: FindAll<TIn, TOut>
    nameWithType: TraceExtensions.FindAll<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAll<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAll``2(NMF.Transformations.Core.ITransformationTrace)
    name: FindAll(Of TIn, TOut)
    nameWithType: TraceExtensions.FindAll(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAll(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.FindAll``3(NMF.Transformations.Core.ITransformationTrace)
  commentId: M:NMF.Transformations.TraceExtensions.FindAll``3(NMF.Transformations.Core.ITransformationTrace)
  name: FindAll<TIn1, TIn2, TOut>(ITransformationTrace)
  nameWithType: TraceExtensions.FindAll<TIn1, TIn2, TOut>(ITransformationTrace)
  fullName: NMF.Transformations.TraceExtensions.FindAll<TIn1, TIn2, TOut>(NMF.Transformations.Core.ITransformationTrace)
  nameWithType.vb: TraceExtensions.FindAll(Of TIn1, TIn2, TOut)(ITransformationTrace)
  fullName.vb: NMF.Transformations.TraceExtensions.FindAll(Of TIn1, TIn2, TOut)(NMF.Transformations.Core.ITransformationTrace)
  name.vb: FindAll(Of TIn1, TIn2, TOut)(ITransformationTrace)
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.FindAll``3(NMF.Transformations.Core.ITransformationTrace)
    name: FindAll<TIn1, TIn2, TOut>
    nameWithType: TraceExtensions.FindAll<TIn1, TIn2, TOut>
    fullName: NMF.Transformations.TraceExtensions.FindAll<TIn1, TIn2, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.FindAll``3(NMF.Transformations.Core.ITransformationTrace)
    name: FindAll(Of TIn1, TIn2, TOut)
    nameWithType: TraceExtensions.FindAll(Of TIn1, TIn2, TOut)
    fullName: NMF.Transformations.TraceExtensions.FindAll(Of TIn1, TIn2, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
  name: ResolveManyIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, TIn[])
  nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>(ITransformationTrace, TransformationRuleBase<TIn, TOut>, TIn[])
  fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase<TIn, TOut>, TIn[])
  nameWithType.vb: TraceExtensions.ResolveManyIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), TIn())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, NMF.Transformations.TransformationRuleBase(Of TIn, TOut), TIn())
  name.vb: ResolveManyIn(Of TIn, TOut)(ITransformationTrace, TransformationRuleBase(Of TIn, TOut), TIn())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
    name: ResolveManyIn<TIn, TOut>
    nameWithType: TraceExtensions.ResolveManyIn<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveManyIn``2(NMF.Transformations.Core.ITransformationTrace,NMF.Transformations.TransformationRuleBase{``0,``1},``0[])
    name: ResolveManyIn(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveManyIn(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveManyIn(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
    nameWithType: TransformationRuleBase
    fullName: NMF.Transformations.TransformationRuleBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0[])
  commentId: M:NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0[])
  name: ResolveMany<TIn, TOut>(ITransformationTrace, TIn[])
  nameWithType: TraceExtensions.ResolveMany<TIn, TOut>(ITransformationTrace, TIn[])
  fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>(NMF.Transformations.Core.ITransformationTrace, TIn[])
  nameWithType.vb: TraceExtensions.ResolveMany(Of TIn, TOut)(ITransformationTrace, TIn())
  fullName.vb: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)(NMF.Transformations.Core.ITransformationTrace, TIn())
  name.vb: ResolveMany(Of TIn, TOut)(ITransformationTrace, TIn())
  spec.csharp:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0[])
    name: ResolveMany<TIn, TOut>
    nameWithType: TraceExtensions.ResolveMany<TIn, TOut>
    fullName: NMF.Transformations.TraceExtensions.ResolveMany<TIn, TOut>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.TraceExtensions.ResolveMany``2(NMF.Transformations.Core.ITransformationTrace,``0[])
    name: ResolveMany(Of TIn, TOut)
    nameWithType: TraceExtensions.ResolveMany(Of TIn, TOut)
    fullName: NMF.Transformations.TraceExtensions.ResolveMany(Of TIn, TOut)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITransformationTrace
    name: ITransformationTrace
    nameWithType: ITransformationTrace
    fullName: NMF.Transformations.Core.ITransformationTrace
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: NMF.Transformations.Core.Trace.#ctor*
  commentId: Overload:NMF.Transformations.Core.Trace.#ctor
  name: Trace
  nameWithType: Trace.Trace
  fullName: NMF.Transformations.Core.Trace.Trace
- uid: System.Collections.Generic.ICollection{NMF.Transformations.Core.ITraceEntry}
  commentId: T:System.Collections.Generic.ICollection{NMF.Transformations.Core.ITraceEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ITraceEntry>
  nameWithType: ICollection<ITraceEntry>
  fullName: System.Collections.Generic.ICollection<NMF.Transformations.Core.ITraceEntry>
  nameWithType.vb: ICollection(Of ITraceEntry)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Transformations.Core.ITraceEntry)
  name.vb: ICollection(Of ITraceEntry)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Transformations.Core.AbstractTrace.Computations
  commentId: P:NMF.Transformations.Core.AbstractTrace.Computations
  parent: NMF.Transformations.Core.AbstractTrace
  name: Computations
  nameWithType: AbstractTrace.Computations
  fullName: NMF.Transformations.Core.AbstractTrace.Computations
- uid: NMF.Transformations.Core.Trace.Computations*
  commentId: Overload:NMF.Transformations.Core.Trace.Computations
  name: Computations
  nameWithType: Trace.Computations
  fullName: NMF.Transformations.Core.Trace.Computations
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.ITraceEntry}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Core.ITraceEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ITraceEntry>
  nameWithType: IEnumerable<ITraceEntry>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Core.ITraceEntry>
  nameWithType.vb: IEnumerable(Of ITraceEntry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Core.ITraceEntry)
  name.vb: IEnumerable(Of ITraceEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.AbstractTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  commentId: M:NMF.Transformations.Core.AbstractTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  parent: NMF.Transformations.Core.AbstractTrace
  name: RevokeEntry(ITraceEntry)
  nameWithType: AbstractTrace.RevokeEntry(ITraceEntry)
  fullName: NMF.Transformations.Core.AbstractTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
    name: RevokeEntry
    nameWithType: AbstractTrace.RevokeEntry
    fullName: NMF.Transformations.Core.AbstractTrace.RevokeEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
    name: RevokeEntry
    nameWithType: AbstractTrace.RevokeEntry
    fullName: NMF.Transformations.Core.AbstractTrace.RevokeEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Trace.RevokeEntry*
  commentId: Overload:NMF.Transformations.Core.Trace.RevokeEntry
  name: RevokeEntry
  nameWithType: Trace.RevokeEntry
  fullName: NMF.Transformations.Core.Trace.RevokeEntry
- uid: NMF.Transformations.Core.ITransformationTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  commentId: M:NMF.Transformations.Core.ITransformationTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  parent: NMF.Transformations.Core.ITransformationTrace
  name: RevokeEntry(ITraceEntry)
  nameWithType: ITransformationTrace.RevokeEntry(ITraceEntry)
  fullName: NMF.Transformations.Core.ITransformationTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
    name: RevokeEntry
    nameWithType: ITransformationTrace.RevokeEntry
    fullName: NMF.Transformations.Core.ITransformationTrace.RevokeEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationTrace.RevokeEntry(NMF.Transformations.Core.ITraceEntry)
    name: RevokeEntry
    nameWithType: ITransformationTrace.RevokeEntry
    fullName: NMF.Transformations.Core.ITransformationTrace.RevokeEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.ITraceEntry
  commentId: T:NMF.Transformations.Core.ITraceEntry
  parent: NMF.Transformations.Core
  name: ITraceEntry
  nameWithType: ITraceEntry
  fullName: NMF.Transformations.Core.ITraceEntry
- uid: NMF.Transformations.Core.AbstractTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  commentId: M:NMF.Transformations.Core.AbstractTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  parent: NMF.Transformations.Core.AbstractTrace
  name: PublishEntry(ITraceEntry)
  nameWithType: AbstractTrace.PublishEntry(ITraceEntry)
  fullName: NMF.Transformations.Core.AbstractTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  spec.csharp:
  - uid: NMF.Transformations.Core.AbstractTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
    name: PublishEntry
    nameWithType: AbstractTrace.PublishEntry
    fullName: NMF.Transformations.Core.AbstractTrace.PublishEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.AbstractTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
    name: PublishEntry
    nameWithType: AbstractTrace.PublishEntry
    fullName: NMF.Transformations.Core.AbstractTrace.PublishEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Trace.PublishEntry*
  commentId: Overload:NMF.Transformations.Core.Trace.PublishEntry
  name: PublishEntry
  nameWithType: Trace.PublishEntry
  fullName: NMF.Transformations.Core.Trace.PublishEntry
- uid: NMF.Transformations.Core.ITransformationTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  commentId: M:NMF.Transformations.Core.ITransformationTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  parent: NMF.Transformations.Core.ITransformationTrace
  name: PublishEntry(ITraceEntry)
  nameWithType: ITransformationTrace.PublishEntry(ITraceEntry)
  fullName: NMF.Transformations.Core.ITransformationTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
  spec.csharp:
  - uid: NMF.Transformations.Core.ITransformationTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
    name: PublishEntry
    nameWithType: ITransformationTrace.PublishEntry
    fullName: NMF.Transformations.Core.ITransformationTrace.PublishEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.ITransformationTrace.PublishEntry(NMF.Transformations.Core.ITraceEntry)
    name: PublishEntry
    nameWithType: ITransformationTrace.PublishEntry
    fullName: NMF.Transformations.Core.ITransformationTrace.PublishEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.ITraceEntry
    name: ITraceEntry
    nameWithType: ITraceEntry
    fullName: NMF.Transformations.Core.ITraceEntry
  - name: )
    nameWithType: )
    fullName: )
