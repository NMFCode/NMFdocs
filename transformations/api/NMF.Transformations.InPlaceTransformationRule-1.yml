### YamlMime:ManagedReference
items:
- uid: NMF.Transformations.InPlaceTransformationRule`1
  commentId: T:NMF.Transformations.InPlaceTransformationRule`1
  id: InPlaceTransformationRule`1
  parent: NMF.Transformations
  children:
  - NMF.Transformations.InPlaceTransformationRule`1.#ctor
  - NMF.Transformations.InPlaceTransformationRule`1.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.InPlaceTransformationRule`1.Init(`0,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.InPlaceTransformationRule`1.NeedDependenciesForOutputCreation
  - NMF.Transformations.InPlaceTransformationRule`1.Transform(`0,NMF.Transformations.Core.ITransformationContext)
  langs:
  - csharp
  - vb
  name: InPlaceTransformationRule<TIn>
  nameWithType: InPlaceTransformationRule<TIn>
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>
  type: Class
  source:
    remote:
      path: Transformations/Transformations/NTL/InPlaceTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InPlaceTransformationRule
    path: src/Transformations/Transformations/NTL/InPlaceTransformationRule.cs
    startLine: 16
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nDefines a simple transformation rule of a transformation that has one input argument and no output\n"
  remarks: Simple means that the transformation rule does not require a custom computation class
  example: []
  syntax:
    content: 'public abstract class InPlaceTransformationRule<TIn> : InPlaceTransformationRuleBase<TIn> where TIn : class'
    typeParameters:
    - id: TIn
      description: The type of the input argument
    content.vb: Public MustInherit Class InPlaceTransformationRule(Of TIn As Class) Inherits InPlaceTransformationRuleBase(Of TIn)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.GeneralTransformationRule{{TIn}}
  - NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}
  derivedClasses:
  - NMF.Transformations.ModelCheckTransformationRule`1
  inheritedMembers:
  - NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}.OutputType
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Rule``1
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.WithPattern(NMF.Transformations.ITransformationRulePattern{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireByType``1
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireByType``1(System.Func{{TIn},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireByType``2(System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireManyByType``1(System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireManyByType``2(System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}},System.Predicate{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}},System.Predicate{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallByType``1(System.Func{{TIn},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallByType``2(System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}},System.Predicate{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}},System.Predicate{{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallManyByType``1(System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallManyByType``2(System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.InputType
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(System.Func{{TRequiredInput},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(System.Func{{TRequiredInput},{TIn}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.TraceInput``1(System.Func{{TIn},{TKey}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},{TIn}},System.Func{{TIn},{TKey}})
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,{TIn}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,{TIn}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{{TIn}}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{{TIn}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{{TIn}}.ToString
  - NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext,System.Boolean)
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(System.Boolean)
  - NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  nameWithType.vb: InPlaceTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn)
  name.vb: InPlaceTransformationRule(Of TIn)
- uid: NMF.Transformations.InPlaceTransformationRule`1.#ctor
  commentId: M:NMF.Transformations.InPlaceTransformationRule`1.#ctor
  id: '#ctor'
  parent: NMF.Transformations.InPlaceTransformationRule`1
  langs:
  - csharp
  - vb
  name: InPlaceTransformationRule()
  nameWithType: InPlaceTransformationRule<TIn>.InPlaceTransformationRule()
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.InPlaceTransformationRule()
  type: Constructor
  source:
    remote:
      path: Transformations/Transformations/NTL/InPlaceTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Transformations/Transformations/NTL/InPlaceTransformationRule.cs
    startLine: 24
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates a new transformation rule\n"
  example: []
  syntax:
    content: public InPlaceTransformationRule()
    content.vb: Public Sub New()
  overload: NMF.Transformations.InPlaceTransformationRule`1.#ctor*
  nameWithType.vb: InPlaceTransformationRule(Of TIn).New()
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).New()
  name.vb: New()
- uid: NMF.Transformations.InPlaceTransformationRule`1.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.InPlaceTransformationRule`1.NeedDependenciesForOutputCreation
  id: NeedDependenciesForOutputCreation
  parent: NMF.Transformations.InPlaceTransformationRule`1
  langs:
  - csharp
  - vb
  name: NeedDependenciesForOutputCreation
  nameWithType: InPlaceTransformationRule<TIn>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.NeedDependenciesForOutputCreation
  type: Property
  source:
    remote:
      path: Transformations/Transformations/NTL/InPlaceTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NeedDependenciesForOutputCreation
    path: src/Transformations/Transformations/NTL/InPlaceTransformationRule.cs
    startLine: 33
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nGets a value indicating whether the output for all dependencies must have been created before this rule creates the output\n"
  example: []
  syntax:
    content: public override bool NeedDependenciesForOutputCreation { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property NeedDependenciesForOutputCreation As Boolean
  overridden: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  overload: NMF.Transformations.InPlaceTransformationRule`1.NeedDependenciesForOutputCreation*
  nameWithType.vb: InPlaceTransformationRule(Of TIn).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.InPlaceTransformationRule`1.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.InPlaceTransformationRule`1.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  id: CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.InPlaceTransformationRule`1
  langs:
  - csharp
  - vb
  name: CreateComputation(object[], IComputationContext)
  nameWithType: InPlaceTransformationRule<TIn>.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/InPlaceTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateComputation
    path: src/Transformations/Transformations/NTL/InPlaceTransformationRule.cs
    startLine: 69
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nCreates a new Computation instance for this transformation rule or the given input \n"
  example: []
  syntax:
    content: public override Computation CreateComputation(object[] input, IComputationContext context)
    parameters:
    - id: input
      type: System.Object[]
      description: The input arguments for this computation
    - id: context
      type: NMF.Transformations.Core.IComputationContext
      description: The context for this computation
    return:
      type: NMF.Transformations.Core.Computation
      description: A computation object
    content.vb: Public Overrides Function CreateComputation(input As Object(), context As IComputationContext) As Computation
  overridden: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  overload: NMF.Transformations.InPlaceTransformationRule`1.CreateComputation*
  nameWithType.vb: InPlaceTransformationRule(Of TIn).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
- uid: NMF.Transformations.InPlaceTransformationRule`1.Transform(`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.InPlaceTransformationRule`1.Transform(`0,NMF.Transformations.Core.ITransformationContext)
  id: Transform(`0,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.InPlaceTransformationRule`1
  langs:
  - csharp
  - vb
  name: Transform(TIn, ITransformationContext)
  nameWithType: InPlaceTransformationRule<TIn>.Transform(TIn, ITransformationContext)
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.Transform(TIn, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/InPlaceTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Transformations/NTL/InPlaceTransformationRule.cs
    startLine: 83
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nInitializes the transformation output\n"
  remarks: At this point, all the transformation outputs are created (also the delayed ones), thus, the trace is fully reliable
  example: []
  syntax:
    content: public virtual void Transform(TIn input, ITransformationContext context)
    parameters:
    - id: input
      type: '{TIn}'
      description: The input of the transformation rule
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The context (and trace!) object
    content.vb: Public Overridable Sub Transform(input As TIn, context As ITransformationContext)
  overload: NMF.Transformations.InPlaceTransformationRule`1.Transform*
  nameWithType.vb: InPlaceTransformationRule(Of TIn).Transform(TIn, ITransformationContext)
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).Transform(TIn, NMF.Transformations.Core.ITransformationContext)
- uid: NMF.Transformations.InPlaceTransformationRule`1.Init(`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.InPlaceTransformationRule`1.Init(`0,NMF.Transformations.Core.ITransformationContext)
  id: Init(`0,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.InPlaceTransformationRule`1
  langs:
  - csharp
  - vb
  name: Init(TIn, ITransformationContext)
  nameWithType: InPlaceTransformationRule<TIn>.Init(TIn, ITransformationContext)
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.Init(TIn, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Transformations/NTL/InPlaceTransformationRule.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Init
    path: src/Transformations/Transformations/NTL/InPlaceTransformationRule.cs
    startLine: 90
  assemblies:
  - NMF.Transformations
  namespace: NMF.Transformations
  summary: "\nInitializes the transformation. This is done before any other transformation rule hits Transform\n"
  example: []
  syntax:
    content: public virtual void Init(TIn input, ITransformationContext context)
    parameters:
    - id: input
      type: '{TIn}'
      description: The input for this transformation rule
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The current transformation context
    content.vb: Public Overridable Sub Init(input As TIn, context As ITransformationContext)
  overload: NMF.Transformations.InPlaceTransformationRule`1.Init*
  nameWithType.vb: InPlaceTransformationRule(Of TIn).Init(TIn, ITransformationContext)
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).Init(TIn, NMF.Transformations.Core.ITransformationContext)
references:
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}
  commentId: T:NMF.Transformations.GeneralTransformationRule{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase{`0}
  parent: NMF.Transformations
  definition: NMF.Transformations.InPlaceTransformationRuleBase`1
  name: InPlaceTransformationRuleBase<TIn>
  nameWithType: InPlaceTransformationRuleBase<TIn>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TIn>
  nameWithType.vb: InPlaceTransformationRuleBase(Of TIn)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TIn)
  name.vb: InPlaceTransformationRuleBase(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}.OutputType
  commentId: P:NMF.Transformations.InPlaceTransformationRuleBase{`0}.OutputType
  parent: NMF.Transformations.InPlaceTransformationRuleBase{{TIn}}
  definition: NMF.Transformations.InPlaceTransformationRuleBase`1.OutputType
  name: OutputType
  nameWithType: InPlaceTransformationRuleBase<TIn>.OutputType
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<TIn>.OutputType
  nameWithType.vb: InPlaceTransformationRuleBase(Of TIn).OutputType
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of TIn).OutputType
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Rule``1
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.WithPattern(NMF.Transformations.ITransformationRulePattern{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(ITransformationRulePattern<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(ITransformationRulePattern(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``1
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``1
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``1
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireByType``1(System.Func{{TIn},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``1(System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  name: RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireByType``2(System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireManyByType``1(System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireManyByType``2(System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Require(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Require(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Call(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Call(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallByType``1(System.Func{{TIn},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallByType``1(System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  name: CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallByType``2(System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},{TRequiredInput}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},{TRequiredInput1}},System.Func{{TIn},{TRequiredInput2}},System.Predicate{{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallManyByType``1(System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallManyByType``2(System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TIn},System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TIn},System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule{`0}.InputType
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).InputType
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(System.Func{{TRequiredInput},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(System.Func{``0,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(System.Func{{TRequiredInput},{TIn}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},{TIn}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{{TIn}}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},{TIn}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{{TIn}}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.TraceInput``1(System.Func{{TIn},{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.TraceInput``1(System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  name: TraceInput<TKey>(Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},{TIn}},System.Func{{TIn},{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  name: TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TIn>, System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TIn), System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,{TIn}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,{TIn}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{{TIn}}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{{TIn}}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{{TIn}}.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule{`0}.ToString
  parent: NMF.Transformations.GeneralTransformationRule{{TIn}}
  definition: NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{`0}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  name: ToComputationSource<T>(InPlaceTransformationRuleBase<T>)
  nameWithType: IncrementalExtensions.ToComputationSource<T>(InPlaceTransformationRuleBase<T>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<T>(NMF.Transformations.InPlaceTransformationRuleBase<T>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of T)(NMF.Transformations.InPlaceTransformationRuleBase(Of T))
  name.vb: ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0})
    name: ToComputationSource
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  name: ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TIn>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TIn>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn>(NMF.Transformations.InPlaceTransformationRuleBase<TIn>, NMF.Transformations.Core.ITransformationContext, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn)(NMF.Transformations.InPlaceTransformationRuleBase(Of TIn), NMF.Transformations.Core.ITransformationContext, Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn), Boolean))
  name.vb: ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TIn
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  name: ToComputationSource<T>(InPlaceTransformationRuleBase<T>, ITransformationContext, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<T>(InPlaceTransformationRuleBase<T>, ITransformationContext, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<T>(NMF.Transformations.InPlaceTransformationRuleBase<T>, NMF.Transformations.Core.ITransformationContext, bool)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T), ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of T)(NMF.Transformations.InPlaceTransformationRuleBase(Of T), NMF.Transformations.Core.ITransformationContext, Boolean)
  name.vb: ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T), ITransformationContext, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  name: ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, ITransformationContext, Func<InPlaceComputationWrapper<TIn>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, ITransformationContext, Func<InPlaceComputationWrapper<TIn>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn>(NMF.Transformations.InPlaceTransformationRuleBase<TIn>, NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn)(NMF.Transformations.InPlaceTransformationRuleBase(Of TIn), NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn), Boolean))
  name.vb: ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TIn
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  name: ToComputationSource<T>(InPlaceTransformationRuleBase<T>, ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<T>(InPlaceTransformationRuleBase<T>, ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<T>(NMF.Transformations.InPlaceTransformationRuleBase<T>, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of T)(NMF.Transformations.InPlaceTransformationRuleBase(Of T), NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T), ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  name: ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, bool, Func<InPlaceComputationWrapper<TIn>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, bool, Func<InPlaceComputationWrapper<TIn>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn>(NMF.Transformations.InPlaceTransformationRuleBase<TIn>, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), Boolean, Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn)(NMF.Transformations.InPlaceTransformationRuleBase(Of TIn), Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn), Boolean))
  name.vb: ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), Boolean, Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TIn
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  name: ToComputationSource<T>(InPlaceTransformationRuleBase<T>, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<T>(InPlaceTransformationRuleBase<T>, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<T>(NMF.Transformations.InPlaceTransformationRuleBase<T>, bool)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T), Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of T)(NMF.Transformations.InPlaceTransformationRuleBase(Of T), Boolean)
  name.vb: ToComputationSource(Of T)(InPlaceTransformationRuleBase(Of T), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},System.Boolean)
    name: ToComputationSource
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},System.Boolean)
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase{`0}.NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{{TIn}},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  parent: NMF.Transformations.Linq.IncrementalExtensions
  definition: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  name: ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, Func<InPlaceComputationWrapper<TIn>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TIn>(InPlaceTransformationRuleBase<TIn>, Func<InPlaceComputationWrapper<TIn>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TIn>(NMF.Transformations.InPlaceTransformationRuleBase<TIn>, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TIn>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TIn)(NMF.Transformations.InPlaceTransformationRuleBase(Of TIn), System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TIn), Boolean))
  name.vb: ToComputationSource(Of TIn)(InPlaceTransformationRuleBase(Of TIn), Func(Of InPlaceComputationWrapper(Of TIn), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TIn
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{`0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{`0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase`1
  commentId: T:NMF.Transformations.InPlaceTransformationRuleBase`1
  name: InPlaceTransformationRuleBase<T>
  nameWithType: InPlaceTransformationRuleBase<T>
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<T>
  nameWithType.vb: InPlaceTransformationRuleBase(Of T)
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of T)
  name.vb: InPlaceTransformationRuleBase(Of T)
  spec.csharp:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRuleBase`1.OutputType
  commentId: P:NMF.Transformations.InPlaceTransformationRuleBase`1.OutputType
  name: OutputType
  nameWithType: InPlaceTransformationRuleBase<T>.OutputType
  fullName: NMF.Transformations.InPlaceTransformationRuleBase<T>.OutputType
  nameWithType.vb: InPlaceTransformationRuleBase(Of T).OutputType
  fullName.vb: NMF.Transformations.InPlaceTransformationRuleBase(Of T).OutputType
- uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(ITransformationRulePattern<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(ITransformationRulePattern(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  isExternal: true
  name: RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Require(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Require(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Call(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Call(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  isExternal: true
  name: CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).InputType
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TIn>, System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TIn), System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions
  commentId: T:NMF.Transformations.Linq.IncrementalExtensions
  parent: NMF.Transformations.Linq
  name: IncrementalExtensions
  nameWithType: IncrementalExtensions
  fullName: NMF.Transformations.Linq.IncrementalExtensions
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext, Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
  isExternal: true
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext, bool)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext, Boolean)
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Boolean)
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, ITransformationContext)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), NMF.Transformations.Core.ITransformationContext)
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},NMF.Transformations.Core.ITransformationContext)
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, bool, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), Boolean, System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean, Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean,System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
  isExternal: true
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, bool)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, bool)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean)
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), Boolean)
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Boolean)
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  commentId: M:NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
  isExternal: true
  name: ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, Func<InPlaceComputationWrapper<TInput>, bool>)
  nameWithType: IncrementalExtensions.ToComputationSource<TInput>(InPlaceTransformationRuleBase<TInput>, Func<InPlaceComputationWrapper<TInput>, bool>)
  fullName: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource<TInput>(NMF.Transformations.InPlaceTransformationRuleBase<TInput>, System.Func<NMF.Transformations.Linq.InPlaceComputationWrapper<TInput>, bool>)
  nameWithType.vb: IncrementalExtensions.ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  fullName.vb: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource(Of TInput)(NMF.Transformations.InPlaceTransformationRuleBase(Of TInput), System.Func(Of NMF.Transformations.Linq.InPlaceComputationWrapper(Of TInput), Boolean))
  name.vb: ToComputationSource(Of TInput)(InPlaceTransformationRuleBase(Of TInput), Func(Of InPlaceComputationWrapper(Of TInput), Boolean))
  spec.csharp:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: <
  - name: TInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: <
  - name: TInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Linq.IncrementalExtensions.ToComputationSource``1(NMF.Transformations.InPlaceTransformationRuleBase{``0},System.Func{NMF.Transformations.Linq.InPlaceComputationWrapper{``0},System.Boolean})
    name: ToComputationSource
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: (
  - uid: NMF.Transformations.InPlaceTransformationRuleBase`1
    name: InPlaceTransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Linq.InPlaceComputationWrapper`1
    name: InPlaceComputationWrapper
  - name: (
  - name: Of
  - name: " "
  - name: TInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.Linq
  commentId: N:NMF.Transformations.Linq
  name: NMF.Transformations.Linq
  nameWithType: NMF.Transformations.Linq
  fullName: NMF.Transformations.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Linq
    name: Linq
- uid: NMF.Transformations.InPlaceTransformationRule`1.#ctor*
  commentId: Overload:NMF.Transformations.InPlaceTransformationRule`1.#ctor
  name: InPlaceTransformationRule
  nameWithType: InPlaceTransformationRule<TIn>.InPlaceTransformationRule
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.InPlaceTransformationRule
  nameWithType.vb: InPlaceTransformationRule(Of TIn).New
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).New
  name.vb: New
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.InPlaceTransformationRule`1.NeedDependenciesForOutputCreation*
  commentId: Overload:NMF.Transformations.InPlaceTransformationRule`1.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: InPlaceTransformationRule<TIn>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.NeedDependenciesForOutputCreation
  nameWithType.vb: InPlaceTransformationRule(Of TIn).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).NeedDependenciesForOutputCreation
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.InPlaceTransformationRule`1.CreateComputation*
  commentId: Overload:NMF.Transformations.InPlaceTransformationRule`1.CreateComputation
  name: CreateComputation
  nameWithType: InPlaceTransformationRule<TIn>.CreateComputation
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.CreateComputation
  nameWithType.vb: InPlaceTransformationRule(Of TIn).CreateComputation
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).CreateComputation
- uid: System.Object[]
  isExternal: true
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Transformations.Core.IComputationContext
  commentId: T:NMF.Transformations.Core.IComputationContext
  parent: NMF.Transformations.Core
  name: IComputationContext
  nameWithType: IComputationContext
  fullName: NMF.Transformations.Core.IComputationContext
- uid: NMF.Transformations.Core.Computation
  commentId: T:NMF.Transformations.Core.Computation
  parent: NMF.Transformations.Core
  name: Computation
  nameWithType: Computation
  fullName: NMF.Transformations.Core.Computation
- uid: NMF.Transformations.InPlaceTransformationRule`1.Transform*
  commentId: Overload:NMF.Transformations.InPlaceTransformationRule`1.Transform
  name: Transform
  nameWithType: InPlaceTransformationRule<TIn>.Transform
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.Transform
  nameWithType.vb: InPlaceTransformationRule(Of TIn).Transform
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).Transform
- uid: '{TIn}'
  commentId: '!:TIn'
  definition: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: TIn
  name: TIn
  nameWithType: TIn
  fullName: TIn
- uid: NMF.Transformations.InPlaceTransformationRule`1.Init*
  commentId: Overload:NMF.Transformations.InPlaceTransformationRule`1.Init
  name: Init
  nameWithType: InPlaceTransformationRule<TIn>.Init
  fullName: NMF.Transformations.InPlaceTransformationRule<TIn>.Init
  nameWithType.vb: InPlaceTransformationRule(Of TIn).Init
  fullName.vb: NMF.Transformations.InPlaceTransformationRule(Of TIn).Init
