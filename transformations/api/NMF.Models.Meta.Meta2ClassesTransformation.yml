### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.Meta2ClassesTransformation
  commentId: T:NMF.Models.Meta.Meta2ClassesTransformation
  id: Meta2ClassesTransformation
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit(NMF.Models.Meta.INamespace)
  - NMF.Models.Meta.Meta2ClassesTransformation.CreateReference(NMF.Models.Meta.IType,System.Boolean,NMF.Transformations.Core.ITransformationContext,System.Boolean)
  - NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace
  - NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports
  - NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration
  - NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly
  - NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey(NMF.Models.Model)
  - NMF.Models.Meta.Meta2ClassesTransformation.IsValueType(NMF.Models.Meta.IType)
  - NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap
  - NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested
  - NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations
  - NMF.Models.Meta.Meta2ClassesTransformation.SystemImports
  langs:
  - csharp
  - vb
  name: Meta2ClassesTransformation
  nameWithType: Meta2ClassesTransformation
  fullName: NMF.Models.Meta.Meta2ClassesTransformation
  type: Class
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Type2Type.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Meta2ClassesTransformation
    path: src/Transformations/Models.MetaTransformation/Meta/Type2Type.cs
    startLine: 10
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nThe transformation to transform an NMeta metamodel to code\n"
  example: []
  syntax:
    content: 'public class Meta2ClassesTransformation : ReflectiveTransformation'
    content.vb: >-
      Public Class Meta2ClassesTransformation
          Inherits ReflectiveTransformation
  inheritance:
  - System.Object
  - NMF.Transformations.Core.Transformation
  - NMF.Transformations.ReflectiveTransformation
  inheritedMembers:
  - NMF.Transformations.ReflectiveTransformation.CreateRules
  - NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  - NMF.Transformations.ReflectiveTransformation.Rule``1
  - NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  - NMF.Transformations.ReflectiveTransformation.RegisterRules
  - NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  - NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  - NMF.Transformations.Core.Transformation.Patterns
  - NMF.Transformations.Core.Transformation.IsInitialized
  - NMF.Transformations.Core.Transformation.IsRulesRegistered
  - NMF.Transformations.Core.Transformation.CreateRulesInternal
  - NMF.Transformations.Core.Transformation.CreateContext
  - NMF.Transformations.Core.Transformation.Initialize
  - NMF.Transformations.Core.Transformation.MaxOutputDelay
  - NMF.Transformations.Core.Transformation.MaxTransformationDelay
  - NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  - NMF.Transformations.Core.Transformation.Rules
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports
  id: DefaultSystemImports
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: DefaultSystemImports
  nameWithType: Meta2ClassesTransformation.DefaultSystemImports
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DefaultSystemImports
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 67
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets the default imported system namespaces\n"
  example: []
  syntax:
    content: public static IEnumerable<string> DefaultSystemImports { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Shared ReadOnly Property DefaultSystemImports As IEnumerable(Of String)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NMF.Models.Meta.Meta2ClassesTransformation.SystemImports
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.SystemImports
  id: SystemImports
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: SystemImports
  nameWithType: Meta2ClassesTransformation.SystemImports
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.SystemImports
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SystemImports
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 95
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets the imported system namespaces\n"
  example: []
  syntax:
    content: public virtual IEnumerable<string> SystemImports { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Overridable ReadOnly Property SystemImports As IEnumerable(Of String)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.SystemImports*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: NMF.Models.Meta.Meta2ClassesTransformation.CreateReference(NMF.Models.Meta.IType,System.Boolean,NMF.Transformations.Core.ITransformationContext,System.Boolean)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.CreateReference(NMF.Models.Meta.IType,System.Boolean,NMF.Transformations.Core.ITransformationContext,System.Boolean)
  id: CreateReference(NMF.Models.Meta.IType,System.Boolean,NMF.Transformations.Core.ITransformationContext,System.Boolean)
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: CreateReference(IType, Boolean, ITransformationContext, Boolean)
  nameWithType: Meta2ClassesTransformation.CreateReference(IType, Boolean, ITransformationContext, Boolean)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.CreateReference(NMF.Models.Meta.IType, System.Boolean, NMF.Transformations.Core.ITransformationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateReference
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 112
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nCreates a reference to the given NMeta type\n"
  example: []
  syntax:
    content: protected static CodeTypeReference CreateReference(IType type, bool isReference, ITransformationContext context, bool implementation = false)
    parameters:
    - id: type
      type: NMF.Models.Meta.IType
      description: The NMeta type
    - id: isReference
      type: System.Boolean
      description: A value indicating whether to default to IModelElement or object
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context
    - id: implementation
      type: System.Boolean
      description: if true, a reference to the implementation is returned, otherwise a reference to the interface
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code type reference
    content.vb: Protected Shared Function CreateReference(type As IType, isReference As Boolean, context As ITransformationContext, implementation As Boolean = False) As CodeTypeReference
  overload: NMF.Models.Meta.Meta2ClassesTransformation.CreateReference*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: NMF.Models.Meta.Meta2ClassesTransformation.IsValueType(NMF.Models.Meta.IType)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.IsValueType(NMF.Models.Meta.IType)
  id: IsValueType(NMF.Models.Meta.IType)
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: IsValueType(IType)
  nameWithType: Meta2ClassesTransformation.IsValueType(IType)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.IsValueType(NMF.Models.Meta.IType)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsValueType
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 175
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nDecides whether the given type is a value type\n"
  example: []
  syntax:
    content: protected virtual bool IsValueType(IType type)
    parameters:
    - id: type
      type: NMF.Models.Meta.IType
      description: The NMeta type
    return:
      type: System.Boolean
      description: True, if the type is represented as a value type. Override for more specifics on primitives
    content.vb: Protected Overridable Function IsValueType(type As IType) As Boolean
  overload: NMF.Models.Meta.Meta2ClassesTransformation.IsValueType*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey(NMF.Models.Model)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey(NMF.Models.Model)
  id: GetResourceKey(NMF.Models.Model)
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: GetResourceKey(Model)
  nameWithType: Meta2ClassesTransformation.GetResourceKey(Model)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey(NMF.Models.Model)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetResourceKey
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 206
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets the resource key for the given model element\n"
  example: []
  syntax:
    content: protected virtual string GetResourceKey(Model model)
    parameters:
    - id: model
      type: NMF.Models.Model
      description: The model for which to generate a resource key
    return:
      type: System.String
      description: The resource key of the model
    content.vb: Protected Overridable Function GetResourceKey(model As Model) As String
  overload: NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace
  id: DefaultNamespace
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: DefaultNamespace
  nameWithType: Meta2ClassesTransformation.DefaultNamespace
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DefaultNamespace
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 219
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets or sets the default namespace for the generated code\n"
  remarks: This value can only be set before the transformation is initialized
  example: []
  syntax:
    content: public string DefaultNamespace { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DefaultNamespace As String
  overload: NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap
  id: NamespaceMap
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: NamespaceMap
  nameWithType: Meta2ClassesTransformation.NamespaceMap
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NamespaceMap
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 234
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets the namespace assigned to a model URI\n"
  example: []
  syntax:
    content: public Dictionary<Uri, string> NamespaceMap { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Uri,System.String}
    content.vb: Public ReadOnly Property NamespaceMap As Dictionary(Of Uri, String)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations
  id: SeparateImplementations
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: SeparateImplementations
  nameWithType: Meta2ClassesTransformation.SeparateImplementations
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SeparateImplementations
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 240
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets or sets a value indicating whether to separate the class implementations, i.e. create a public interface or not\n"
  remarks: This value can only be set before the transformation is initialized
  example: []
  syntax:
    content: public bool SeparateImplementations { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property SeparateImplementations As Boolean
  overload: NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested
  id: OnlyNested
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: OnlyNested
  nameWithType: Meta2ClassesTransformation.OnlyNested
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnlyNested
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 257
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets or sets a value indicating whether only nested namespaces of an initial namespace should be in the code compile unit or all that are used\n"
  remarks: This value can only be set before the transformation is initialized
  example: []
  syntax:
    content: public bool OnlyNested { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property OnlyNested As Boolean
  overload: NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly
  id: GenerateForInputOnly
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: GenerateForInputOnly
  nameWithType: Meta2ClassesTransformation.GenerateForInputOnly
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GenerateForInputOnly
    path: src/Transformations/Models.MetaTransformation/Meta/Meta2ClassesTransformation.cs
    startLine: 273
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nIf set, the transformation only produces results for namespaces that have been explicitly been asked for\n"
  example: []
  syntax:
    content: public bool GenerateForInputOnly { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property GenerateForInputOnly As Boolean
  overload: NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration
  commentId: P:NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration
  id: ForceGeneration
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: ForceGeneration
  nameWithType: Meta2ClassesTransformation.ForceGeneration
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration
  type: Property
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Namespace2CompileUnit.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ForceGeneration
    path: src/Transformations/Models.MetaTransformation/Meta/Namespace2CompileUnit.cs
    startLine: 17
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets or sets a flag determing whether code should be generated regardless of existing code\n"
  example: []
  syntax:
    content: public bool ForceGeneration { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ForceGeneration As Boolean
  overload: NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit(NMF.Models.Meta.INamespace)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit(NMF.Models.Meta.INamespace)
  id: AddToCompileUnit(NMF.Models.Meta.INamespace)
  parent: NMF.Models.Meta.Meta2ClassesTransformation
  langs:
  - csharp
  - vb
  name: AddToCompileUnit(INamespace)
  nameWithType: Meta2ClassesTransformation.AddToCompileUnit(INamespace)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit(NMF.Models.Meta.INamespace)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Namespace2CompileUnit.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AddToCompileUnit
    path: src/Transformations/Models.MetaTransformation/Meta/Namespace2CompileUnit.cs
    startLine: 92
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets a value indicating whether the given namespace should be added to the compile unit\n"
  example: []
  syntax:
    content: protected virtual bool AddToCompileUnit(INamespace n)
    parameters:
    - id: n
      type: NMF.Models.Meta.INamespace
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Protected Overridable Function AddToCompileUnit(n As INamespace) As Boolean
  overload: NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  parent: NMF.Transformations.Core
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
- uid: NMF.Transformations.ReflectiveTransformation
  commentId: T:NMF.Transformations.ReflectiveTransformation
  parent: NMF.Transformations
  name: ReflectiveTransformation
  nameWithType: ReflectiveTransformation
  fullName: NMF.Transformations.ReflectiveTransformation
- uid: NMF.Transformations.ReflectiveTransformation.CreateRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: CreateRules()
  nameWithType: ReflectiveTransformation.CreateRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateRules
    name: CreateRules
    nameWithType: ReflectiveTransformation.CreateRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateRules
    name: CreateRules
    nameWithType: ReflectiveTransformation.CreateRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  commentId: M:NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  parent: NMF.Transformations.ReflectiveTransformation
  isExternal: true
  name: GetRuleForRuleType(Type)
  nameWithType: ReflectiveTransformation.GetRuleForRuleType(Type)
  fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
    nameWithType: ReflectiveTransformation.GetRuleForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
    nameWithType: ReflectiveTransformation.GetRuleForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRuleForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.Rule``1
  commentId: M:NMF.Transformations.ReflectiveTransformation.Rule``1
  parent: NMF.Transformations.ReflectiveTransformation
  name: Rule<TRule>()
  nameWithType: ReflectiveTransformation.Rule<TRule>()
  fullName: NMF.Transformations.ReflectiveTransformation.Rule<TRule>()
  nameWithType.vb: ReflectiveTransformation.Rule(Of TRule)()
  fullName.vb: NMF.Transformations.ReflectiveTransformation.Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.Rule``1
    name: Rule<TRule>
    nameWithType: ReflectiveTransformation.Rule<TRule>
    fullName: NMF.Transformations.ReflectiveTransformation.Rule<TRule>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.Rule``1
    name: Rule(Of TRule)
    nameWithType: ReflectiveTransformation.Rule(Of TRule)
    fullName: NMF.Transformations.ReflectiveTransformation.Rule(Of TRule)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  commentId: M:NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  parent: NMF.Transformations.ReflectiveTransformation
  isExternal: true
  name: GetRulesForRuleType(Type)
  nameWithType: ReflectiveTransformation.GetRulesForRuleType(Type)
  fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
    nameWithType: ReflectiveTransformation.GetRulesForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
    nameWithType: ReflectiveTransformation.GetRulesForRuleType
    fullName: NMF.Transformations.ReflectiveTransformation.GetRulesForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.RegisterRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.RegisterRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: RegisterRules()
  nameWithType: ReflectiveTransformation.RegisterRules()
  fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.RegisterRules
    name: RegisterRules
    nameWithType: ReflectiveTransformation.RegisterRules
    fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.RegisterRules
    name: RegisterRules
    nameWithType: ReflectiveTransformation.RegisterRules
    fullName: NMF.Transformations.ReflectiveTransformation.RegisterRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: CreateCustomRules()
  nameWithType: ReflectiveTransformation.CreateCustomRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
    name: CreateCustomRules
    nameWithType: ReflectiveTransformation.CreateCustomRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
    name: CreateCustomRules
    nameWithType: ReflectiveTransformation.CreateCustomRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateCustomRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  commentId: M:NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  parent: NMF.Transformations.ReflectiveTransformation
  name: CreateDefaultRules()
  nameWithType: ReflectiveTransformation.CreateDefaultRules()
  fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules()
  spec.csharp:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
    name: CreateDefaultRules
    nameWithType: ReflectiveTransformation.CreateDefaultRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
    name: CreateDefaultRules
    nameWithType: ReflectiveTransformation.CreateDefaultRules
    fullName: NMF.Transformations.ReflectiveTransformation.CreateDefaultRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Patterns
  commentId: P:NMF.Transformations.Core.Transformation.Patterns
  parent: NMF.Transformations.Core.Transformation
  name: Patterns
  nameWithType: Transformation.Patterns
  fullName: NMF.Transformations.Core.Transformation.Patterns
- uid: NMF.Transformations.Core.Transformation.IsInitialized
  commentId: P:NMF.Transformations.Core.Transformation.IsInitialized
  parent: NMF.Transformations.Core.Transformation
  name: IsInitialized
  nameWithType: Transformation.IsInitialized
  fullName: NMF.Transformations.Core.Transformation.IsInitialized
- uid: NMF.Transformations.Core.Transformation.IsRulesRegistered
  commentId: P:NMF.Transformations.Core.Transformation.IsRulesRegistered
  parent: NMF.Transformations.Core.Transformation
  name: IsRulesRegistered
  nameWithType: Transformation.IsRulesRegistered
  fullName: NMF.Transformations.Core.Transformation.IsRulesRegistered
- uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
  commentId: M:NMF.Transformations.Core.Transformation.CreateRulesInternal
  parent: NMF.Transformations.Core.Transformation
  name: CreateRulesInternal()
  nameWithType: Transformation.CreateRulesInternal()
  fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
    nameWithType: Transformation.CreateRulesInternal
    fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
    nameWithType: Transformation.CreateRulesInternal
    fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.CreateContext
  commentId: M:NMF.Transformations.Core.Transformation.CreateContext
  parent: NMF.Transformations.Core.Transformation
  name: CreateContext()
  nameWithType: Transformation.CreateContext()
  fullName: NMF.Transformations.Core.Transformation.CreateContext()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
    nameWithType: Transformation.CreateContext
    fullName: NMF.Transformations.Core.Transformation.CreateContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
    nameWithType: Transformation.CreateContext
    fullName: NMF.Transformations.Core.Transformation.CreateContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Initialize
  commentId: M:NMF.Transformations.Core.Transformation.Initialize
  parent: NMF.Transformations.Core.Transformation
  name: Initialize()
  nameWithType: Transformation.Initialize()
  fullName: NMF.Transformations.Core.Transformation.Initialize()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
    nameWithType: Transformation.Initialize
    fullName: NMF.Transformations.Core.Transformation.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
    nameWithType: Transformation.Initialize
    fullName: NMF.Transformations.Core.Transformation.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.MaxOutputDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxOutputDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxOutputDelay
  nameWithType: Transformation.MaxOutputDelay
  fullName: NMF.Transformations.Core.Transformation.MaxOutputDelay
- uid: NMF.Transformations.Core.Transformation.MaxTransformationDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxTransformationDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxTransformationDelay
  nameWithType: Transformation.MaxTransformationDelay
  fullName: NMF.Transformations.Core.Transformation.MaxTransformationDelay
- uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.Transformation
  name: ComputeInstantiatingTransformationRulePath(Computation)
  nameWithType: Transformation.ComputeInstantiatingTransformationRulePath(Computation)
  fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
    nameWithType: Transformation.ComputeInstantiatingTransformationRulePath
    fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
    nameWithType: Transformation.ComputeInstantiatingTransformationRulePath
    fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type)
  name.vb: GetRulesForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesExact(Type[], Type)
  nameWithType: Transformation.GetRulesExact(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesExact(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type(), System.Type)
  name.vb: GetRulesExact(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
    nameWithType: Transformation.GetRulesExact
    fullName: NMF.Transformations.Core.Transformation.GetRulesExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
    nameWithType: Transformation.GetRulesExact
    fullName: NMF.Transformations.Core.Transformation.GetRulesExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRuleForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRuleForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRuleForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type(), System.Type)
  name.vb: GetRuleForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
    nameWithType: Transformation.GetRuleForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
    nameWithType: Transformation.GetRuleForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForInputTypes(Type[])
  nameWithType: Transformation.GetRulesForInputTypes(Type[])
  fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  nameWithType.vb: Transformation.GetRulesForInputTypes(Type())
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type())
  name.vb: GetRulesForInputTypes(Type())
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
    nameWithType: Transformation.GetRulesForInputTypes
    fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
    nameWithType: Transformation.GetRulesForInputTypes
    fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Rules
  commentId: P:NMF.Transformations.Core.Transformation.Rules
  parent: NMF.Transformations.Core.Transformation
  name: Rules
  nameWithType: Transformation.Rules
  fullName: NMF.Transformations.Core.Transformation.Rules
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type, Boolean)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type, Boolean)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type, System.Boolean)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type, Boolean)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type, System.Boolean)
  name.vb: GetRulesForTypeSignature(Type(), Type, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
- uid: NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports
  name: DefaultSystemImports
  nameWithType: Meta2ClassesTransformation.DefaultSystemImports
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.DefaultSystemImports
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Models.Meta.Meta2ClassesTransformation.SystemImports*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.SystemImports
  name: SystemImports
  nameWithType: Meta2ClassesTransformation.SystemImports
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.SystemImports
- uid: NMF.Models.Meta.Meta2ClassesTransformation.CreateReference*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.CreateReference
  name: CreateReference
  nameWithType: Meta2ClassesTransformation.CreateReference
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.CreateReference
- uid: NMF.Models.Meta.IType
  commentId: T:NMF.Models.Meta.IType
  parent: NMF.Models.Meta
  name: IType
  nameWithType: IType
  fullName: NMF.Models.Meta.IType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: System.CodeDom.CodeTypeReference
  commentId: T:System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
- uid: NMF.Models.Meta.Meta2ClassesTransformation.IsValueType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.IsValueType
  name: IsValueType
  nameWithType: Meta2ClassesTransformation.IsValueType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.IsValueType
- uid: NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey
  name: GetResourceKey
  nameWithType: Meta2ClassesTransformation.GetResourceKey
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.GetResourceKey
- uid: NMF.Models.Model
  commentId: T:NMF.Models.Model
  parent: NMF.Models
  name: Model
  nameWithType: Model
  fullName: NMF.Models.Model
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Models
  commentId: N:NMF.Models
  name: NMF.Models
  nameWithType: NMF.Models
  fullName: NMF.Models
- uid: NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace
  name: DefaultNamespace
  nameWithType: Meta2ClassesTransformation.DefaultNamespace
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.DefaultNamespace
- uid: NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap
  name: NamespaceMap
  nameWithType: Meta2ClassesTransformation.NamespaceMap
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.NamespaceMap
- uid: System.Collections.Generic.Dictionary{System.Uri,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.Uri,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Uri, String>
  nameWithType: Dictionary<Uri, String>
  fullName: System.Collections.Generic.Dictionary<System.Uri, System.String>
  nameWithType.vb: Dictionary(Of Uri, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Uri, System.String)
  name.vb: Dictionary(Of Uri, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations
  name: SeparateImplementations
  nameWithType: Meta2ClassesTransformation.SeparateImplementations
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.SeparateImplementations
- uid: NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested
  name: OnlyNested
  nameWithType: Meta2ClassesTransformation.OnlyNested
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.OnlyNested
- uid: NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly
  name: GenerateForInputOnly
  nameWithType: Meta2ClassesTransformation.GenerateForInputOnly
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.GenerateForInputOnly
- uid: NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration
  name: ForceGeneration
  nameWithType: Meta2ClassesTransformation.ForceGeneration
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.ForceGeneration
- uid: NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit
  name: AddToCompileUnit
  nameWithType: Meta2ClassesTransformation.AddToCompileUnit
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.AddToCompileUnit
- uid: NMF.Models.Meta.INamespace
  commentId: T:NMF.Models.Meta.INamespace
  parent: NMF.Models.Meta
  name: INamespace
  nameWithType: INamespace
  fullName: NMF.Models.Meta.INamespace
