### YamlMime:ManagedReference
items:
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event
  commentId: T:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event
  id: Meta2ClassesTransformation.Event2Event
  parent: NMF.Models.Meta
  children:
  - NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  - NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName(NMF.Models.Meta.IEvent)
  - NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies
  - NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  langs:
  - csharp
  - vb
  name: Meta2ClassesTransformation.Event2Event
  nameWithType: Meta2ClassesTransformation.Event2Event
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event
  type: Class
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Event2Event.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Event2Event
    path: src/Transformations/Models.MetaTransformation/Meta/Event2Event.cs
    startLine: 18
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nThe transformation rule to transform NMeta events to code events\n"
  example: []
  syntax:
    content: 'public class Meta2ClassesTransformation.Event2Event : EventGenerator<IEvent>'
    content.vb: Public Class Meta2ClassesTransformation.Event2Event Inherits EventGenerator(Of IEvent)
  inheritance:
  - System.Object
  - NMF.Transformations.Core.GeneralTransformationRule
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  - NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}
  inheritedMembers:
  - NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.NeedDependenciesForOutputCreation
  - NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Predicate{NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``3(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``3(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput2}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.OutputType
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``2(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},NMF.Transformations.Core.Computation)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},NMF.Transformations.Core.Computation)
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TKey}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TKey}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceInput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceOutput}})
  - NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceOutput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Rule``1
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``1(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.InputType
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(System.Func{NMF.Models.Meta.IEvent,{TKey}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},NMF.Models.Meta.IEvent},System.Func{NMF.Models.Meta.IEvent,{TKey}})
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  - NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.ToString
  - NMF.Transformations.Core.GeneralTransformationRule.OutputType
  - NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  - NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  - NMF.Transformations.Core.GeneralTransformationRule.Transformation
  - NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  - NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  - NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  - NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  - NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  - NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  id: GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event
  langs:
  - csharp
  - vb
  name: GetEventArgsType(IEvent, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.Event2Event.GetEventArgsType(IEvent, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType(NMF.Models.Meta.IEvent, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Event2Event.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEventArgsType
    path: src/Transformations/Models.MetaTransformation/Meta/Event2Event.cs
    startLine: 26
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets the type reference to the event args class\n"
  example: []
  syntax:
    content: protected override CodeTypeReference GetEventArgsType(IEvent input, ITransformationContext context)
    parameters:
    - id: input
      type: NMF.Models.Meta.IEvent
      description: The NMeta event
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context
    return:
      type: System.CodeDom.CodeTypeReference
      description: A code type reference to the event args
    content.vb: Protected Overrides Function GetEventArgsType(input As IEvent, context As ITransformationContext) As CodeTypeReference
  overridden: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  id: Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event
  langs:
  - csharp
  - vb
  name: Transform(IEvent, CodeMemberEvent, ITransformationContext)
  nameWithType: Meta2ClassesTransformation.Event2Event.Transform(IEvent, CodeMemberEvent, ITransformationContext)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform(NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, NMF.Transformations.Core.ITransformationContext)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Event2Event.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transform
    path: src/Transformations/Models.MetaTransformation/Meta/Event2Event.cs
    startLine: 40
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nInitializes the output event\n"
  example: []
  syntax:
    content: public override void Transform(IEvent input, CodeMemberEvent output, ITransformationContext context)
    parameters:
    - id: input
      type: NMF.Models.Meta.IEvent
    - id: output
      type: System.CodeDom.CodeMemberEvent
      description: The output model element
    - id: context
      type: NMF.Transformations.Core.ITransformationContext
      description: The transformation context
    content.vb: Public Overrides Sub Transform(input As IEvent, output As CodeMemberEvent, context As ITransformationContext)
  overridden: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName(NMF.Models.Meta.IEvent)
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName(NMF.Models.Meta.IEvent)
  id: GetName(NMF.Models.Meta.IEvent)
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event
  langs:
  - csharp
  - vb
  name: GetName(IEvent)
  nameWithType: Meta2ClassesTransformation.Event2Event.GetName(IEvent)
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName(NMF.Models.Meta.IEvent)
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Event2Event.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetName
    path: src/Transformations/Models.MetaTransformation/Meta/Event2Event.cs
    startLine: 51
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nGets the name of the generated event\n"
  example: []
  syntax:
    content: protected override string GetName(IEvent input)
    parameters:
    - id: input
      type: NMF.Models.Meta.IEvent
      description: The NMeta event
    return:
      type: System.String
      description: The name of the generated event
    content.vb: Protected Overrides Function GetName(input As IEvent) As String
  overridden: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetName(NMF.Models.Meta.IEvent)
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName*
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies
  commentId: M:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies
  id: RegisterDependencies
  parent: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event
  langs:
  - csharp
  - vb
  name: RegisterDependencies()
  nameWithType: Meta2ClassesTransformation.Event2Event.RegisterDependencies()
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies()
  type: Method
  source:
    remote:
      path: Transformations/Models.MetaTransformation/Meta/Event2Event.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterDependencies
    path: src/Transformations/Models.MetaTransformation/Meta/Event2Event.cs
    startLine: 59
  assemblies:
  - NMF.Models.MetaTransformation
  namespace: NMF.Models.Meta
  summary: "\nRegisters the dependencies, i.e. requires the \n"
  example: []
  syntax:
    content: public override void RegisterDependencies()
    content.vb: Public Overrides Sub RegisterDependencies()
  overridden: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  overload: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies*
references:
- uid: NMF.Models.Meta
  commentId: N:NMF.Models.Meta
  name: NMF.Models.Meta
  nameWithType: NMF.Models.Meta
  fullName: NMF.Models.Meta
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Models
    name: Models
  - name: .
  - uid: NMF.Models.Meta
    name: Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  commentId: T:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  parent: NMF.Transformations
  definition: NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<IEvent>
  nameWithType: GeneralTransformationRule<IEvent>
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>
  nameWithType.vb: GeneralTransformationRule(Of IEvent)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent)
  name.vb: GeneralTransformationRule(Of IEvent)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  commentId: T:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<IEvent, CodeMemberEvent>
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent)
  name.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  commentId: T:NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  parent: NMF.Transformations
  definition: NMF.Transformations.TransformationRule`2
  name: TransformationRule<IEvent, CodeMemberEvent>
  nameWithType: TransformationRule<IEvent, CodeMemberEvent>
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>
  nameWithType.vb: TransformationRule(Of IEvent, CodeMemberEvent)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent)
  name.vb: TransformationRule(Of IEvent, CodeMemberEvent)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
- uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}
  commentId: T:NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}
  parent: NMF.CodeGen
  definition: NMF.CodeGen.EventGenerator`1
  name: EventGenerator<IEvent>
  nameWithType: EventGenerator<IEvent>
  fullName: NMF.CodeGen.EventGenerator<NMF.Models.Meta.IEvent>
  nameWithType.vb: EventGenerator(Of IEvent)
  fullName.vb: NMF.CodeGen.EventGenerator(Of NMF.Models.Meta.IEvent)
  name.vb: EventGenerator(Of IEvent)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator`1
    name: EventGenerator
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator`1
    name: EventGenerator
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
- uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}
  definition: NMF.CodeGen.EventGenerator`1.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(IEvent, ITransformationContext)
  nameWithType: EventGenerator<IEvent>.CreateOutput(IEvent, ITransformationContext)
  fullName: NMF.CodeGen.EventGenerator<NMF.Models.Meta.IEvent>.CreateOutput(NMF.Models.Meta.IEvent, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: EventGenerator(Of IEvent).CreateOutput(IEvent, ITransformationContext)
  fullName.vb: NMF.CodeGen.EventGenerator(Of NMF.Models.Meta.IEvent).CreateOutput(NMF.Models.Meta.IEvent, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  name: CreateComputation(object[], IComputationContext)
  nameWithType: TransformationRule<IEvent, CodeMemberEvent>.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of IEvent, CodeMemberEvent).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(IEvent, ITransformationContext)
  nameWithType: TransformationRule<IEvent, CodeMemberEvent>.CreateOutput(IEvent, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CreateOutput(NMF.Models.Meta.IEvent, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IEvent, CodeMemberEvent).CreateOutput(IEvent, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CreateOutput(NMF.Models.Meta.IEvent, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CreateOutput(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<IEvent, CodeMemberEvent>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of IEvent, CodeMemberEvent).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: Transform(IEvent, CodeMemberEvent, ITransformationContext)
  nameWithType: TransformationRule<IEvent, CodeMemberEvent>.Transform(IEvent, CodeMemberEvent, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Transform(NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of IEvent, CodeMemberEvent).Transform(IEvent, CodeMemberEvent, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Transform(NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<IEvent>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<IEvent>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.MarkInstantiatingFor<TBaseIn, TBaseOut>(System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IEvent})
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.MarkInstantiatingFor``2(System.Predicate{NMF.Models.Meta.IEvent})
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.RequireByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.RequireByType<TRequiredInput, TRequiredOutput>(System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Predicate{NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Predicate<NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Predicate(Of NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.RequireByType<TRequiredInput, TRequiredOutput>(Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``3(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``3(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``3(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireByType``3(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallByType<TRequiredInput, TRequiredOutput>(Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallByType<TRequiredInput, TRequiredOutput>(System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallByType<TRequiredInput, TRequiredOutput>(Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``3(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``3(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``3(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallByType``3(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, TRequiredInput>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, TRequiredInput), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyByType``3(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<IEvent, IEnumerable<TRequiredInput>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of IEvent, IEnumerable(Of TRequiredInput)), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredOutput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<CodeMemberEvent, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of CodeMemberEvent, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, TRequiredInput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, TRequiredInput>, Func<IEvent, CodeMemberEvent, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, TRequiredInput>, Func<IEvent, CodeMemberEvent, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, TRequiredInput), Func(Of IEvent, CodeMemberEvent, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, TRequiredInput), Func(Of IEvent, CodeMemberEvent, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput2}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, TRequiredInput1>, Func<IEvent, CodeMemberEvent, TRequiredInput2>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, TRequiredInput1>, Func<IEvent, CodeMemberEvent, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, TRequiredInput1), Func(Of IEvent, CodeMemberEvent, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, TRequiredInput1), Func(Of IEvent, CodeMemberEvent, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, TRequiredInput1>, Func<IEvent, CodeMemberEvent, TRequiredInput2>, Func<IEvent, CodeMemberEvent, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, TRequiredInput1>, Func<IEvent, CodeMemberEvent, TRequiredInput2>, Func<IEvent, CodeMemberEvent, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, TRequiredInput1), Func(Of IEvent, CodeMemberEvent, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, TRequiredInput1), Func(Of IEvent, CodeMemberEvent, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  name: CallOutputSensitive(GeneralTransformationRule<IEvent, CodeMemberEvent>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallOutputSensitive(GeneralTransformationRule<IEvent, CodeMemberEvent>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallOutputSensitive(GeneralTransformationRule(Of IEvent, CodeMemberEvent))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of IEvent, CodeMemberEvent))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  name: CallOutputSensitive(GeneralTransformationRule<IEvent, CodeMemberEvent>, Func<IEvent, CodeMemberEvent, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallOutputSensitive(GeneralTransformationRule<IEvent, CodeMemberEvent>, Func<IEvent, CodeMemberEvent, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallOutputSensitive(GeneralTransformationRule(Of IEvent, CodeMemberEvent), Func(Of IEvent, CodeMemberEvent, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, Boolean))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of IEvent, CodeMemberEvent), Func(Of IEvent, CodeMemberEvent, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, IEnumerable<TRequiredInput>>, Func<IEvent, CodeMemberEvent, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, CodeMemberEvent, IEnumerable<TRequiredInput>>, Func<IEvent, CodeMemberEvent, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of TRequiredInput)), Func(Of IEvent, CodeMemberEvent, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of TRequiredInput)), Func(Of IEvent, CodeMemberEvent, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IEvent, CodeMemberEvent, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, CodeMemberEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<IEvent, CodeMemberEvent, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IEvent, CodeMemberEvent, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, CodeMemberEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of IEvent, CodeMemberEvent, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1},System.Predicate{``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1},System.Predicate{``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEvent>, Action<CodeMemberEvent, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>, System.Action<System.CodeDom.CodeMemberEvent, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent), System.Action(Of System.CodeDom.CodeMemberEvent, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEvent), Action(Of CodeMemberEvent, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Action{System.CodeDom.CodeMemberEvent,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean},System.Action{{TRequiredOutput},System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<CodeMemberEvent>>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<System.CodeDom.CodeMemberEvent>>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of System.CodeDom.CodeMemberEvent)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of CodeMemberEvent)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{System.CodeDom.CodeMemberEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.OutputType
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.OutputType
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).OutputType
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``2(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``2(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  name: SelectArrays<TRequiredInput1, TRequiredInput2>(Func<IEvent, CodeMemberEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.SelectArrays<TRequiredInput1, TRequiredInput2>(Func<IEvent, CodeMemberEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.SelectArrays<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, CodeMemberEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).SelectArrays(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, CodeMemberEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``2(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``2(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  name: SelectArrays<TRequiredInput>(Func<IEvent, CodeMemberEvent, IEnumerable<TRequiredInput>>, Computation)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.SelectArrays<TRequiredInput>(Func<IEvent, CodeMemberEvent, IEnumerable<TRequiredInput>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.SelectArrays<TRequiredInput>(System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).SelectArrays(Of TRequiredInput)(Func(Of IEvent, CodeMemberEvent, IEnumerable(Of TRequiredInput)), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).SelectArrays(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput)(Func(Of IEvent, CodeMemberEvent, IEnumerable(Of TRequiredInput)), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.SelectArrays``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  name: TraceOutput<TKey>(Func<IEvent, CodeMemberEvent, TKey>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.TraceOutput<TKey>(Func<IEvent, CodeMemberEvent, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.TraceOutput<TKey>(System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).TraceOutput(Of TKey)(Func(Of IEvent, CodeMemberEvent, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).TraceOutput(Of TKey)(System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of IEvent, CodeMemberEvent, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{{TKey},System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TKey}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, CodeMemberEvent>, Func<IEvent, CodeMemberEvent, TKey>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.TraceOutput<TKey>(TraceEntryGroup<TKey, CodeMemberEvent>, Func<IEvent, CodeMemberEvent, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, System.CodeDom.CodeMemberEvent>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TKey>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeMemberEvent), Func(Of IEvent, CodeMemberEvent, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, System.CodeDom.CodeMemberEvent), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, CodeMemberEvent), Func(Of IEvent, CodeMemberEvent, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,System.CodeDom.CodeMemberEvent},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceInput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IEvent, CodeMemberEvent, TTraceInput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IEvent, CodeMemberEvent, TTraceInput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceInput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IEvent, CodeMemberEvent, TTraceInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceInput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IEvent, CodeMemberEvent, TTraceInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IEvent, CodeMemberEvent, TTraceOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IEvent, CodeMemberEvent, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IEvent, CodeMemberEvent, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IEvent, CodeMemberEvent, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{{TTraceInput},{TTraceOutput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceInput}},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,{TTraceOutput}})
  commentId: M:NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
  parent: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}
  definition: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IEvent, CodeMemberEvent, TTraceInput>, Func<IEvent, CodeMemberEvent, TTraceOutput>)
  nameWithType: TransformationRuleBase<IEvent, CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<IEvent, CodeMemberEvent, TTraceInput>, Func<IEvent, CodeMemberEvent, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceInput>, System.Func<NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of IEvent, CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IEvent, CodeMemberEvent, TTraceInput), Func(Of IEvent, CodeMemberEvent, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceInput), System.Func(Of NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of IEvent, CodeMemberEvent, TTraceInput), Func(Of IEvent, CodeMemberEvent, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent}.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``0},System.Func{NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IEvent})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Models.Meta.IEvent})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Rule``1
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<IEvent>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.WithPattern(ITransformationRulePattern<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.WithPattern(NMF.Transformations.ITransformationRulePattern<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).WithPattern(ITransformationRulePattern(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).WithPattern(NMF.Transformations.ITransformationRulePattern(Of NMF.Models.Meta.IEvent))
  name.vb: WithPattern(ITransformationRulePattern(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IEvent})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(NMF.Transformations.ITransformationRulePattern{NMF.Models.Meta.IEvent})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.WithPattern(Func<ITransformationContext, INotifyEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IEvent}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{NMF.Models.Meta.IEvent}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  name: WithPattern(Func<ITransformationContext, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.WithPattern(Func<ITransformationContext, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).WithPattern(Func(Of ITransformationContext, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<IEvent>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1(System.Func{NMF.Models.Meta.IEvent,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  name: RequireByType<TRequiredInput>(Func<IEvent, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.RequireByType<TRequiredInput>(Func<IEvent, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireByType<TRequiredInput>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireByType(Of TRequiredInput)(Func(Of IEvent, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of IEvent, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1(System.Func{NMF.Models.Meta.IEvent,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``1(System.Func{NMF.Models.Meta.IEvent,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IEvent>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IEvent>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireManyByType<TRequiredInput>(Func<IEvent, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IEvent>.RequireManyByType<TRequiredInput>(Func<IEvent, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireManyByType(Of TRequiredInput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IEvent>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Require(GeneralTransformationRule, Func<IEvent, object[]>)
  nameWithType: GeneralTransformationRule<IEvent>.Require(GeneralTransformationRule, Func<IEvent, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IEvent, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Require(GeneralTransformationRule, Func(Of IEvent, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IEvent, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of IEvent, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0},System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>, Predicate<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>, Predicate<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput>, System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput), Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput), System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput), Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Predicate<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Predicate<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>, System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2), System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Predicate{NMF.Models.Meta.IEvent})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Predicate{NMF.Models.Meta.IEvent})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: RequireMany(GeneralTransformationRule, Func<IEvent, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<IEvent>.RequireMany(GeneralTransformationRule, Func<IEvent, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireMany(GeneralTransformationRule, Func(Of IEvent, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of IEvent, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IEvent>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IEvent>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  name: Call(GeneralTransformationRule, Func<IEvent, object[]>)
  nameWithType: GeneralTransformationRule<IEvent>.Call(GeneralTransformationRule, Func<IEvent, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IEvent, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Call(GeneralTransformationRule, Func(Of IEvent, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IEvent, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of IEvent, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  name: CallMany(GeneralTransformationRule, Func<IEvent, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallMany(GeneralTransformationRule, Func<IEvent, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallMany(GeneralTransformationRule, Func(Of IEvent, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of IEvent, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``1(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``1(System.Func{NMF.Models.Meta.IEvent,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  name: CallByType<TRequiredInput>(Func<IEvent, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.CallByType<TRequiredInput>(Func<IEvent, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallByType<TRequiredInput>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallByType(Of TRequiredInput)(Func(Of IEvent, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of IEvent, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``1(System.Func{NMF.Models.Meta.IEvent,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``1(System.Func{NMF.Models.Meta.IEvent,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IEvent>.CallByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallByType``2(System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<IEvent>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput}},System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0},System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>, Predicate<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, TRequiredInput>, Predicate<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput>, System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput), Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput), System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, TRequiredInput), Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,``0},System.Predicate{NMF.Models.Meta.IEvent})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput1}},System.Func{NMF.Models.Meta.IEvent,{TRequiredInput2}},System.Predicate{NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Predicate{NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Predicate<IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, TRequiredInput1>, Func<IEvent, TRequiredInput2>, Predicate<IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput1>, System.Func<NMF.Models.Meta.IEvent, TRequiredInput2>, System.Predicate<NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Predicate(Of IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput1), System.Func(Of NMF.Models.Meta.IEvent, TRequiredInput2), System.Predicate(Of NMF.Models.Meta.IEvent))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, TRequiredInput1), Func(Of IEvent, TRequiredInput2), Predicate(Of IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Predicate{NMF.Models.Meta.IEvent})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,``0},System.Func{NMF.Models.Meta.IEvent,``1},System.Predicate{NMF.Models.Meta.IEvent})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallManyByType<TRequiredInput>(Func<IEvent, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallManyByType<TRequiredInput>(Func<IEvent, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallManyByType<TRequiredInput>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallManyByType(Of TRequiredInput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallManyByType(Of TRequiredInput)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``1(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallManyByType``2(System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{{TRequiredInput}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<IEvent, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of IEvent, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{{TRequiredInput1},{TRequiredInput2}}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<IEvent, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of NMF.Models.Meta.IEvent, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of IEvent, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{NMF.Models.Meta.IEvent,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.InputType
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<IEvent>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.InputType
  nameWithType.vb: GeneralTransformationRule(Of IEvent).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).InputType
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{``0,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput>(Func<TRequiredInput, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{``0,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{``0,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{``0,NMF.Models.Meta.IEvent},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(Func<TRequiredInput, IEvent>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput>(Func<TRequiredInput, IEvent>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput>(System.Func<TRequiredInput, NMF.Models.Meta.IEvent>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IEvent), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, IEvent), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{``0,NMF.Models.Meta.IEvent},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(System.Func{``0,NMF.Models.Meta.IEvent},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEvent>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEvent>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEvent), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEvent), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},NMF.Models.Meta.IEvent},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IEvent},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEvent>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEvent>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, NMF.Models.Meta.IEvent>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEvent), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, NMF.Models.Meta.IEvent), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEvent), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IEvent},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,NMF.Models.Meta.IEvent},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEvent>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEvent>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEvent), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, NMF.Models.Meta.IEvent), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEvent), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{{TRequiredInput}},System.Func{{TRequiredInput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{{TRequiredInput}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<IEvent>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of IEvent)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{{TRequiredInput1},{TRequiredInput2}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IEvent})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IEvent})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEvent>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEvent>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEvent), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEvent), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IEvent},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IEvent},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(System.Func{``0,``1,``2,NMF.Models.Meta.IEvent},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEvent>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEvent>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEvent), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, NMF.Models.Meta.IEvent), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEvent), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,NMF.Models.Meta.IEvent},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},NMF.Models.Meta.IEvent},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IEvent},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, NMF.Models.Meta.IEvent), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEvent), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IEvent},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,NMF.Models.Meta.IEvent},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{{TRequiredInput},{TRequiredOutput}},System.Func{{TRequiredInput},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{{TRequiredInput1},{TRequiredInput2},{TRequiredOutput},System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,``2,System.Boolean})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<IEvent>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of IEvent)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(System.Func{NMF.Models.Meta.IEvent,{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(System.Func{NMF.Models.Meta.IEvent,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  name: TraceInput<TKey>(Func<IEvent, TKey>)
  nameWithType: GeneralTransformationRule<IEvent>.TraceInput<TKey>(Func<IEvent, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.TraceInput<TKey>(System.Func<NMF.Models.Meta.IEvent, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).TraceInput(Of TKey)(Func(Of IEvent, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).TraceInput(Of TKey)(System.Func(Of NMF.Models.Meta.IEvent, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of IEvent, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(System.Func{NMF.Models.Meta.IEvent,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(System.Func{NMF.Models.Meta.IEvent,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(NMF.Transformations.TraceEntryGroup{{TKey},NMF.Models.Meta.IEvent},System.Func{NMF.Models.Meta.IEvent,{TKey}})
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,NMF.Models.Meta.IEvent},System.Func{NMF.Models.Meta.IEvent,``0})
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  name: TraceInput<TKey>(TraceEntryGroup<TKey, IEvent>, Func<IEvent, TKey>)
  nameWithType: GeneralTransformationRule<IEvent>.TraceInput<TKey>(TraceEntryGroup<TKey, IEvent>, Func<IEvent, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, NMF.Models.Meta.IEvent>, System.Func<NMF.Models.Meta.IEvent, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, IEvent), Func(Of IEvent, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, NMF.Models.Meta.IEvent), System.Func(Of NMF.Models.Meta.IEvent, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, IEvent), Func(Of IEvent, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,NMF.Models.Meta.IEvent},System.Func{NMF.Models.Meta.IEvent,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,NMF.Models.Meta.IEvent},System.Func{NMF.Models.Meta.IEvent,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, IEvent>, bool)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor(GeneralTransformationRule, Func<Computation, IEvent>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, NMF.Models.Meta.IEvent>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(GeneralTransformationRule, Func(Of Computation, IEvent), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, NMF.Models.Meta.IEvent), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, IEvent), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallFor(GeneralTransformationRule, Func<Computation, IEvent>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<IEvent>.CallFor(GeneralTransformationRule, Func<Computation, IEvent>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, NMF.Models.Meta.IEvent>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallFor(GeneralTransformationRule, Func(Of Computation, IEvent), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, NMF.Models.Meta.IEvent), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, IEvent), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,NMF.Models.Meta.IEvent},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IEvent>>, bool)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IEvent>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IEvent)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IEvent)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IEvent>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<IEvent>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<IEvent>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<NMF.Models.Meta.IEvent>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of IEvent).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IEvent)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of NMF.Models.Meta.IEvent)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of IEvent)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{NMF.Models.Meta.IEvent}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.ToString
  parent: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}
  definition: NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<IEvent>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<NMF.Models.Meta.IEvent>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of IEvent).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of NMF.Models.Meta.IEvent).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule{NMF.Models.Meta.IEvent}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputType
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputType
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputType
  nameWithType: GeneralTransformationRule.OutputType
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputType
- uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: CreateComputation(object[], IComputationContext)
  nameWithType: GeneralTransformationRule.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: GeneralTransformationRule.CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: NeedDependenciesForOutputCreation
  nameWithType: GeneralTransformationRule.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.NeedDependenciesForOutputCreation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Transformation
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Transformation
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Transformation
  nameWithType: GeneralTransformationRule.Transformation
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Transformation
- uid: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.Dependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Dependencies
  nameWithType: GeneralTransformationRule.Dependencies
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Dependencies
- uid: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: OutputDelayLevel
  nameWithType: GeneralTransformationRule.OutputDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.OutputDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: TransformationDelayLevel
  nameWithType: GeneralTransformationRule.TransformationDelayLevel
  fullName: NMF.Transformations.Core.GeneralTransformationRule.TransformationDelayLevel
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.IsUnique
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsUnique
  nameWithType: GeneralTransformationRule.IsUnique
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsUnique
- uid: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  commentId: P:NMF.Transformations.Core.GeneralTransformationRule.BaseRule
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: BaseRule
  nameWithType: GeneralTransformationRule.BaseRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule.BaseRule
- uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: IsInstantiating(Computation)
  nameWithType: GeneralTransformationRule.IsInstantiating(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.IsInstantiating(NMF.Transformations.Core.Computation)
    name: IsInstantiating
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: HasCompliantInput(Computation)
  nameWithType: GeneralTransformationRule.HasCompliantInput(Computation)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.HasCompliantInput(NMF.Transformations.Core.Computation)
    name: HasCompliantInput
  - name: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Require(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Require(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Require(NMF.Transformations.Core.GeneralTransformationRule)
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: Call(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.Call(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.Call(NMF.Transformations.Core.GeneralTransformationRule)
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: MarkInstantiatingFor(GeneralTransformationRule)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule)
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
  parent: NMF.Transformations.Core.GeneralTransformationRule
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  nameWithType: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate<Computation>)
  fullName: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<NMF.Transformations.Core.Computation>)
  nameWithType.vb: GeneralTransformationRule.MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  fullName.vb: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of NMF.Transformations.Core.Computation))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of Computation))
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{NMF.Transformations.Core.Computation})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  - name: .
  - uid: NMF.Transformations.Core
    name: Core
- uid: NMF.Transformations.GeneralTransformationRule`1
  commentId: T:NMF.Transformations.GeneralTransformationRule`1
  name: GeneralTransformationRule<TIn>
  nameWithType: GeneralTransformationRule<TIn>
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>
  nameWithType.vb: GeneralTransformationRule(Of TIn)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn)
  name.vb: GeneralTransformationRule(Of TIn)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
- uid: NMF.Transformations
  commentId: N:NMF.Transformations
  name: NMF.Transformations
  nameWithType: NMF.Transformations
  fullName: NMF.Transformations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Transformations
    name: Transformations
- uid: NMF.Transformations.TransformationRuleBase`2
  commentId: T:NMF.Transformations.TransformationRuleBase`2
  name: TransformationRuleBase<TIn, TOut>
  nameWithType: TransformationRuleBase<TIn, TOut>
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut)
  name.vb: TransformationRuleBase(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Transformations.TransformationRule`2
  commentId: T:NMF.Transformations.TransformationRule`2
  name: TransformationRule<TIn, TOut>
  nameWithType: TransformationRule<TIn, TOut>
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>
  nameWithType.vb: TransformationRule(Of TIn, TOut)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut)
  name.vb: TransformationRule(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2
    name: TransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.CodeGen.EventGenerator`1
  commentId: T:NMF.CodeGen.EventGenerator`1
  name: EventGenerator<T>
  nameWithType: EventGenerator<T>
  fullName: NMF.CodeGen.EventGenerator<T>
  nameWithType.vb: EventGenerator(Of T)
  fullName.vb: NMF.CodeGen.EventGenerator(Of T)
  name.vb: EventGenerator(Of T)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator`1
    name: EventGenerator
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator`1
    name: EventGenerator
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.CodeGen
  commentId: N:NMF.CodeGen
  name: NMF.CodeGen
  nameWithType: NMF.CodeGen
  fullName: NMF.CodeGen
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.CodeGen
    name: CodeGen
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.CodeGen
    name: CodeGen
- uid: NMF.CodeGen.EventGenerator`1.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.CodeGen.EventGenerator`1.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(T, ITransformationContext)
  nameWithType: EventGenerator<T>.CreateOutput(T, ITransformationContext)
  fullName: NMF.CodeGen.EventGenerator<T>.CreateOutput(T, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: EventGenerator(Of T).CreateOutput(T, ITransformationContext)
  fullName.vb: NMF.CodeGen.EventGenerator(Of T).CreateOutput(T, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator`1.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator`1.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
  isExternal: true
  name: CreateComputation(object[], IComputationContext)
  nameWithType: TransformationRule<TIn, TOut>.CreateComputation(object[], IComputationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateComputation(object[], NMF.Transformations.Core.IComputationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).CreateComputation(Object(), IComputationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateComputation(Object(), NMF.Transformations.Core.IComputationContext)
  name.vb: CreateComputation(Object(), IComputationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateComputation(System.Object[],NMF.Transformations.Core.IComputationContext)
    name: CreateComputation
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.IComputationContext
    name: IComputationContext
  - name: )
- uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
  name: CreateOutput(TIn, ITransformationContext)
  nameWithType: TransformationRule<TIn, TOut>.CreateOutput(TIn, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.CreateOutput(TIn, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).CreateOutput(TIn, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).CreateOutput(TIn, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.CreateOutput(`0,NMF.Transformations.Core.ITransformationContext)
    name: CreateOutput
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  commentId: P:NMF.Transformations.TransformationRule`2.NeedDependenciesForOutputCreation
  name: NeedDependenciesForOutputCreation
  nameWithType: TransformationRule<TIn, TOut>.NeedDependenciesForOutputCreation
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.NeedDependenciesForOutputCreation
  nameWithType.vb: TransformationRule(Of TIn, TOut).NeedDependenciesForOutputCreation
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).NeedDependenciesForOutputCreation
- uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
  name: Transform(TIn, TOut, ITransformationContext)
  nameWithType: TransformationRule<TIn, TOut>.Transform(TIn, TOut, ITransformationContext)
  fullName: NMF.Transformations.TransformationRule<TIn, TOut>.Transform(TIn, TOut, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: TransformationRule(Of TIn, TOut).Transform(TIn, TOut, ITransformationContext)
  fullName.vb: NMF.Transformations.TransformationRule(Of TIn, TOut).Transform(TIn, TOut, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRule`2.Transform(`0,`1,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  commentId: M:NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>()
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)()
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
  isExternal: true
  name: MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<TIn>)
  nameWithType: TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>(Predicate<TIn>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.MarkInstantiatingFor<TBaseIn, TBaseOut>(System.Predicate<TIn>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of TIn))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).MarkInstantiatingFor(Of TBaseIn, TBaseOut)(System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(Of TBaseIn, TBaseOut)(Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: <
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: '>'
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.MarkInstantiatingFor``2(System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - name: Of
  - name: " "
  - name: TBaseIn
  - name: ','
  - name: " "
  - name: TBaseOut
  - name: )
  - name: (
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Action{`1,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Predicate<TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Predicate<TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Predicate(Of TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Predicate(Of TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Predicate{`0},System.Action{`1,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Require<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Require``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.RequireMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.RequireMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Action{`1,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Action{`1,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: CallByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``2(System.Func{`0,``0},System.Action{`1,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallByType``3(System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
  isExternal: true
  name: Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, TRequiredInput>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, TRequiredInput>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, TRequiredInput), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, TRequiredInput), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,``0},System.Action{`1,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.Call<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Action(Of TOut, TRequiredOutput))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.Call``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,``0},System.Func{`0,``1},System.Action{`1,``2})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput, TRequiredOutput)(Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyByType<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyByType``3(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TIn, IEnumerable<TRequiredInput>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TIn, IEnumerable(Of TRequiredInput)), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{`1,System.Collections.Generic.IEnumerable{``1}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Action<TOut, IEnumerable<TRequiredOutput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallMany<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Action<TOut, System.Collections.Generic.IEnumerable<TRequiredOutput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Action(Of TOut, System.Collections.Generic.IEnumerable(Of TRequiredOutput)))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Action(Of TOut, IEnumerable(Of TRequiredOutput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallMany``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Action{`1,System.Collections.Generic.IEnumerable{``2}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, TRequiredInput))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, TRequiredInput>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, TRequiredInput>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, TRequiredInput), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, TRequiredInput), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, TRequiredInput1>, System.Func<TIn, TOut, TRequiredInput2>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, TRequiredInput1), System.Func(Of TIn, TOut, TRequiredInput2))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, TRequiredInput1>, Func<TIn, TOut, TRequiredInput2>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, TRequiredInput1>, System.Func<TIn, TOut, TRequiredInput2>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, TRequiredInput1), System.Func(Of TIn, TOut, TRequiredInput2), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, TRequiredInput1), Func(Of TIn, TOut, TRequiredInput2), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
  name: CallOutputSensitive(GeneralTransformationRule<TIn, TOut>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive(GeneralTransformationRule<TIn, TOut>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<TIn, TOut>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of TIn, TOut))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallOutputSensitive(GeneralTransformationRule<TIn, TOut>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallOutputSensitive(GeneralTransformationRule<TIn, TOut>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule<TIn, TOut>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallOutputSensitive(NMF.Transformations.GeneralTransformationRule(Of TIn, TOut), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallOutputSensitive(GeneralTransformationRule(Of TIn, TOut), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallOutputSensitive(NMF.Transformations.GeneralTransformationRule{`0,`1},System.Func{`0,`1,System.Boolean})
    name: CallOutputSensitive
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TOut, IEnumerable<TRequiredInput>>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
  isExternal: true
  name: CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn, TOut, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Func<TIn, TOut, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallManyOutputSensitive<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, System.Func<TIn, TOut, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn, TOut, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), System.Func(Of TIn, TOut, Boolean))
  name.vb: CallManyOutputSensitive(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Func(Of TIn, TOut, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallManyOutputSensitive``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},System.Func{`0,`1,System.Boolean})
    name: CallManyOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TIn>, Action<TOut, TRequiredOutput>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TIn>, System.Action<TOut, TRequiredOutput>, System.Predicate<TRequiredInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TIn), System.Action(Of TOut, TRequiredOutput), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TIn), Action(Of TOut, TRequiredOutput), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,`0},System.Action{`1,``1},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TIn>, Action<TOut, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallFor<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Action<TOut, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Action(Of TOut, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TIn), Action(Of TOut, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallFor``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,`0},System.Action{`1,``2},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0},System.Action{``1,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  nameWithType: TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>, Action<TRequiredOutput, IEnumerable<TOut>>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.CallForEach<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>, System.Action<TRequiredOutput, System.Collections.Generic.IEnumerable<TOut>>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean), System.Action(Of TRequiredOutput, System.Collections.Generic.IEnumerable(Of TOut)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean), Action(Of TRequiredOutput, IEnumerable(Of TOut)))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TOut
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.CallForEach``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean},System.Action{``2,System.Collections.Generic.IEnumerable{`1}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOut
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.OutputType
  commentId: P:NMF.Transformations.TransformationRuleBase`2.OutputType
  name: OutputType
  nameWithType: TransformationRuleBase<TIn, TOut>.OutputType
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.OutputType
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).OutputType
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).OutputType
- uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
  isExternal: true
  name: SelectArrays<TRequiredInput1, TRequiredInput2>(Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>(Func<TIn, TOut, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TOut, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``2(System.Func{`0,`1,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
  isExternal: true
  name: SelectArrays<TRequiredInput>(Func<TIn, TOut, IEnumerable<TRequiredInput>>, Computation)
  nameWithType: TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>(Func<TIn, TOut, IEnumerable<TRequiredInput>>, Computation)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.SelectArrays<TRequiredInput>(System.Func<TIn, TOut, System.Collections.Generic.IEnumerable<TRequiredInput>>, NMF.Transformations.Core.Computation)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)(Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Computation)
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).SelectArrays(Of TRequiredInput)(System.Func(Of TIn, TOut, System.Collections.Generic.IEnumerable(Of TRequiredInput)), NMF.Transformations.Core.Computation)
  name.vb: SelectArrays(Of TRequiredInput)(Func(Of TIn, TOut, IEnumerable(Of TRequiredInput)), Computation)
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.SelectArrays``1(System.Func{`0,`1,System.Collections.Generic.IEnumerable{``0}},NMF.Transformations.Core.Computation)
    name: SelectArrays
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
  isExternal: true
  name: TraceOutput<TKey>(Func<TIn, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(Func<TIn, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(System.Func<TIn, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(Func(Of TIn, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(System.Func(Of TIn, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(Func(Of TIn, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(System.Func{`0,`1,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
  isExternal: true
  name: TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn, TOut, TKey>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(TraceEntryGroup<TKey, TOut>, Func<TIn, TOut, TKey>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceOutput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TOut>, System.Func<TIn, TOut, TKey>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn, TOut, TKey))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceOutput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TOut), System.Func(Of TIn, TOut, TKey))
  name.vb: TraceOutput(Of TKey)(TraceEntryGroup(Of TKey, TOut), Func(Of TIn, TOut, TKey))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceOutput``1(NMF.Transformations.TraceEntryGroup{``0,`1},System.Func{`0,`1,``0})
    name: TraceOutput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TOut
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceInput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceInput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  commentId: M:NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
  isExternal: true
  name: TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>, Func<TIn, TOut, TTraceOutput>)
  nameWithType: TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(TraceEntryGroup<TTraceInput, TTraceOutput>, Func<TIn, TOut, TTraceInput>, Func<TIn, TOut, TTraceOutput>)
  fullName: NMF.Transformations.TransformationRuleBase<TIn, TOut>.TraceAs<TTraceInput, TTraceOutput>(NMF.Transformations.TraceEntryGroup<TTraceInput, TTraceOutput>, System.Func<TIn, TOut, TTraceInput>, System.Func<TIn, TOut, TTraceOutput>)
  nameWithType.vb: TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput), Func(Of TIn, TOut, TTraceOutput))
  fullName.vb: NMF.Transformations.TransformationRuleBase(Of TIn, TOut).TraceAs(Of TTraceInput, TTraceOutput)(NMF.Transformations.TraceEntryGroup(Of TTraceInput, TTraceOutput), System.Func(Of TIn, TOut, TTraceInput), System.Func(Of TIn, TOut, TTraceOutput))
  name.vb: TraceAs(Of TTraceInput, TTraceOutput)(TraceEntryGroup(Of TTraceInput, TTraceOutput), Func(Of TIn, TOut, TTraceInput), Func(Of TIn, TOut, TTraceOutput))
  spec.csharp:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.TransformationRuleBase`2.TraceAs``2(NMF.Transformations.TraceEntryGroup{``0,``1},System.Func{`0,`1,``0},System.Func{`0,`1,``1})
    name: TraceAs
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TTraceInput
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: ','
  - name: " "
  - name: TTraceOutput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
  isExternal: true
  name: MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.MarkInstantiatingFor(GeneralTransformationRule, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule, System.Predicate(Of TIn))
  name.vb: MarkInstantiatingFor(GeneralTransformationRule, Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.MarkInstantiatingFor(NMF.Transformations.Core.GeneralTransformationRule,System.Predicate{`0})
    name: MarkInstantiatingFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Rule``1
  name: Rule<TRule>()
  nameWithType: GeneralTransformationRule<TIn>.Rule<TRule>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Rule<TRule>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule
  - name: <
  - name: TRule
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Rule``1
    name: Rule
  - name: (
  - name: Of
  - name: " "
  - name: TRule
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
  name: WithPattern(ITransformationRulePattern<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(ITransformationRulePattern<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(NMF.Transformations.ITransformationRulePattern<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(ITransformationRulePattern(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(NMF.Transformations.ITransformationRulePattern(Of TIn))
  name.vb: WithPattern(ITransformationRulePattern(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(NMF.Transformations.ITransformationRulePattern{`0})
    name: WithPattern
  - name: (
  - uid: NMF.Transformations.ITransformationRulePattern`1
    name: ITransformationRulePattern
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, INotifyEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, NMF.Expressions.INotifyEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, INotifyEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,NMF.Expressions.INotifyEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.WithPattern(Func<ITransformationContext, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.WithPattern(System.Func<NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).WithPattern(System.Func(Of NMF.Transformations.Core.ITransformationContext, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: WithPattern(Func(Of ITransformationContext, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.WithPattern(System.Func{NMF.Transformations.Core.ITransformationContext,System.Collections.Generic.IEnumerable{`0}})
    name: WithPattern
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
  name: RequireByType<TRequiredInput>()
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>()
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)()
  name.vb: RequireByType(Of TRequiredInput)()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
  isExternal: true
  name: RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: RequireByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``1(System.Func{`0,``0})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: RequireByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: RequireByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Require(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Require(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Require(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Require
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Require<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Require(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Require(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Require``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Require
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: RequireMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: RequireMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: RequireMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.RequireMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).RequireMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: RequireMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.RequireMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: RequireMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
  isExternal: true
  name: Call(GeneralTransformationRule, Func<TIn, object[]>)
  nameWithType: GeneralTransformationRule<TIn>.Call(GeneralTransformationRule, Func<TIn, object[]>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, object[]>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(GeneralTransformationRule, Func(Of TIn, Object()))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, Object()))
  name.vb: Call(GeneralTransformationRule, Func(Of TIn, Object()))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Object[]})
    name: Call
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
  isExternal: true
  name: CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany(GeneralTransformationRule, Func<TIn, IEnumerable<object[]>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func<TIn, System.Collections.Generic.IEnumerable<object[]>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of Object())))
  name.vb: CallMany(GeneralTransformationRule, Func(Of TIn, IEnumerable(Of Object())))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
  - name: '['
  - name: ']'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany(NMF.Transformations.Core.GeneralTransformationRule,System.Func{`0,System.Collections.Generic.IEnumerable{System.Object[]}})
    name: CallMany
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: (
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
  isExternal: true
  name: CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput>(System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput)(System.Func(Of TIn, TRequiredInput))
  name.vb: CallByType(Of TRequiredInput)(Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``1(System.Func{`0,``0})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: CallByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallByType``2(System.Func{`0,``0},System.Func{`0,``1})
    name: CallByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, TRequiredInput>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, TRequiredInput>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, TRequiredInput), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, TRequiredInput), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,``0},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
  isExternal: true
  name: Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  nameWithType: GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, TRequiredInput1>, Func<TIn, TRequiredInput2>, Predicate<TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.Call<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, TRequiredInput1>, System.Func<TIn, TRequiredInput2>, System.Predicate<TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).Call(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, TRequiredInput1), System.Func(Of TIn, TRequiredInput2), System.Predicate(Of TIn))
  name.vb: Call(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, TRequiredInput1), Func(Of TIn, TRequiredInput2), Predicate(Of TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.Call``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,``0},System.Func{`0,``1},System.Predicate{`0})
    name: Call
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput1
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput>(System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallManyByType(Of TRequiredInput)(Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallManyByType<TRequiredInput1, TRequiredInput2>(System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallManyByType(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallManyByType(Of TRequiredInput1, TRequiredInput2)(Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallManyByType``2(System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallManyByType
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
  name: CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TIn, IEnumerable<TRequiredInput>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TIn, System.Collections.Generic.IEnumerable<TRequiredInput>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of TRequiredInput)))
  name.vb: CallMany(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TIn, IEnumerable(Of TRequiredInput)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{`0,System.Collections.Generic.IEnumerable{``0}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
  isExternal: true
  name: CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType: GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TIn, IEnumerable<Tuple<TRequiredInput1, TRequiredInput2>>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallMany<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TIn, System.Collections.Generic.IEnumerable<System.Tuple<TRequiredInput1, TRequiredInput2>>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallMany(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TIn, System.Collections.Generic.IEnumerable(Of System.Tuple(Of TRequiredInput1, TRequiredInput2))))
  name.vb: CallMany(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TIn, IEnumerable(Of Tuple(Of TRequiredInput1, TRequiredInput2))))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallMany``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{`0,System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}}})
    name: CallMany
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Tuple`2
    name: Tuple
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.InputType
  commentId: P:NMF.Transformations.GeneralTransformationRule`1.InputType
  name: InputType
  nameWithType: GeneralTransformationRule<TIn>.InputType
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.InputType
  nameWithType.vb: GeneralTransformationRule(Of TIn).InputType
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).InputType
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
  isExternal: true
  name: CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, TIn>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, TIn>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, TIn), System.Predicate(Of TRequiredInput))
  name.vb: CallFor(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, TIn), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,`0},System.Predicate{``0})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, TIn>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, TIn>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallFor(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, TIn), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallFor
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
  isExternal: true
  name: CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(GeneralTransformationRule<TRequiredInput>, Func<TRequiredInput, IEnumerable<TIn>>, Predicate<TRequiredInput>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput>(NMF.Transformations.GeneralTransformationRule<TRequiredInput>, System.Func<TRequiredInput, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<TRequiredInput>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput), System.Func(Of TRequiredInput, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of TRequiredInput))
  name.vb: CallForEach(Of TRequiredInput)(GeneralTransformationRule(Of TRequiredInput), Func(Of TRequiredInput, IEnumerable(Of TIn)), Predicate(Of TRequiredInput))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``1(NMF.Transformations.GeneralTransformationRule{``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0}},System.Predicate{``0})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`1
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, Func<TRequiredInput1, TRequiredInput2, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach<TRequiredInput1, TRequiredInput2>(NMF.Transformations.GeneralTransformationRule<TRequiredInput1, TRequiredInput2>, System.Func<TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(Of TRequiredInput1, TRequiredInput2)(NMF.Transformations.GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), System.Func(Of TRequiredInput1, TRequiredInput2, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  name.vb: CallForEach(Of TRequiredInput1, TRequiredInput2)(GeneralTransformationRule(Of TRequiredInput1, TRequiredInput2), Func(Of TRequiredInput1, TRequiredInput2, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach``2(NMF.Transformations.GeneralTransformationRule{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEach
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: (
  - uid: NMF.Transformations.GeneralTransformationRule`2
    name: GeneralTransformationRule
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, TIn>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, TIn>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, TIn), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, TIn), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,`0},System.Func{``0,``1,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, TIn), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,`0},System.Func{``0,``1,``2,System.Boolean})
    name: CallForOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(TransformationRuleBase<TRequiredInput, TRequiredOutput>, Func<TRequiredInput, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput, TRequiredOutput>, System.Func<TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput, TRequiredOutput), System.Func(Of TRequiredInput, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput, TRequiredOutput), Func(Of TRequiredInput, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``2(NMF.Transformations.TransformationRuleBase{``0,``1},System.Func{``0,``1,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`2
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
  isExternal: true
  name: CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType: GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable<TIn>>, Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEachOutputSensitive<TRequiredInput1, TRequiredInput2, TRequiredOutput>(NMF.Transformations.TransformationRuleBase<TRequiredInput1, TRequiredInput2, TRequiredOutput>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable<TIn>>, System.Func<TRequiredInput1, TRequiredInput2, TRequiredOutput, bool>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(NMF.Transformations.TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, System.Collections.Generic.IEnumerable(Of TIn)), System.Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  name.vb: CallForEachOutputSensitive(Of TRequiredInput1, TRequiredInput2, TRequiredOutput)(TransformationRuleBase(Of TRequiredInput1, TRequiredInput2, TRequiredOutput), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, IEnumerable(Of TIn)), Func(Of TRequiredInput1, TRequiredInput2, TRequiredOutput, Boolean))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: <
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEachOutputSensitive``3(NMF.Transformations.TransformationRuleBase{``0,``1,``2},System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{`0}},System.Func{``0,``1,``2,System.Boolean})
    name: CallForEachOutputSensitive
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: (
  - uid: NMF.Transformations.TransformationRuleBase`3
    name: TransformationRuleBase
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRequiredInput1
  - name: ','
  - name: " "
  - name: TRequiredInput2
  - name: ','
  - name: " "
  - name: TRequiredOutput
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
  isExternal: true
  name: TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  nameWithType: GeneralTransformationRule<TIn>.TraceInput<TKey>(TraceEntryGroup<TKey, TIn>, Func<TIn, TKey>)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.TraceInput<TKey>(NMF.Transformations.TraceEntryGroup<TKey, TIn>, System.Func<TIn, TKey>)
  nameWithType.vb: GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).TraceInput(Of TKey)(NMF.Transformations.TraceEntryGroup(Of TKey, TIn), System.Func(Of TIn, TKey))
  name.vb: TraceInput(Of TKey)(TraceEntryGroup(Of TKey, TIn), Func(Of TIn, TKey))
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.TraceInput``1(NMF.Transformations.TraceEntryGroup{``0,`0},System.Func{`0,``0})
    name: TraceInput
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Transformations.TraceEntryGroup`2
    name: TraceEntryGroup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallFor(GeneralTransformationRule, Func<Computation, TIn>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, TIn>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallFor(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, TIn), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallFor(GeneralTransformationRule, Func(Of Computation, TIn), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallFor(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,`0},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallFor
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - name: TIn
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
  isExternal: true
  name: CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  nameWithType: GeneralTransformationRule<TIn>.CallForEach(GeneralTransformationRule, Func<Computation, IEnumerable<TIn>>, Predicate<Computation>, bool)
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func<NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable<TIn>>, System.Predicate<NMF.Transformations.Core.Computation>, bool)
  nameWithType.vb: GeneralTransformationRule(Of TIn).CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).CallForEach(NMF.Transformations.Core.GeneralTransformationRule, System.Func(Of NMF.Transformations.Core.Computation, System.Collections.Generic.IEnumerable(Of TIn)), System.Predicate(Of NMF.Transformations.Core.Computation), Boolean)
  name.vb: CallForEach(GeneralTransformationRule, Func(Of Computation, IEnumerable(Of TIn)), Predicate(Of Computation), Boolean)
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIn
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: <
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.CallForEach(NMF.Transformations.Core.GeneralTransformationRule,System.Func{NMF.Transformations.Core.Computation,System.Collections.Generic.IEnumerable{`0}},System.Predicate{NMF.Transformations.Core.Computation},System.Boolean)
    name: CallForEach
  - name: (
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Transformations.Core.Computation
    name: Computation
  - name: )
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Transformations.GeneralTransformationRule`1.ToString
  commentId: M:NMF.Transformations.GeneralTransformationRule`1.ToString
  name: ToString()
  nameWithType: GeneralTransformationRule<TIn>.ToString()
  fullName: NMF.Transformations.GeneralTransformationRule<TIn>.ToString()
  nameWithType.vb: GeneralTransformationRule(Of TIn).ToString()
  fullName.vb: NMF.Transformations.GeneralTransformationRule(Of TIn).ToString()
  spec.csharp:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.GeneralTransformationRule`1.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}
  definition: NMF.CodeGen.EventGenerator`1.GetEventArgsType(`0,NMF.Transformations.Core.ITransformationContext)
  name: GetEventArgsType(IEvent, ITransformationContext)
  nameWithType: EventGenerator<IEvent>.GetEventArgsType(IEvent, ITransformationContext)
  fullName: NMF.CodeGen.EventGenerator<NMF.Models.Meta.IEvent>.GetEventArgsType(NMF.Models.Meta.IEvent, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: EventGenerator(Of IEvent).GetEventArgsType(IEvent, ITransformationContext)
  fullName.vb: NMF.CodeGen.EventGenerator(Of NMF.Models.Meta.IEvent).GetEventArgsType(NMF.Models.Meta.IEvent, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
    name: GetEventArgsType
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetEventArgsType(NMF.Models.Meta.IEvent,NMF.Transformations.Core.ITransformationContext)
    name: GetEventArgsType
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType
  name: GetEventArgsType
  nameWithType: Meta2ClassesTransformation.Event2Event.GetEventArgsType
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetEventArgsType
- uid: NMF.Models.Meta.IEvent
  commentId: T:NMF.Models.Meta.IEvent
  parent: NMF.Models.Meta
  name: IEvent
  nameWithType: IEvent
  fullName: NMF.Models.Meta.IEvent
- uid: NMF.Transformations.Core.ITransformationContext
  commentId: T:NMF.Transformations.Core.ITransformationContext
  parent: NMF.Transformations.Core
  name: ITransformationContext
  nameWithType: ITransformationContext
  fullName: NMF.Transformations.Core.ITransformationContext
- uid: System.CodeDom.CodeTypeReference
  commentId: T:System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: true
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: NMF.CodeGen.EventGenerator`1.GetEventArgsType(`0,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.CodeGen.EventGenerator`1.GetEventArgsType(`0,NMF.Transformations.Core.ITransformationContext)
  name: GetEventArgsType(T, ITransformationContext)
  nameWithType: EventGenerator<T>.GetEventArgsType(T, ITransformationContext)
  fullName: NMF.CodeGen.EventGenerator<T>.GetEventArgsType(T, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: EventGenerator(Of T).GetEventArgsType(T, ITransformationContext)
  fullName.vb: NMF.CodeGen.EventGenerator(Of T).GetEventArgsType(T, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator`1.GetEventArgsType(`0,NMF.Transformations.Core.ITransformationContext)
    name: GetEventArgsType
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator`1.GetEventArgsType(`0,NMF.Transformations.Core.ITransformationContext)
    name: GetEventArgsType
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: System.CodeDom
  commentId: N:System.CodeDom
  isExternal: true
  name: System.CodeDom
  nameWithType: System.CodeDom
  fullName: System.CodeDom
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.CodeDom
    name: CodeDom
    isExternal: true
- uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  parent: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}
  definition: NMF.CodeGen.EventGenerator`1.Transform(`0,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  name: Transform(IEvent, CodeMemberEvent, ITransformationContext)
  nameWithType: EventGenerator<IEvent>.Transform(IEvent, CodeMemberEvent, ITransformationContext)
  fullName: NMF.CodeGen.EventGenerator<NMF.Models.Meta.IEvent>.Transform(NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: EventGenerator(Of IEvent).Transform(IEvent, CodeMemberEvent, ITransformationContext)
  fullName.vb: NMF.CodeGen.EventGenerator(Of NMF.Models.Meta.IEvent).Transform(NMF.Models.Meta.IEvent, System.CodeDom.CodeMemberEvent, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.Transform(NMF.Models.Meta.IEvent,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform
  name: Transform
  nameWithType: Meta2ClassesTransformation.Event2Event.Transform
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.Transform
- uid: System.CodeDom.CodeMemberEvent
  commentId: T:System.CodeDom.CodeMemberEvent
  parent: System.CodeDom
  isExternal: true
  name: CodeMemberEvent
  nameWithType: CodeMemberEvent
  fullName: System.CodeDom.CodeMemberEvent
- uid: NMF.CodeGen.EventGenerator`1.Transform(`0,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  commentId: M:NMF.CodeGen.EventGenerator`1.Transform(`0,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
  isExternal: true
  name: Transform(T, CodeMemberEvent, ITransformationContext)
  nameWithType: EventGenerator<T>.Transform(T, CodeMemberEvent, ITransformationContext)
  fullName: NMF.CodeGen.EventGenerator<T>.Transform(T, System.CodeDom.CodeMemberEvent, NMF.Transformations.Core.ITransformationContext)
  nameWithType.vb: EventGenerator(Of T).Transform(T, CodeMemberEvent, ITransformationContext)
  fullName.vb: NMF.CodeGen.EventGenerator(Of T).Transform(T, System.CodeDom.CodeMemberEvent, NMF.Transformations.Core.ITransformationContext)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator`1.Transform(`0,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator`1.Transform(`0,System.CodeDom.CodeMemberEvent,NMF.Transformations.Core.ITransformationContext)
    name: Transform
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.CodeDom.CodeMemberEvent
    name: CodeMemberEvent
    isExternal: true
  - name: ','
  - name: " "
  - uid: NMF.Transformations.Core.ITransformationContext
    name: ITransformationContext
  - name: )
- uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetName(NMF.Models.Meta.IEvent)
  commentId: M:NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetName(NMF.Models.Meta.IEvent)
  parent: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}
  definition: NMF.CodeGen.EventGenerator`1.GetName(`0)
  name: GetName(IEvent)
  nameWithType: EventGenerator<IEvent>.GetName(IEvent)
  fullName: NMF.CodeGen.EventGenerator<NMF.Models.Meta.IEvent>.GetName(NMF.Models.Meta.IEvent)
  nameWithType.vb: EventGenerator(Of IEvent).GetName(IEvent)
  fullName.vb: NMF.CodeGen.EventGenerator(Of NMF.Models.Meta.IEvent).GetName(NMF.Models.Meta.IEvent)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetName(NMF.Models.Meta.IEvent)
    name: GetName
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator{NMF.Models.Meta.IEvent}.GetName(NMF.Models.Meta.IEvent)
    name: GetName
  - name: (
  - uid: NMF.Models.Meta.IEvent
    name: IEvent
  - name: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName
  name: GetName
  nameWithType: Meta2ClassesTransformation.Event2Event.GetName
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.GetName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.CodeGen.EventGenerator`1.GetName(`0)
  commentId: M:NMF.CodeGen.EventGenerator`1.GetName(`0)
  name: GetName(T)
  nameWithType: EventGenerator<T>.GetName(T)
  fullName: NMF.CodeGen.EventGenerator<T>.GetName(T)
  nameWithType.vb: EventGenerator(Of T).GetName(T)
  fullName.vb: NMF.CodeGen.EventGenerator(Of T).GetName(T)
  spec.csharp:
  - uid: NMF.CodeGen.EventGenerator`1.GetName(`0)
    name: GetName
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.CodeGen.EventGenerator`1.GetName(`0)
    name: GetName
  - name: (
  - name: T
  - name: )
- uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  commentId: M:NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
  parent: NMF.Transformations.Core.GeneralTransformationRule
  name: RegisterDependencies()
  nameWithType: GeneralTransformationRule.RegisterDependencies()
  fullName: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies()
  spec.csharp:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Transformations.Core.GeneralTransformationRule.RegisterDependencies
    name: RegisterDependencies
  - name: (
  - name: )
- uid: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies*
  commentId: Overload:NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies
  name: RegisterDependencies
  nameWithType: Meta2ClassesTransformation.Event2Event.RegisterDependencies
  fullName: NMF.Models.Meta.Meta2ClassesTransformation.Event2Event.RegisterDependencies
